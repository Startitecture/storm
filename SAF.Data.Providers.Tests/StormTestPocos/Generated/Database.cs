
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `StormTestModel`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=(localdb)\ProjectsV13;Initial Catalog=Startitecture.Orm.Tests.Schema;Integrated Security=SSPI`
//     Schema:                 ``
//     Include Views:          `True`


namespace SAF.Data.Providers.Tests.StormTest
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web;
    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Provides the data context for the StormTest database.
    /// </summary>
    public partial class StormTest : Database
    {
        /// <summary>
        /// The current factory instance.
        /// </summary>
        [ThreadStatic]
        private static StormTest instance;

        /// <summary>
        /// Initializes a new instance of the StormTest class.
        /// </summary>
        public StormTest() 
            : base("StormTestModel")
        {
            this.CommonConstruct();
        }

        /// <summary>
        /// Initializes a new instance of the StormTest class.
        /// </summary>
        /// <param name="connectionStringName">
        /// The name of the connection string.
        /// </param>
        public StormTest(string connectionStringName) 
            : base(connectionStringName)
        {
            this.CommonConstruct();
        }
        
        /// <summary>
        /// Provides an interface for the database context's factory.
        /// </summary>
        public interface IFactory
        {
            /// <summary>
            /// Gets an instance of the current database context.
            /// </summary>
            /// <returns>
            /// A <see cref="StormTest"/> instance.
            /// </returns>
            StormTest GetInstance();
        }
        
        /// <summary>
        /// Gets or sets the current database context factory.
        /// </summary>
        public static IFactory Factory { get; set; }

        /// <summary>
        /// Gets the current database context factory.
        /// </summary>
        /// <returns>
        /// A <see cref="StormTest"/> instance.
        /// </returns>
        public static StormTest GetInstance()
        {
            if (instance != null)
            {
                return instance;
            }
               
            if (Factory != null)
            {
                return Factory.GetInstance();
            }
            else
            {
                return new StormTest();
            }
        }
        
        /// <summary>
        /// Starts a transaction.
        /// </summary>
        protected override void OnBeginTransaction()
        {
            if (instance == null)
            {
                instance = this;
            }
        }
        
        /// <summary>
        /// Ends the current transaction.
        /// </summary>
        protected override void OnEndTransaction()
        {
            if (instance == this)
            {
                instance = null;
            }
        }        
        
        /// <summary>
        /// Provides a method that can be run when the instance is instantiated.
        /// </summary>
        partial void CommonConstruct();
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DataSlice] table.
    /// </summary>
    [TableName("[dbo].[DataSlice]")]
    [PrimaryKey("DataSliceId")]
    [ExplicitColumns]
    public partial class DataSlouseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DataSliceId.
        /// </summary>
        [Column]
        public int DataSliceId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DataSliceInstance] table.
    /// </summary>
    [TableName("[dbo].[DataSliceInstance]")]
    [PrimaryKey("DataSliceInstanceId")]
    [ExplicitColumns]
    public partial class DataSliceInstanceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DataSliceInstanceId.
        /// </summary>
        [Column]
        public int DataSliceInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the DataSliceId.
        /// </summary>
        [Column]
        public int DataSliceId { get; set; }

        /// <summary>
        /// Gets or sets the Identifier.
        /// </summary>
        [Column]
        public Guid Identifier { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Document] table.
    /// </summary>
    [TableName("[dbo].[Document]")]
    [PrimaryKey("DocumentId")]
    [ExplicitColumns]
    public partial class DocumentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentId.
        /// </summary>
        [Column]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or sets the ResourceClassificationId.
        /// </summary>
        [Column]
        public int ResourceClassificationId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DocumentVersion] table.
    /// </summary>
    [TableName("[dbo].[DocumentVersion]")]
    [PrimaryKey("DocumentVersionId")]
    [ExplicitColumns]
    public partial class DocumentVersionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentVersionId.
        /// </summary>
        [Column]
        public int DocumentVersionId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentId.
        /// </summary>
        [Column]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or sets the FileName.
        /// </summary>
        [Column]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the Uri.
        /// </summary>
        [Column]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or sets the Revision.
        /// </summary>
        [Column]
        public int Revision { get; set; }

        /// <summary>
        /// Gets or sets the RevisionTime.
        /// </summary>
        [Column]
        public DateTimeOffset RevisionTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ExternalResource] table.
    /// </summary>
    [TableName("[dbo].[ExternalResource]")]
    [PrimaryKey("ExternalResourceId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ExternalResourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalResourceId.
        /// </summary>
        [Column]
        public int ExternalResourceId { get; set; }

        /// <summary>
        /// Gets or sets the ResourceClassificationId.
        /// </summary>
        [Column]
        public int ResourceClassificationId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Uri.
        /// </summary>
        [Column]
        public string Uri { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Person] table.
    /// </summary>
    [TableName("[dbo].[Person]")]
    [PrimaryKey("PersonId")]
    [ExplicitColumns]
    public partial class PersonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        [Column]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the MiddleName.
        /// </summary>
        [Column]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        [Column]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the SecurityIdentifier.
        /// </summary>
        [Column]
        public string SecurityIdentifier { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ResourceAttachment] table.
    /// </summary>
    [TableName("[dbo].[ResourceAttachment]")]
    [PrimaryKey("ResourceAttahcmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ResourceAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ResourceAttahcmentId.
        /// </summary>
        [Column]
        public long ResourceAttahcmentId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalResourceId.
        /// </summary>
        [Column]
        public int ExternalResourceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ResourceClassification] table.
    /// </summary>
    [TableName("[dbo].[ResourceClassification]")]
    [PrimaryKey("ResourceClassificationId")]
    [ExplicitColumns]
    public partial class ResourceClassificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ResourceClassificationId.
        /// </summary>
        [Column]
        public int ResourceClassificationId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [Column]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the IsActive.
        /// </summary>
        [Column]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[sysdiagrams] table.
    /// </summary>
    [TableName("[dbo].[sysdiagrams]")]
    [PrimaryKey("diagram_id")]
    [ExplicitColumns]
    public partial class sysdiagramRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [Column]
        public string name { get; set; }

        /// <summary>
        /// Gets or sets the principal_id.
        /// </summary>
        [Column]
        public int principal_id { get; set; }

        /// <summary>
        /// Gets or sets the diagram_id.
        /// </summary>
        [Column]
        public int diagram_id { get; set; }

        /// <summary>
        /// Gets or sets the version.
        /// </summary>
        [Column]
        public int? version { get; set; }

        /// <summary>
        /// Gets or sets the definition.
        /// </summary>
        [Column]
        public byte[] definition { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[CurrencyValueItem] table.
    /// </summary>
    [TableName("[forms].[CurrencyValueItem]")]
    [PrimaryKey("CurrencyValueItemId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CurrencyValueItemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CurrencyValueItemId.
        /// </summary>
        [Column]
        public long CurrencyValueItemId { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public decimal Value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[DateValueItem] table.
    /// </summary>
    [TableName("[forms].[DateValueItem]")]
    [PrimaryKey("DateValueItemId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DateValueItemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DateValueItemId.
        /// </summary>
        [Column]
        public long DateValueItemId { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public DateTimeOffset Value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[DiscreteValueItem] table.
    /// </summary>
    [TableName("[forms].[DiscreteValueItem]")]
    [PrimaryKey("DiscreteValueItemId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DiscreteValueItemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DiscreteValueItemId.
        /// </summary>
        [Column]
        public long DiscreteValueItemId { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public long Value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[DocumentValueItem] table.
    /// </summary>
    [TableName("[forms].[DocumentValueItem]")]
    [PrimaryKey("DocumentValueItemId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DocumentValueItemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentValueItemId.
        /// </summary>
        [Column]
        public long DocumentValueItemId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentVersionId.
        /// </summary>
        [Column]
        public int DocumentVersionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[Field] table.
    /// </summary>
    [TableName("[forms].[Field]")]
    [PrimaryKey("FieldId")]
    [ExplicitColumns]
    public partial class FieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldId.
        /// </summary>
        [Column]
        public int FieldId { get; set; }

        /// <summary>
        /// Gets or sets the DataSliceId.
        /// </summary>
        [Column]
        public int DataSliceId { get; set; }

        /// <summary>
        /// Gets or sets the FieldTypeId.
        /// </summary>
        [Column]
        public int FieldTypeId { get; set; }

        /// <summary>
        /// Gets or sets the ValueTypeId.
        /// </summary>
        [Column]
        public int ValueTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Label.
        /// </summary>
        [Column]
        public string Label { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[FieldInstance] table.
    /// </summary>
    [TableName("[forms].[FieldInstance]")]
    [PrimaryKey("FieldInstanceId")]
    [ExplicitColumns]
    public partial class FieldInstanceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldInstanceId.
        /// </summary>
        [Column]
        public int FieldInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the FieldId.
        /// </summary>
        [Column]
        public int FieldId { get; set; }

        /// <summary>
        /// Gets or sets the DataSliceInstanceId.
        /// </summary>
        [Column]
        public int DataSliceInstanceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[FieldPlacement] table.
    /// </summary>
    [TableName("[forms].[FieldPlacement]")]
    [PrimaryKey("FieldPlacementId")]
    [ExplicitColumns]
    public partial class FieldPlacementRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldPlacementId.
        /// </summary>
        [Column]
        public long FieldPlacementId { get; set; }

        /// <summary>
        /// Gets or sets the FieldInstanceId.
        /// </summary>
        [Column]
        public int FieldInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the LayoutAreaId.
        /// </summary>
        [Column]
        public int LayoutAreaId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[FieldType] table.
    /// </summary>
    [TableName("[forms].[FieldType]")]
    [PrimaryKey("FieldTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class FieldTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldTypeId.
        /// </summary>
        [Column]
        public int FieldTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[FieldValue] table.
    /// </summary>
    [TableName("[forms].[FieldValue]")]
    [PrimaryKey("FieldValueId")]
    [ExplicitColumns]
    public partial class FieldValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldValueId.
        /// </summary>
        [Column]
        public long FieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the FormSubmissionId.
        /// </summary>
        [Column]
        public long FormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the FieldInstanceId.
        /// </summary>
        [Column]
        public int FieldInstanceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[FieldValueItem] table.
    /// </summary>
    [TableName("[forms].[FieldValueItem]")]
    [PrimaryKey("FieldValueItemId")]
    [ExplicitColumns]
    public partial class FieldValueItemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldValueItemId.
        /// </summary>
        [Column]
        public long FieldValueItemId { get; set; }

        /// <summary>
        /// Gets or sets the FieldValueId.
        /// </summary>
        [Column]
        public long FieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[FloatingValueItem] table.
    /// </summary>
    [TableName("[forms].[FloatingValueItem]")]
    [PrimaryKey("FloatingValueItemId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class FloatingValueItemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FloatingValueItemId.
        /// </summary>
        [Column]
        public long FloatingValueItemId { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public double Value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[Form] table.
    /// </summary>
    [TableName("[forms].[Form]")]
    [PrimaryKey("FormId")]
    [ExplicitColumns]
    public partial class FormRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormId.
        /// </summary>
        [Column]
        public int FormId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the IsActive.
        /// </summary>
        [Column]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[FormSubmission] table.
    /// </summary>
    [TableName("[forms].[FormSubmission]")]
    [PrimaryKey("FormSubmissionId")]
    [ExplicitColumns]
    public partial class FormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormSubmissionId.
        /// </summary>
        [Column]
        public long FormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets or sets the SubmissionTime.
        /// </summary>
        [Column]
        public DateTimeOffset SubmissionTime { get; set; }

        /// <summary>
        /// Gets or sets the SubmittedByPersonId.
        /// </summary>
        [Column]
        public int SubmittedByPersonId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[FormVersion] table.
    /// </summary>
    [TableName("[forms].[FormVersion]")]
    [PrimaryKey("FormVersionId")]
    [ExplicitColumns]
    public partial class FormVersionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets or sets the FormId.
        /// </summary>
        [Column]
        public int FormId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Revision.
        /// </summary>
        [Column]
        public int Revision { get; set; }

        /// <summary>
        /// Gets or sets the IsActive.
        /// </summary>
        [Column]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[LayoutArea] table.
    /// </summary>
    [TableName("[forms].[LayoutArea]")]
    [PrimaryKey("LayoutAreaId")]
    [ExplicitColumns]
    public partial class LayoutAreaRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LayoutAreaId.
        /// </summary>
        [Column]
        public int LayoutAreaId { get; set; }

        /// <summary>
        /// Gets or sets the SectionId.
        /// </summary>
        [Column]
        public int SectionId { get; set; }

        /// <summary>
        /// Gets or sets the Identifier.
        /// </summary>
        [Column]
        public Guid Identifier { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the Style.
        /// </summary>
        [Column]
        public string Style { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[Page] table.
    /// </summary>
    [TableName("[forms].[Page]")]
    [PrimaryKey("PageId")]
    [ExplicitColumns]
    public partial class PageRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PageId.
        /// </summary>
        [Column]
        public int PageId { get; set; }

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[ReferenceValueItem] table.
    /// </summary>
    [TableName("[forms].[ReferenceValueItem]")]
    [PrimaryKey("ReferenceValueItemId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ReferenceValueItemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ReferenceValueItemId.
        /// </summary>
        [Column]
        public long ReferenceValueItemId { get; set; }

        /// <summary>
        /// Gets or sets the ItemType.
        /// </summary>
        [Column]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or sets the ItemId.
        /// </summary>
        [Column]
        public long ItemId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[Section] table.
    /// </summary>
    [TableName("[forms].[Section]")]
    [PrimaryKey("SectionId")]
    [ExplicitColumns]
    public partial class SectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the SectionId.
        /// </summary>
        [Column]
        public int SectionId { get; set; }

        /// <summary>
        /// Gets or sets the PageId.
        /// </summary>
        [Column]
        public int PageId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[TextValueItem] table.
    /// </summary>
    [TableName("[forms].[TextValueItem]")]
    [PrimaryKey("TextValueItemId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class TextValueItemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TextValueItemId.
        /// </summary>
        [Column]
        public long TextValueItemId { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public string Value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Forms
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [forms].[ValueType] table.
    /// </summary>
    [TableName("[forms].[ValueType]")]
    [PrimaryKey("ValueTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ValueTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ValueTypeId.
        /// </summary>
        [Column]
        public int ValueTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[Attachment] table.
    /// </summary>
    [TableName("[workflow].[Attachment]")]
    [PrimaryKey("AttachmentId")]
    [ExplicitColumns]
    public partial class AttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentId.
        /// </summary>
        [Column]
        public long AttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowFormSubmissionId.
        /// </summary>
        [Column]
        public long WorkflowFormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public int Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[DeadlineType] table.
    /// </summary>
    [TableName("[workflow].[DeadlineType]")]
    [PrimaryKey("DeadlineTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DeadlineTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DeadlineTypeId.
        /// </summary>
        [Column]
        public int DeadlineTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[DocumentAttachment] table.
    /// </summary>
    [TableName("[workflow].[DocumentAttachment]")]
    [PrimaryKey("DocumentAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DocumentAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentAttachmentId.
        /// </summary>
        [Column]
        public long DocumentAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentVersionId.
        /// </summary>
        [Column]
        public int DocumentVersionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[FormPhaseInstance] table.
    /// </summary>
    [TableName("[workflow].[FormPhaseInstance]")]
    [PrimaryKey("FormPhaseInstanceId")]
    [ExplicitColumns]
    public partial class FormPhaseInstanceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormPhaseInstanceId.
        /// </summary>
        [Column]
        public int FormPhaseInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[PhaseActionDeadline] table.
    /// </summary>
    [TableName("[workflow].[PhaseActionDeadline]")]
    [PrimaryKey("PhaseActionDeadlineId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class PhaseActionDeadlineRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseActionDeadlineId.
        /// </summary>
        [Column]
        public int PhaseActionDeadlineId { get; set; }

        /// <summary>
        /// Gets or sets the DeadlineTypeId.
        /// </summary>
        [Column]
        public int DeadlineTypeId { get; set; }

        /// <summary>
        /// Gets or sets the RoutingTypeId.
        /// </summary>
        [Column]
        public int RoutingTypeId { get; set; }

        /// <summary>
        /// Gets or sets the DeadlineDays.
        /// </summary>
        [Column]
        public short DeadlineDays { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[PhaseSignatureOption] table.
    /// </summary>
    [TableName("[workflow].[PhaseSignatureOption]")]
    [PrimaryKey("PhaseSignatureOptionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class PhaseSignatureOptionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseSignatureOptionId.
        /// </summary>
        [Column]
        public int PhaseSignatureOptionId { get; set; }

        /// <summary>
        /// Gets or sets the SignatureTypeId.
        /// </summary>
        [Column]
        public int SignatureTypeId { get; set; }

        /// <summary>
        /// Gets or sets the RejectionBehaviorId.
        /// </summary>
        [Column]
        public int RejectionBehaviorId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[PhaseState] table.
    /// </summary>
    [TableName("[workflow].[PhaseState]")]
    [PrimaryKey("PhaseStateId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class PhaseStateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseStateId.
        /// </summary>
        [Column]
        public int PhaseStateId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[PhaseType] table.
    /// </summary>
    [TableName("[workflow].[PhaseType]")]
    [PrimaryKey("PhaseTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class PhaseTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseTypeId.
        /// </summary>
        [Column]
        public int PhaseTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[Process] table.
    /// </summary>
    [TableName("[workflow].[Process]")]
    [PrimaryKey("ProcessId")]
    [ExplicitColumns]
    public partial class ProcessRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessId.
        /// </summary>
        [Column]
        public int ProcessId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[ProcessPhase] table.
    /// </summary>
    [TableName("[workflow].[ProcessPhase]")]
    [PrimaryKey("ProcessPhaseId")]
    [ExplicitColumns]
    public partial class ProcessPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessVersionId.
        /// </summary>
        [Column]
        public int ProcessVersionId { get; set; }

        /// <summary>
        /// Gets or sets the PhaseTypeId.
        /// </summary>
        [Column]
        public int PhaseTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[ProcessVersion] table.
    /// </summary>
    [TableName("[workflow].[ProcessVersion]")]
    [PrimaryKey("ProcessVersionId")]
    [ExplicitColumns]
    public partial class ProcessVersionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessVersionId.
        /// </summary>
        [Column]
        public int ProcessVersionId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessId.
        /// </summary>
        [Column]
        public int ProcessId { get; set; }

        /// <summary>
        /// Gets or sets the Revision.
        /// </summary>
        [Column]
        public int Revision { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[RejectionBehavior] table.
    /// </summary>
    [TableName("[workflow].[RejectionBehavior]")]
    [PrimaryKey("RejectionBehaviorId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class RejectionBehaviorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RejectionBehaviorId.
        /// </summary>
        [Column]
        public int RejectionBehaviorId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[RoutingType] table.
    /// </summary>
    [TableName("[workflow].[RoutingType]")]
    [PrimaryKey("RoutingTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class RoutingTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoutingTypeId.
        /// </summary>
        [Column]
        public int RoutingTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[SignatureType] table.
    /// </summary>
    [TableName("[workflow].[SignatureType]")]
    [PrimaryKey("SignatureTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SignatureTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the SignatureTypeId.
        /// </summary>
        [Column]
        public int SignatureTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[WorkflowFormSubmission] table.
    /// </summary>
    [TableName("[workflow].[WorkflowFormSubmission]")]
    [PrimaryKey("WorkflowFormSubmissionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowFormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowFormSubmissionId.
        /// </summary>
        [Column]
        public long WorkflowFormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseInstanceId.
        /// </summary>
        [Column]
        public long WorkflowPhaseInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the FormPhaseInstanceId.
        /// </summary>
        [Column]
        public int FormPhaseInstanceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[WorkflowInstance] table.
    /// </summary>
    [TableName("[workflow].[WorkflowInstance]")]
    [PrimaryKey("WorkflowInstanceId")]
    [ExplicitColumns]
    public partial class WorkflowInstanceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowInstanceId.
        /// </summary>
        [Column]
        public int WorkflowInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessVersionId.
        /// </summary>
        [Column]
        public int ProcessVersionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowStateId.
        /// </summary>
        [Column]
        public int WorkflowStateId { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[WorkflowPhaseInstance] table.
    /// </summary>
    [TableName("[workflow].[WorkflowPhaseInstance]")]
    [PrimaryKey("WorkflowPhaseInstanceId")]
    [ExplicitColumns]
    public partial class WorkflowPhaseInstanceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowPhaseInstanceId.
        /// </summary>
        [Column]
        public long WorkflowPhaseInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowInstanceId.
        /// </summary>
        [Column]
        public int WorkflowInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the PhaseStateId.
        /// </summary>
        [Column]
        public int PhaseStateId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.StormTest.Workflow
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [workflow].[WorkflowState] table.
    /// </summary>
    [TableName("[workflow].[WorkflowState]")]
    [PrimaryKey("WorkflowStateId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowStateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowStateId.
        /// </summary>
        [Column]
        public int WorkflowStateId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

