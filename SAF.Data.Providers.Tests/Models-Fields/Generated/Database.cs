
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `FieldsModel`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=KhepriPoc;Integrated Security=SSPI`
//     Schema:                 ``
//     Include Views:          `True`


namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web;
    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Provides the data context for the FieldsModel database.
    /// </summary>
    public partial class FieldsModel : Database
    {
        /// <summary>
        /// The current factory instance.
        /// </summary>
        [ThreadStatic]
        private static FieldsModel instance;

        /// <summary>
        /// Initializes a new instance of the FieldsModel class.
        /// </summary>
        public FieldsModel() 
            : base("FieldsModel")
        {
            this.CommonConstruct();
        }

        /// <summary>
        /// Initializes a new instance of the FieldsModel class.
        /// </summary>
        /// <param name="connectionStringName">
        /// The name of the connection string.
        /// </param>
        public FieldsModel(string connectionStringName) 
            : base(connectionStringName)
        {
            this.CommonConstruct();
        }
        
        /// <summary>
        /// Provides an interface for the database context's factory.
        /// </summary>
        public interface IFactory
        {
            /// <summary>
            /// Gets an instance of the current database context.
            /// </summary>
            /// <returns>
            /// A <see cref="FieldsModel"/> instance.
            /// </returns>
            FieldsModel GetInstance();
        }
        
        /// <summary>
        /// Gets or sets the current database context factory.
        /// </summary>
        public static IFactory Factory { get; set; }

        /// <summary>
        /// Gets the current database context factory.
        /// </summary>
        /// <returns>
        /// A <see cref="FieldsModel"/> instance.
        /// </returns>
        public static FieldsModel GetInstance()
        {
            if (instance != null)
            {
                return instance;
            }
               
            if (Factory != null)
            {
                return Factory.GetInstance();
            }
            else
            {
                return new FieldsModel();
            }
        }
        
        /// <summary>
        /// Starts a transaction.
        /// </summary>
        protected override void OnBeginTransaction()
        {
            if (instance == null)
            {
                instance = this;
            }
        }
        
        /// <summary>
        /// Ends the current transaction.
        /// </summary>
        protected override void OnEndTransaction()
        {
            if (instance == this)
            {
                instance = null;
            }
        }        
        
        /// <summary>
        /// Provides a method that can be run when the instance is instantiated.
        /// </summary>
        partial void CommonConstruct();
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[__RefactorLog] table.
    /// </summary>
    [TableName("[dbo].[__RefactorLog]")]
    [PrimaryKey("OperationKey", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class __RefactorLogRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the OperationKey.
        /// </summary>
        [Column]
        public Guid OperationKey { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ELMAH_Error] table.
    /// </summary>
    [TableName("[dbo].[ELMAH_Error]")]
    [PrimaryKey("ErrorId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ELMAH_ErrorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ErrorId.
        /// </summary>
        [Column]
        public Guid ErrorId { get; set; }

        /// <summary>
        /// Gets or sets the Application.
        /// </summary>
        [Column]
        public string Application { get; set; }

        /// <summary>
        /// Gets or sets the Host.
        /// </summary>
        [Column]
        public string Host { get; set; }

        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [Column]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the Source.
        /// </summary>
        [Column]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets the Message.
        /// </summary>
        [Column]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets the User.
        /// </summary>
        [Column]
        public string User { get; set; }

        /// <summary>
        /// Gets or sets the StatusCode.
        /// </summary>
        [Column]
        public int StatusCode { get; set; }

        /// <summary>
        /// Gets or sets the TimeUtc.
        /// </summary>
        [Column]
        public DateTime TimeUtc { get; set; }

        /// <summary>
        /// Gets or sets the Sequence.
        /// </summary>
        [Column]
        public int Sequence { get; set; }

        /// <summary>
        /// Gets or sets the AllXml.
        /// </summary>
        [Column]
        public string AllXml { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ErrorLog] table.
    /// </summary>
    [TableName("[dbo].[ErrorLog]")]
    [PrimaryKey("Id")]
    [ExplicitColumns]
    public partial class ErrorLogRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        [Column]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the CorrelationId.
        /// </summary>
        [Column]
        public Guid CorrelationId { get; set; }

        /// <summary>
        /// Gets or sets the EventDateOffset.
        /// </summary>
        [Column]
        public DateTimeOffset EventDateOffset { get; set; }

        /// <summary>
        /// Gets or sets the CurrentUser.
        /// </summary>
        [Column]
        public string CurrentUser { get; set; }

        /// <summary>
        /// Gets or sets the Action.
        /// </summary>
        [Column]
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets the Endpoint.
        /// </summary>
        [Column]
        public string Endpoint { get; set; }

        /// <summary>
        /// Gets or sets the Server.
        /// </summary>
        [Column]
        public string Server { get; set; }

        /// <summary>
        /// Gets or sets the ItemDetail.
        /// </summary>
        [Column]
        public string ItemDetail { get; set; }

        /// <summary>
        /// Gets or sets the ExceptionDetail.
        /// </summary>
        [Column]
        public string ExceptionDetail { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FieldPlacement] table.
    /// </summary>
    [TableName("[dbo].[FieldPlacement]")]
    [PrimaryKey("FieldPlacementId")]
    [ExplicitColumns]
    public partial class FieldPlacementRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldPlacementId.
        /// </summary>
        [Column]
        public int FieldPlacementId { get; set; }

        /// <summary>
        /// Gets or sets the LayoutSectionId.
        /// </summary>
        [Column]
        public int LayoutSectionId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the CssStyle.
        /// </summary>
        [Column]
        public string CssStyle { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Form] table.
    /// </summary>
    [TableName("[dbo].[Form]")]
    [PrimaryKey("FormId")]
    [ExplicitColumns]
    public partial class FormRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormId.
        /// </summary>
        [Column]
        public int FormId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormLayout] table.
    /// </summary>
    [TableName("[dbo].[FormLayout]")]
    [PrimaryKey("FormLayoutId")]
    [ExplicitColumns]
    public partial class FormLayoutRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormLayoutId.
        /// </summary>
        [Column]
        public int FormLayoutId { get; set; }

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the Footer.
        /// </summary>
        [Column]
        public string Footer { get; set; }

        /// <summary>
        /// Gets or sets the IsActive.
        /// </summary>
        [Column]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormSubmission] table.
    /// </summary>
    [TableName("[dbo].[FormSubmission]")]
    [PrimaryKey("FormSubmissionId")]
    [ExplicitColumns]
    public partial class FormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormSubmissionId.
        /// </summary>
        [Column]
        public long FormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the SubmittedByPersonId.
        /// </summary>
        [Column]
        public int SubmittedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the SubmittedTime.
        /// </summary>
        [Column]
        public DateTimeOffset SubmittedTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormSubmissionValue] table.
    /// </summary>
    [TableName("[dbo].[FormSubmissionValue]")]
    [PrimaryKey("FormSubmissionValueId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class FormSubmissionValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormSubmissionValueId.
        /// </summary>
        [Column]
        public long FormSubmissionValueId { get; set; }

        /// <summary>
        /// Gets or sets the FormSubmissionId.
        /// </summary>
        [Column]
        public long FormSubmissionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormVersion] table.
    /// </summary>
    [TableName("[dbo].[FormVersion]")]
    [PrimaryKey("FormVersionId")]
    [ExplicitColumns]
    public partial class FormVersionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets or sets the FormId.
        /// </summary>
        [Column]
        public int FormId { get; set; }

        /// <summary>
        /// Gets or sets the Revision.
        /// </summary>
        [Column]
        public short Revision { get; set; }

        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [Column]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the Header.
        /// </summary>
        [Column]
        public string Header { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the Footer.
        /// </summary>
        [Column]
        public string Footer { get; set; }

        /// <summary>
        /// Gets or sets the CreatedByPersonId.
        /// </summary>
        [Column]
        public int CreatedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the CreatedTime.
        /// </summary>
        [Column]
        public DateTimeOffset CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedByPersonId.
        /// </summary>
        [Column]
        public int LastModifiedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedTime.
        /// </summary>
        [Column]
        public DateTimeOffset LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or sets the IsActive.
        /// </summary>
        [Column]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[LayoutPage] table.
    /// </summary>
    [TableName("[dbo].[LayoutPage]")]
    [PrimaryKey("LayoutPageId")]
    [ExplicitColumns]
    public partial class LayoutPageRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LayoutPageId.
        /// </summary>
        [Column]
        public int LayoutPageId { get; set; }

        /// <summary>
        /// Gets or sets the FormLayoutId.
        /// </summary>
        [Column]
        public int FormLayoutId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the ShowHeader.
        /// </summary>
        [Column]
        public bool ShowHeader { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[LayoutPageSection] table.
    /// </summary>
    [TableName("[dbo].[LayoutPageSection]")]
    [PrimaryKey("LayoutPageSectionId")]
    [ExplicitColumns]
    public partial class LayoutPageSectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LayoutPageSectionId.
        /// </summary>
        [Column]
        public int LayoutPageSectionId { get; set; }

        /// <summary>
        /// Gets or sets the LayoutPageId.
        /// </summary>
        [Column]
        public int LayoutPageId { get; set; }

        /// <summary>
        /// Gets or sets the LayoutSectionId.
        /// </summary>
        [Column]
        public int LayoutSectionId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[LayoutSection] table.
    /// </summary>
    [TableName("[dbo].[LayoutSection]")]
    [PrimaryKey("LayoutSectionId")]
    [ExplicitColumns]
    public partial class LayoutSectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LayoutSectionId.
        /// </summary>
        [Column]
        public int LayoutSectionId { get; set; }

        /// <summary>
        /// Gets or sets the InstanceIdentifier.
        /// </summary>
        [Column]
        public Guid InstanceIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the ShowHeader.
        /// </summary>
        [Column]
        public bool ShowHeader { get; set; }

        /// <summary>
        /// Gets or sets the CssStyle.
        /// </summary>
        [Column]
        public string CssStyle { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Person] table.
    /// </summary>
    [TableName("[dbo].[Person]")]
    [PrimaryKey("PersonId")]
    [ExplicitColumns]
    public partial class PersonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        [Column]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the MiddleName.
        /// </summary>
        [Column]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        [Column]
        public string LastName { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedCurrencyValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedCurrencyValue]")]
    [PrimaryKey("UnifiedCurrencyValueId")]
    [ExplicitColumns]
    public partial class UnifiedCurrencyValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedCurrencyValueId.
        /// </summary>
        [Column]
        public long UnifiedCurrencyValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the CurrencyValue.
        /// </summary>
        [Column]
        public decimal CurrencyValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedDateValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedDateValue]")]
    [PrimaryKey("UnifiedDateValueId")]
    [ExplicitColumns]
    public partial class UnifiedDateValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedDateValueId.
        /// </summary>
        [Column]
        public long UnifiedDateValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the DateValue.
        /// </summary>
        [Column]
        public DateTimeOffset DateValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedField] table.
    /// </summary>
    [TableName("[dbo].[UnifiedField]")]
    [PrimaryKey("UnifiedFieldId")]
    [ExplicitColumns]
    public partial class UnifiedFieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldTypeId.
        /// </summary>
        [Column]
        public int UnifiedFieldTypeId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedValueTypeId.
        /// </summary>
        [Column]
        public int UnifiedValueTypeId { get; set; }

        /// <summary>
        /// Gets or sets the SourceType.
        /// </summary>
        [Column]
        public string SourceType { get; set; }

        /// <summary>
        /// Gets or sets the IsCustom.
        /// </summary>
        [Column]
        public bool IsCustom { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Caption.
        /// </summary>
        [Column]
        public string Caption { get; set; }

        /// <summary>
        /// Gets or sets the Label.
        /// </summary>
        [Column]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the ToolTip.
        /// </summary>
        [Column]
        public string ToolTip { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldType] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldType]")]
    [PrimaryKey("UnifiedFieldTypeId")]
    [ExplicitColumns]
    public partial class UnifiedFieldTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldTypeId.
        /// </summary>
        [Column]
        public int UnifiedFieldTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldValue]")]
    [PrimaryKey("UnifiedFieldValueId")]
    [ExplicitColumns]
    public partial class UnifiedFieldValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedByPersonId.
        /// </summary>
        [Column]
        public int LastModifiedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedTime.
        /// </summary>
        [Column]
        public DateTimeOffset LastModifiedTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedIdentifierValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedIdentifierValue]")]
    [PrimaryKey("UnifiedIdentifierValueId")]
    [ExplicitColumns]
    public partial class UnifiedIdentifierValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedIdentifierValueId.
        /// </summary>
        [Column]
        public long UnifiedIdentifierValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the IdentifierValue.
        /// </summary>
        [Column]
        public long IdentifierValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedIntegerValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedIntegerValue]")]
    [PrimaryKey("UnifiedIntegerValueId")]
    [ExplicitColumns]
    public partial class UnifiedIntegerValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedIntegerValueId.
        /// </summary>
        [Column]
        public long UnifiedIntegerValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the IntegerValue.
        /// </summary>
        [Column]
        public long IntegerValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedNumericValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedNumericValue]")]
    [PrimaryKey("UnifiedNumericValueId")]
    [ExplicitColumns]
    public partial class UnifiedNumericValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedNumericValueId.
        /// </summary>
        [Column]
        public long UnifiedNumericValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the NumericValue.
        /// </summary>
        [Column]
        public double NumericValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedSourceValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedSourceValue]")]
    [PrimaryKey("UnifiedSourceValueId")]
    [ExplicitColumns]
    public partial class UnifiedSourceValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedSourceValueId.
        /// </summary>
        [Column]
        public int UnifiedSourceValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the Caption.
        /// </summary>
        [Column]
        public string Caption { get; set; }

        /// <summary>
        /// Gets or sets the ToolTip.
        /// </summary>
        [Column]
        public string ToolTip { get; set; }

        /// <summary>
        /// Gets or sets the StringValue.
        /// </summary>
        [Column]
        public string StringValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedStringValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedStringValue]")]
    [PrimaryKey("UnifiedStringValueId")]
    [ExplicitColumns]
    public partial class UnifiedStringValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedStringValueId.
        /// </summary>
        [Column]
        public long UnifiedStringValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the StringValue.
        /// </summary>
        [Column]
        public string StringValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedValueType] table.
    /// </summary>
    [TableName("[dbo].[UnifiedValueType]")]
    [PrimaryKey("UnifiedValueTypeId")]
    [ExplicitColumns]
    public partial class UnifiedValueTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedValueTypeId.
        /// </summary>
        [Column]
        public int UnifiedValueTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[User] table.
    /// </summary>
    [TableName("[dbo].[User]")]
    [PrimaryKey("UserId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UserRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets the AccountName.
        /// </summary>
        [Column]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[WorkflowFormCompletion] table.
    /// </summary>
    [TableName("[dbo].[WorkflowFormCompletion]")]
    [PrimaryKey("WorkflowFormCompletionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowFormCompletionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowFormCompletionId.
        /// </summary>
        [Column]
        public long WorkflowFormCompletionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowFormInstanceId.
        /// </summary>
        [Column]
        public long WorkflowFormInstanceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[WorkflowFormInstance] table.
    /// </summary>
    [TableName("[dbo].[WorkflowFormInstance]")]
    [PrimaryKey("WorkflowFormInstanceId")]
    [ExplicitColumns]
    public partial class WorkflowFormInstanceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowFormInstanceId.
        /// </summary>
        [Column]
        public long WorkflowFormInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowInstanceId.
        /// </summary>
        [Column]
        public long WorkflowInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the FormLayoutId.
        /// </summary>
        [Column]
        public int FormLayoutId { get; set; }

        /// <summary>
        /// Gets or sets the InstanceGuid.
        /// </summary>
        [Column]
        public Guid InstanceGuid { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[WorkflowFormSubmission] table.
    /// </summary>
    [TableName("[dbo].[WorkflowFormSubmission]")]
    [PrimaryKey("WorkflowFormSubmissionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowFormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowFormSubmissionId.
        /// </summary>
        [Column]
        public long WorkflowFormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowFormInstanceId.
        /// </summary>
        [Column]
        public long WorkflowFormInstanceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.FieldsModel
{
    using System;

    using SAF.Data;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[WorkflowInstance] table.
    /// </summary>
    [TableName("[dbo].[WorkflowInstance]")]
    [PrimaryKey("WorkflowInstanceId")]
    [ExplicitColumns]
    public partial class WorkflowInstanceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowInstanceId.
        /// </summary>
        [Column]
        public long WorkflowInstanceId { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the InitiatedByPersonId.
        /// </summary>
        [Column]
        public int InitiatedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the InitiationTime.
        /// </summary>
        [Column]
        public DateTimeOffset InitiationTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

