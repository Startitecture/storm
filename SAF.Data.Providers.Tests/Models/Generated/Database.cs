
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `TestConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=TMMODELUC;Integrated Security=SSPI`
//     Schema:                 ``
//     Include Views:          `True`


namespace SAF.Data.Providers.Tests
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Web;
    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Provides the data context for the TestDb database.
    /// </summary>
    public partial class TestDb : Database
    {
        /// <summary>
        /// The current factory instance.
        /// </summary>
        [ThreadStatic]
        private static TestDb instance;

        /// <summary>
        /// Initializes a new instance of the TestDb class.
        /// </summary>
        public TestDb() 
            : base("TestConnection")
        {
            this.CommonConstruct();
        }

        /// <summary>
        /// Initializes a new instance of the TestDb class.
        /// </summary>
        /// <param name="connectionStringName">
        /// The name of the connection string.
        /// </param>
        public TestDb(string connectionStringName) 
            : base(connectionStringName)
        {
            this.CommonConstruct();
        }
        
        /// <summary>
        /// Provides an interface for the database context's factory.
        /// </summary>
        public interface IFactory
        {
            /// <summary>
            /// Gets an instance of the current database context.
            /// </summary>
            /// <returns>
            /// A <see cref="TestDb"/> instance.
            /// </returns>
            TestDb GetInstance();
        }
        
        /// <summary>
        /// Gets or sets the current database context factory.
        /// </summary>
        public static IFactory Factory { get; set; }

        /// <summary>
        /// Gets the current database context factory.
        /// </summary>
        /// <returns>
        /// A <see cref="TestDb"/> instance.
        /// </returns>
        public static TestDb GetInstance()
        {
            if (instance != null)
            {
                return instance;
            }
               
            if (Factory != null)
            {
                return Factory.GetInstance();
            }
            else
            {
                return new TestDb();
            }
        }
        
        /// <summary>
        /// Starts a transaction.
        /// </summary>
        protected override void OnBeginTransaction()
        {
            if (instance == null)
            {
                instance = this;
            }
        }
        
        /// <summary>
        /// Ends the current transaction.
        /// </summary>
        protected override void OnEndTransaction()
        {
            if (instance == this)
            {
                instance = null;
            }
        }        
        
        /// <summary>
        /// Provides a method that can be run when the instance is instantiated.
        /// </summary>
        partial void CommonConstruct();
    }
}

namespace SAF.Data.Providers.Tests.CC
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cc].[CollaboratorAttachment] table.
    /// </summary>
    [TableName("[cc].[CollaboratorAttachment]")]
    [PrimaryKey("CollaboratorAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CollaboratorAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CollaboratorAttachmentId.
        /// </summary>
        [Column]
        public long CollaboratorAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the CollaboratorDocumentId.
        /// </summary>
        [Column]
        public int CollaboratorDocumentId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CC
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cc].[CollaboratorNoteAttachment] table.
    /// </summary>
    [TableName("[cc].[CollaboratorNoteAttachment]")]
    [PrimaryKey("CollaboratorNoteAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CollaboratorNoteAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CollaboratorNoteAttachmentId.
        /// </summary>
        [Column]
        public long CollaboratorNoteAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the CollaboratorNoteId.
        /// </summary>
        [Column]
        public int CollaboratorNoteId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CC
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cc].[CustomFieldAttachmentType] table.
    /// </summary>
    [TableName("[cc].[CustomFieldAttachmentType]")]
    [PrimaryKey("cf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CustomFieldAttachmentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cf_id.
        /// </summary>
        [Column]
        public int cf_id { get; set; }

        /// <summary>
        /// Gets or sets the o_id.
        /// </summary>
        [Column]
        public int o_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdat_id.
        /// </summary>
        [Column]
        public int ccdat_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CL
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cl].[ContractAttachment] table.
    /// </summary>
    [TableName("[cl].[ContractAttachment]")]
    [PrimaryKey("ContractAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ContractAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ContractAttachmentId.
        /// </summary>
        [Column]
        public long ContractAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the ContractId.
        /// </summary>
        [Column]
        public int ContractId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CL
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cl].[ContractNoteAttachment] table.
    /// </summary>
    [TableName("[cl].[ContractNoteAttachment]")]
    [PrimaryKey("ContractNoteAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ContractNoteAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ContractNoteAttachmentId.
        /// </summary>
        [Column]
        public long ContractNoteAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the ContractNoteId.
        /// </summary>
        [Column]
        public int ContractNoteId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CL
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cl].[ContractRoleType] table.
    /// </summary>
    [TableName("[cl].[ContractRoleType]")]
    [PrimaryKey("ContractRoleTypeId")]
    [ExplicitColumns]
    public partial class ContractRoleTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ContractRoleTypeId.
        /// </summary>
        [Column]
        public int ContractRoleTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CL
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cl].[ContractWatchlist] table.
    /// </summary>
    [TableName("[cl].[ContractWatchlist]")]
    [PrimaryKey("UserId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ContractWatchlistRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets the ContractId.
        /// </summary>
        [Column]
        public int ContractId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CL
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cl].[CustomFieldAttachmentType] table.
    /// </summary>
    [TableName("[cl].[CustomFieldAttachmentType]")]
    [PrimaryKey("cf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CustomFieldAttachmentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cf_id.
        /// </summary>
        [Column]
        public int cf_id { get; set; }

        /// <summary>
        /// Gets or sets the o_id.
        /// </summary>
        [Column]
        public int o_id { get; set; }

        /// <summary>
        /// Gets or sets the cnt_id.
        /// </summary>
        [Column]
        public int cnt_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CL
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cl].[DistributionContractRole] table.
    /// </summary>
    [TableName("[cl].[DistributionContractRole]")]
    [PrimaryKey("DistributionContractRoleId")]
    [ExplicitColumns]
    public partial class DistributionContractRoleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DistributionContractRoleId.
        /// </summary>
        [Column]
        public long DistributionContractRoleId { get; set; }

        /// <summary>
        /// Gets or sets the DistributionRecipientId.
        /// </summary>
        [Column]
        public long DistributionRecipientId { get; set; }

        /// <summary>
        /// Gets or sets the ContractRoleTypeId.
        /// </summary>
        [Column]
        public int ContractRoleTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.CL
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [cl].[ViewDashboardWatchlist] table.
    /// </summary>
    [TableName("[cl].[ViewDashboardWatchlist]")]
    [ExplicitColumns]
    public partial class ViewDashboardWatchlistRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AllowedUserId.
        /// </summary>
        [Column]
        public int AllowedUserId { get; set; }

        /// <summary>
        /// Gets or sets the ContractId.
        /// </summary>
        [Column]
        public int ContractId { get; set; }

        /// <summary>
        /// Gets or sets the ContractNumber.
        /// </summary>
        [Column]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationId.
        /// </summary>
        [Column]
        public int OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the Organization.
        /// </summary>
        [Column]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or sets the ContractingEntity.
        /// </summary>
        [Column]
        public string ContractingEntity { get; set; }

        /// <summary>
        /// Gets or sets the ContractType.
        /// </summary>
        [Column]
        public string ContractType { get; set; }

        /// <summary>
        /// Gets or sets the Department.
        /// </summary>
        [Column]
        public string Department { get; set; }

        /// <summary>
        /// Gets or sets the Vendor.
        /// </summary>
        [Column]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or sets the EffectiveDate.
        /// </summary>
        [Column]
        public DateTime EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets the ExpirationDate.
        /// </summary>
        [Column]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets the PrimaryUserId.
        /// </summary>
        [Column]
        public int? PrimaryUserId { get; set; }

        /// <summary>
        /// Gets or sets the PrimaryFirstName.
        /// </summary>
        [Column]
        public string PrimaryFirstName { get; set; }

        /// <summary>
        /// Gets or sets the PrimaryLastName.
        /// </summary>
        [Column]
        public string PrimaryLastName { get; set; }

        /// <summary>
        /// Gets or sets the PrimaryIsDismissed.
        /// </summary>
        [Column]
        public bool? PrimaryIsDismissed { get; set; }

        /// <summary>
        /// Gets or sets the SecondaryUserId.
        /// </summary>
        [Column]
        public int? SecondaryUserId { get; set; }

        /// <summary>
        /// Gets or sets the SecondaryFirstName.
        /// </summary>
        [Column]
        public string SecondaryFirstName { get; set; }

        /// <summary>
        /// Gets or sets the SecondaryLastName.
        /// </summary>
        [Column]
        public string SecondaryLastName { get; set; }

        /// <summary>
        /// Gets or sets the SecondaryIsDismissed.
        /// </summary>
        [Column]
        public bool? SecondaryIsDismissed { get; set; }

        /// <summary>
        /// Gets or sets the ThirdUserId.
        /// </summary>
        [Column]
        public int? ThirdUserId { get; set; }

        /// <summary>
        /// Gets or sets the ThirdFirstName.
        /// </summary>
        [Column]
        public string ThirdFirstName { get; set; }

        /// <summary>
        /// Gets or sets the ThirdLastName.
        /// </summary>
        [Column]
        public string ThirdLastName { get; set; }

        /// <summary>
        /// Gets or sets the ThirdIsDismissed.
        /// </summary>
        [Column]
        public bool? ThirdIsDismissed { get; set; }

        /// <summary>
        /// Gets or sets the IsBeingRenewed.
        /// </summary>
        [Column]
        public int IsBeingRenewed { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowIds.
        /// </summary>
        [Column]
        public string WorkflowIds { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[__RefactorLog] table.
    /// </summary>
    [TableName("[dbo].[__RefactorLog]")]
    [PrimaryKey("OperationKey", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class __RefactorLogRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the OperationKey.
        /// </summary>
        [Column]
        public Guid OperationKey { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[AccountingServiceProvider] table.
    /// </summary>
    [TableName("[dbo].[AccountingServiceProvider]")]
    [PrimaryKey("AccountingServiceProviderId")]
    [ExplicitColumns]
    public partial class AccountingServiceProviderRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AccountingServiceProviderId.
        /// </summary>
        [Column]
        public int AccountingServiceProviderId { get; set; }

        /// <summary>
        /// Gets or sets the AccountingCode.
        /// </summary>
        [Column]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[AccountingServiceProviderUser] table.
    /// </summary>
    [TableName("[dbo].[AccountingServiceProviderUser]")]
    [PrimaryKey("AccountingServiceProviderUserId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AccountingServiceProviderUserRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AccountingServiceProviderUserId.
        /// </summary>
        [Column]
        public int AccountingServiceProviderUserId { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[AccountingServiceProviderVendor] table.
    /// </summary>
    [TableName("[dbo].[AccountingServiceProviderVendor]")]
    [PrimaryKey("AccountingServiceProviderVendorId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AccountingServiceProviderVendorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AccountingServiceProviderVendorId.
        /// </summary>
        [Column]
        public int AccountingServiceProviderVendorId { get; set; }

        /// <summary>
        /// Gets or sets the VendorId.
        /// </summary>
        [Column]
        public int VendorId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ActivityStatus] table.
    /// </summary>
    [TableName("[dbo].[ActivityStatus]")]
    [PrimaryKey("ActivityStatusId")]
    [ExplicitColumns]
    public partial class ActivityStatusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActivityStatusId.
        /// </summary>
        [Column]
        public int ActivityStatusId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc] table.
    /// </summary>
    [TableName("[dbo].[adhoc]")]
    [ExplicitColumns]
    public partial class adhocRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the Action_List.
        /// </summary>
        [Column("Action List")] 
        public string Action_List { get; set; }

        /// <summary>
        /// Gets or sets the Additional_Email_Recipient.
        /// </summary>
        [Column("Additional Email Recipient")] 
        public string Additional_Email_Recipient { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Address_Line_1.
        /// </summary>
        [Column("Asset Address Line 1")] 
        public string Asset_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Address_Line_2.
        /// </summary>
        [Column("Asset Address Line 2")] 
        public string Asset_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Address_City.
        /// </summary>
        [Column("Asset Address City")] 
        public string Asset_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Address_State.
        /// </summary>
        [Column("Asset Address State")] 
        public string Asset_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Address_Zip_Code.
        /// </summary>
        [Column("Asset Address Zip Code")] 
        public string Asset_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Comment.
        /// </summary>
        [Column("Asset Comment")] 
        public string Asset_Comment { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Contact.
        /// </summary>
        [Column("Asset Contact")] 
        public string Asset_Contact { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Description.
        /// </summary>
        [Column("Asset Description")] 
        public string Asset_Description { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Item.
        /// </summary>
        [Column("Asset Item")] 
        public string Asset_Item { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Location.
        /// </summary>
        [Column("Asset Location")] 
        public string Asset_Location { get; set; }

        /// <summary>
        /// Gets or sets the Asset_Serial_Number.
        /// </summary>
        [Column("Asset Serial Number")] 
        public string Asset_Serial_Number { get; set; }

        /// <summary>
        /// Gets or sets the Automatic_Renewal.
        /// </summary>
        [Column("Automatic Renewal")] 
        public string Automatic_Renewal { get; set; }

        /// <summary>
        /// Gets or sets the Automatic_Renewal_Term.
        /// </summary>
        [Column("Automatic Renewal Term")] 
        public int? Automatic_Renewal_Term { get; set; }

        /// <summary>
        /// Gets or sets the Automatic_Renewal_Times.
        /// </summary>
        [Column("Automatic Renewal Times")] 
        public int? Automatic_Renewal_Times { get; set; }

        /// <summary>
        /// Gets or sets the Building.
        /// </summary>
        [Column]
        public string Building { get; set; }

        /// <summary>
        /// Gets or sets the Building_Address_Line_1.
        /// </summary>
        [Column("Building Address Line 1")] 
        public string Building_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Building_Address_Line_2.
        /// </summary>
        [Column("Building Address Line 2")] 
        public string Building_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Building_Address_City.
        /// </summary>
        [Column("Building Address City")] 
        public string Building_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Building_Address_State.
        /// </summary>
        [Column("Building Address State")] 
        public string Building_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Building_Address_Zip_Code.
        /// </summary>
        [Column("Building Address Zip Code")] 
        public string Building_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Building_Contact_Last_Name.
        /// </summary>
        [Column("Building Contact Last Name")] 
        public string Building_Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Building_Contact_First_Name.
        /// </summary>
        [Column("Building Contact First Name")] 
        public string Building_Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Building_Contact_Email.
        /// </summary>
        [Column("Building Contact Email")] 
        public string Building_Contact_Email { get; set; }

        /// <summary>
        /// Gets or sets the Building_Reference_Number.
        /// </summary>
        [Column("Building Reference Number")] 
        public string Building_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Building_Short_Name.
        /// </summary>
        [Column("Building Short Name")] 
        public string Building_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the File_Number.
        /// </summary>
        [Column("File Number")] 
        public string File_Number { get; set; }

        /// <summary>
        /// Gets or sets the Region.
        /// </summary>
        [Column]
        public string Region { get; set; }

        /// <summary>
        /// Gets or sets the Region_Short_Name.
        /// </summary>
        [Column("Region Short Name")] 
        public string Region_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Region_Reference_Number.
        /// </summary>
        [Column("Region Reference Number")] 
        public string Region_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Region_ID.
        /// </summary>
        [Column("Region ID")] 
        public int Region_ID { get; set; }

        /// <summary>
        /// Gets or sets the Owner.
        /// </summary>
        [Column]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or sets the Document_Name.
        /// </summary>
        [Column("Document Name")] 
        public string Document_Name { get; set; }

        /// <summary>
        /// Gets or sets the BAA_Required.
        /// </summary>
        [Column("BAA Required")] 
        public string BAA_Required { get; set; }

        /// <summary>
        /// Gets or sets the BAA_Included.
        /// </summary>
        [Column("BAA Included")] 
        public string BAA_Included { get; set; }

        /// <summary>
        /// Gets or sets the Clinical_Services.
        /// </summary>
        [Column("Clinical Services")] 
        public string Clinical_Services { get; set; }

        /// <summary>
        /// Gets or sets the Accreditation_Standards.
        /// </summary>
        [Column("Accreditation Standards")] 
        public string Accreditation_Standards { get; set; }

        /// <summary>
        /// Gets or sets the Physician.
        /// </summary>
        [Column]
        public string Physician { get; set; }

        /// <summary>
        /// Gets or sets the FMV.
        /// </summary>
        [Column]
        public string FMV { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Excluded.
        /// </summary>
        [Column("Vendor Excluded")] 
        public string Vendor_Excluded { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Exclusion_Included.
        /// </summary>
        [Column("Vendor Exclusion Included")] 
        public string Vendor_Exclusion_Included { get; set; }

        /// <summary>
        /// Gets or sets the Anti_kickback.
        /// </summary>
        [Column("Anti-kickback")] 
        public string Anti_kickback { get; set; }

        /// <summary>
        /// Gets or sets the STARK.
        /// </summary>
        [Column]
        public string STARK { get; set; }

        /// <summary>
        /// Gets or sets the Conflict_of_Interest.
        /// </summary>
        [Column("Conflict of Interest")] 
        public string Conflict_of_Interest { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Add_User.
        /// </summary>
        [Column("Contract Add User")] 
        public string Contract_Add_User { get; set; }

        /// <summary>
        /// Gets or sets the Lease_Add_User.
        /// </summary>
        [Column("Lease Add User")] 
        public string Lease_Add_User { get; set; }

        /// <summary>
        /// Gets or sets the Group.
        /// </summary>
        [Column]
        public string Group { get; set; }

        /// <summary>
        /// Gets or sets the Document_Add_User.
        /// </summary>
        [Column("Document Add User")] 
        public string Document_Add_User { get; set; }

        /// <summary>
        /// Gets or sets the Apartment_Add_User.
        /// </summary>
        [Column("Apartment Add User")] 
        public string Apartment_Add_User { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Description.
        /// </summary>
        [Column("Contract Description")] 
        public string Contract_Description { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Identification_Number.
        /// </summary>
        [Column("Contract Identification Number")] 
        public int Contract_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Number.
        /// </summary>
        [Column("Contract Number")] 
        public string Contract_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Number_Left.
        /// </summary>
        [Column("Contract Number Left")] 
        public int? Contract_Number_Left { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Number_Right.
        /// </summary>
        [Column("Contract Number Right")] 
        public int? Contract_Number_Right { get; set; }

        /// <summary>
        /// Gets or sets the Custom_Contract_Number.
        /// </summary>
        [Column("Custom Contract Number")] 
        public string Custom_Contract_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Square_Footage.
        /// </summary>
        [Column("Contract Square Footage")] 
        public int Contract_Square_Footage { get; set; }

        /// <summary>
        /// Gets or sets the Partial_Year__months_.
        /// </summary>
        [Column("Partial Year (months)")] 
        public int Partial_Year__months_ { get; set; }

        /// <summary>
        /// Gets or sets the Number_of_Months.
        /// </summary>
        [Column("Number of Months")] 
        public int Number_of_Months { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Term.
        /// </summary>
        [Column("Contract Term")] 
        public string Contract_Term { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Type.
        /// </summary>
        [Column("Contract Type")] 
        public string Contract_Type { get; set; }

        /// <summary>
        /// Gets or sets the Subcategory.
        /// </summary>
        [Column]
        public string Subcategory { get; set; }

        /// <summary>
        /// Gets or sets the Contract_User.
        /// </summary>
        [Column("Contract User")] 
        public int Contract_User { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity.
        /// </summary>
        [Column("Contracting Entity")] 
        public string Contracting_Entity { get; set; }

        /// <summary>
        /// Gets or sets the Category.
        /// </summary>
        [Column]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_ID.
        /// </summary>
        [Column("Contracting Entity ID")] 
        public int Contracting_Entity_ID { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Reference_Number.
        /// </summary>
        [Column("Contracting Entity Reference Number")] 
        public string Contracting_Entity_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Short_Name.
        /// </summary>
        [Column("Contracting Entity Short Name")] 
        public string Contracting_Entity_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Critical_Date.
        /// </summary>
        [Column("Critical Date")] 
        public DateTime? Critical_Date { get; set; }

        /// <summary>
        /// Gets or sets the Critical_Date_Subject.
        /// </summary>
        [Column("Critical Date Subject")] 
        public string Critical_Date_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Critical_Date_Comment.
        /// </summary>
        [Column("Critical Date Comment")] 
        public string Critical_Date_Comment { get; set; }

        /// <summary>
        /// Gets or sets the Critical_Date_Author.
        /// </summary>
        [Column("Critical Date Author")] 
        public string Critical_Date_Author { get; set; }

        /// <summary>
        /// Gets or sets the Date_Created.
        /// </summary>
        [Column("Date Created")] 
        public DateTime Date_Created { get; set; }

        /// <summary>
        /// Gets or sets the Date_Last_Modified.
        /// </summary>
        [Column("Date Last Modified")] 
        public DateTime Date_Last_Modified { get; set; }

        /// <summary>
        /// Gets or sets the Department.
        /// </summary>
        [Column]
        public string Department { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [Column]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the Destruction_Date.
        /// </summary>
        [Column("Destruction Date")] 
        public DateTime? Destruction_Date { get; set; }

        /// <summary>
        /// Gets or sets the Effective_Date.
        /// </summary>
        [Column("Effective Date")] 
        public DateTime Effective_Date { get; set; }

        /// <summary>
        /// Gets or sets the Estimated_Annual_Value.
        /// </summary>
        [Column("Estimated Annual Value")] 
        public decimal Estimated_Annual_Value { get; set; }

        /// <summary>
        /// Gets or sets the Estimated_Total_Value.
        /// </summary>
        [Column("Estimated Total Value")] 
        public decimal Estimated_Total_Value { get; set; }

        /// <summary>
        /// Gets or sets the Estimated_Monthly_Value.
        /// </summary>
        [Column("Estimated Monthly Value")] 
        public decimal Estimated_Monthly_Value { get; set; }

        /// <summary>
        /// Gets or sets the Estimated_Monthly_Value_Escalates.
        /// </summary>
        [Column("Estimated Monthly Value Escalates")] 
        public int Estimated_Monthly_Value_Escalates { get; set; }

        /// <summary>
        /// Gets or sets the Expiration_Date.
        /// </summary>
        [Column("Expiration Date")] 
        public DateTime Expiration_Date { get; set; }

        /// <summary>
        /// Gets or sets the Expiration_Date__Lease.
        /// </summary>
        [Column("Expiration Date, Lease")] 
        public DateTime Expiration_Date__Lease { get; set; }

        /// <summary>
        /// Gets or sets the Expiration_Date__Certificate_of_Insurance.
        /// </summary>
        [Column("Expiration Date, Certificate of Insurance")] 
        public DateTime? Expiration_Date__Certificate_of_Insurance { get; set; }

        /// <summary>
        /// Gets or sets the Key_Terms.
        /// </summary>
        [Column("Key Terms")] 
        public string Key_Terms { get; set; }

        /// <summary>
        /// Gets or sets the Note_Body.
        /// </summary>
        [Column("Note Body")] 
        public string Note_Body { get; set; }

        /// <summary>
        /// Gets or sets the Note_Date_Created.
        /// </summary>
        [Column("Note Date Created")] 
        public DateTime? Note_Date_Created { get; set; }

        /// <summary>
        /// Gets or sets the Note_Date_Last_Modified.
        /// </summary>
        [Column("Note Date Last Modified")] 
        public DateTime? Note_Date_Last_Modified { get; set; }

        /// <summary>
        /// Gets or sets the Note_Subject.
        /// </summary>
        [Column("Note Subject")] 
        public string Note_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Note_Type.
        /// </summary>
        [Column("Note Type")] 
        public string Note_Type { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Identification_Number.
        /// </summary>
        [Column("Organization Identification Number")] 
        public int Organization_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Name.
        /// </summary>
        [Column("Organization Name")] 
        public string Organization_Name { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Short_Name.
        /// </summary>
        [Column("Organization Short Name")] 
        public string Organization_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Original_Term.
        /// </summary>
        [Column("Original Term")] 
        public string Original_Term { get; set; }

        /// <summary>
        /// Gets or sets the Other_Signatory_Name.
        /// </summary>
        [Column("Other Signatory Name")] 
        public string Other_Signatory_Name { get; set; }

        /// <summary>
        /// Gets or sets the Other_Signatory_Title.
        /// </summary>
        [Column("Other Signatory Title")] 
        public string Other_Signatory_Title { get; set; }

        /// <summary>
        /// Gets or sets the Portfolio.
        /// </summary>
        [Column]
        public string Portfolio { get; set; }

        /// <summary>
        /// Gets or sets the Product.
        /// </summary>
        [Column]
        public string Product { get; set; }

        /// <summary>
        /// Gets or sets the PSF_Value.
        /// </summary>
        [Column("PSF Value")] 
        public decimal PSF_Value { get; set; }

        /// <summary>
        /// Gets or sets the Purchase_Order_Number.
        /// </summary>
        [Column("Purchase Order Number")] 
        public string Purchase_Order_Number { get; set; }

        /// <summary>
        /// Gets or sets the Suite_ID.
        /// </summary>
        [Column("Suite ID")] 
        public string Suite_ID { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Primary.
        /// </summary>
        [Column("Responsible Party, Primary")] 
        public string Responsible_Party__Primary { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Primary__Email.
        /// </summary>
        [Column("Responsible Party, Primary, Email")] 
        public string Responsible_Party__Primary__Email { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Primary__User_Name.
        /// </summary>
        [Column("Responsible Party, Primary, User Name")] 
        public string Responsible_Party__Primary__User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Secondary.
        /// </summary>
        [Column("Responsible Party, Secondary")] 
        public string Responsible_Party__Secondary { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Secondary__Email.
        /// </summary>
        [Column("Responsible Party, Secondary, Email")] 
        public string Responsible_Party__Secondary__Email { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Secondary__User_Name.
        /// </summary>
        [Column("Responsible Party, Secondary, User Name")] 
        public string Responsible_Party__Secondary__User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Third.
        /// </summary>
        [Column("Responsible Party, Third")] 
        public string Responsible_Party__Third { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Third__Email.
        /// </summary>
        [Column("Responsible Party, Third, Email")] 
        public string Responsible_Party__Third__Email { get; set; }

        /// <summary>
        /// Gets or sets the Responsible_Party__Third__User_Name.
        /// </summary>
        [Column("Responsible Party, Third, User Name")] 
        public string Responsible_Party__Third__User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Secondary_Other_Party_Name.
        /// </summary>
        [Column("Secondary Other Party Name")] 
        public string Secondary_Other_Party_Name { get; set; }

        /// <summary>
        /// Gets or sets the Signatory_Name.
        /// </summary>
        [Column("Signatory Name")] 
        public string Signatory_Name { get; set; }

        /// <summary>
        /// Gets or sets the Signatory_Title.
        /// </summary>
        [Column("Signatory Title")] 
        public string Signatory_Title { get; set; }

        /// <summary>
        /// Gets or sets the Site.
        /// </summary>
        [Column]
        public string Site { get; set; }

        /// <summary>
        /// Gets or sets the Site_Address_Line_1.
        /// </summary>
        [Column("Site Address Line 1")] 
        public string Site_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Site_Address_Line_2.
        /// </summary>
        [Column("Site Address Line 2")] 
        public string Site_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Site_Address_City.
        /// </summary>
        [Column("Site Address City")] 
        public string Site_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Site_Address_State.
        /// </summary>
        [Column("Site Address State")] 
        public string Site_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Site_Address_Zip_Code.
        /// </summary>
        [Column("Site Address Zip Code")] 
        public string Site_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Last_Name.
        /// </summary>
        [Column("Site Contact Last Name")] 
        public string Site_Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_First_Name.
        /// </summary>
        [Column("Site Contact First Name")] 
        public string Site_Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Email.
        /// </summary>
        [Column("Site Contact Email")] 
        public string Site_Contact_Email { get; set; }

        /// <summary>
        /// Gets or sets the Site_Reference_Number.
        /// </summary>
        [Column("Site Reference Number")] 
        public string Site_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Short_Name.
        /// </summary>
        [Column("Site Short Name")] 
        public string Site_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Status.
        /// </summary>
        [Column]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party_.
        /// </summary>
        [Column("Vendor (Other Party)")] 
        public string Vendor__Other_Party_ { get; set; }

        /// <summary>
        /// Gets or sets the Vendor.
        /// </summary>
        [Column]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Address_Line_1.
        /// </summary>
        [Column("Vendor (Other Party) Address Line 1")] 
        public string Vendor__Other_Party__Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Address_Line_2.
        /// </summary>
        [Column("Vendor (Other Party) Address Line 2")] 
        public string Vendor__Other_Party__Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Address_City.
        /// </summary>
        [Column("Vendor (Other Party) Address City")] 
        public string Vendor__Other_Party__Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Address_State.
        /// </summary>
        [Column("Vendor (Other Party) Address State")] 
        public string Vendor__Other_Party__Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Address_Zip_Code.
        /// </summary>
        [Column("Vendor (Other Party) Address Zip Code")] 
        public string Vendor__Other_Party__Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Contact_Email.
        /// </summary>
        [Column("Vendor (Other Party) Contact Email")] 
        public string Vendor__Other_Party__Contact_Email { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Contact_First_Name.
        /// </summary>
        [Column("Vendor (Other Party) Contact First Name")] 
        public string Vendor__Other_Party__Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Contact_Last_Name.
        /// </summary>
        [Column("Vendor (Other Party) Contact Last Name")] 
        public string Vendor__Other_Party__Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor__Other_Party__Reference_Number.
        /// </summary>
        [Column("Vendor (Other Party) Reference Number")] 
        public string Vendor__Other_Party__Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Site_ID.
        /// </summary>
        [Column("Contract Site ID")] 
        public int Contract_Site_ID { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Type_ID.
        /// </summary>
        [Column("Contract Type ID")] 
        public int Contract_Type_ID { get; set; }

        /// <summary>
        /// Gets or sets the Department_ID.
        /// </summary>
        [Column("Department ID")] 
        public int Department_ID { get; set; }

        /// <summary>
        /// Gets or sets the CFLDCID.
        /// </summary>
        [Column]
        public int? CFLDCID { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_1.
        /// </summary>
        [Column("Sample Field 1")] 
        public string Sample_Field_1 { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_2.
        /// </summary>
        [Column("Sample Field 2")] 
        public string Sample_Field_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[adhoc_adhoc_field]")]
    [ExplicitColumns]
    public partial class adhoc_adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cfld_c_id.
        /// </summary>
        [Column]
        public int cfld_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cfld_value.
        /// </summary>
        [Column]
        public string cfld_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[adhoc_column]")]
    [PrimaryKey("ahc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ahc_id.
        /// </summary>
        [Column]
        public int ahc_id { get; set; }

        /// <summary>
        /// Gets or sets the ahc_name.
        /// </summary>
        [Column]
        public string ahc_name { get; set; }

        /// <summary>
        /// Gets or sets the ahc_format.
        /// </summary>
        [Column]
        public int ahc_format { get; set; }

        /// <summary>
        /// Gets or sets the ahc_product.
        /// </summary>
        [Column]
        public int ahc_product { get; set; }

        /// <summary>
        /// Gets or sets the ahc_lookup_id.
        /// </summary>
        [Column]
        public int ahc_lookup_id { get; set; }

        /// <summary>
        /// Gets or sets the ahc_fieldtype.
        /// </summary>
        [Column]
        public int ahc_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the ahc_select_expression.
        /// </summary>
        [Column]
        public string ahc_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the ahc_source.
        /// </summary>
        [Column]
        public string ahc_source { get; set; }

        /// <summary>
        /// Gets or sets the ahc_use_custom_expression.
        /// </summary>
        [Column]
        public bool ahc_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the ahc_extra_select_expression.
        /// </summary>
        [Column]
        public string ahc_extra_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the ahc_formula_field.
        /// </summary>
        [Column]
        public bool ahc_formula_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[adhoc_field]")]
    [PrimaryKey("fld_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fld_id.
        /// </summary>
        [Column]
        public int fld_id { get; set; }

        /// <summary>
        /// Gets or sets the fld_name.
        /// </summary>
        [Column]
        public string fld_name { get; set; }

        /// <summary>
        /// Gets or sets the fld_sort.
        /// </summary>
        [Column]
        public int? fld_sort { get; set; }

        /// <summary>
        /// Gets or sets the fld_fieldtype.
        /// </summary>
        [Column]
        public int fld_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the fld_select_expression.
        /// </summary>
        [Column]
        public string fld_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the fld_source.
        /// </summary>
        [Column]
        public string fld_source { get; set; }

        /// <summary>
        /// Gets or sets the fld_use_custom_expression.
        /// </summary>
        [Column]
        public bool fld_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the fld_extra_select_expression.
        /// </summary>
        [Column]
        public string fld_extra_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the fld_cf_id.
        /// </summary>
        [Column]
        public int? fld_cf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_field_crosstab] table.
    /// </summary>
    [TableName("[dbo].[adhoc_field_crosstab]")]
    [ExplicitColumns]
    public partial class adhoc_field_crosstabRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CFLDCID.
        /// </summary>
        [Column]
        public int CFLDCID { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_1.
        /// </summary>
        [Column("Sample Field 1")] 
        public string Sample_Field_1 { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_2.
        /// </summary>
        [Column("Sample Field 2")] 
        public string Sample_Field_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_field_source] table.
    /// </summary>
    [TableName("[dbo].[adhoc_field_source]")]
    [PrimaryKey("afs_id")]
    [ExplicitColumns]
    public partial class adhoc_field_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the afs_id.
        /// </summary>
        [Column]
        public int afs_id { get; set; }

        /// <summary>
        /// Gets or sets the afs_source.
        /// </summary>
        [Column]
        public string afs_source { get; set; }

        /// <summary>
        /// Gets or sets the afs_preload_expression.
        /// </summary>
        [Column]
        public string afs_preload_expression { get; set; }

        /// <summary>
        /// Gets or sets the afs_subquery_expression.
        /// </summary>
        [Column]
        public string afs_subquery_expression { get; set; }

        /// <summary>
        /// Gets or sets the afs_table_name.
        /// </summary>
        [Column]
        public string afs_table_name { get; set; }

        /// <summary>
        /// Gets or sets the afs_parent_alias.
        /// </summary>
        [Column]
        public string afs_parent_alias { get; set; }

        /// <summary>
        /// Gets or sets the afs_join_type.
        /// </summary>
        [Column]
        public string afs_join_type { get; set; }

        /// <summary>
        /// Gets or sets the afs_left_column.
        /// </summary>
        [Column]
        public string afs_left_column { get; set; }

        /// <summary>
        /// Gets or sets the afs_right_column.
        /// </summary>
        [Column]
        public string afs_right_column { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_report] table.
    /// </summary>
    [TableName("[dbo].[adhoc_report]")]
    [PrimaryKey("rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class adhoc_reportRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the rpt_id.
        /// </summary>
        [Column]
        public int rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the rpt_date.
        /// </summary>
        [Column]
        public DateTime rpt_date { get; set; }

        /// <summary>
        /// Gets or sets the rpt_u_id.
        /// </summary>
        [Column]
        public int rpt_u_id { get; set; }

        /// <summary>
        /// Gets or sets the rpt_title.
        /// </summary>
        [Column]
        public string rpt_title { get; set; }

        /// <summary>
        /// Gets or sets the rpt_desc.
        /// </summary>
        [Column]
        public string rpt_desc { get; set; }

        /// <summary>
        /// Gets or sets the rpt_sql.
        /// </summary>
        [Column]
        public string rpt_sql { get; set; }

        /// <summary>
        /// Gets or sets the rpt_public.
        /// </summary>
        [Column]
        public bool rpt_public { get; set; }

        /// <summary>
        /// Gets or sets the rpt_template.
        /// </summary>
        [Column]
        public string rpt_template { get; set; }

        /// <summary>
        /// Gets or sets the rpt_o_id.
        /// </summary>
        [Column]
        public int? rpt_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_report_fields] table.
    /// </summary>
    [TableName("[dbo].[adhoc_report_fields]")]
    [PrimaryKey("arf_id")]
    [ExplicitColumns]
    public partial class adhoc_report_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arf_id.
        /// </summary>
        [Column]
        public int arf_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_rpt_id.
        /// </summary>
        [Column]
        public int arf_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_field.
        /// </summary>
        [Column]
        public string arf_field { get; set; }

        /// <summary>
        /// Gets or sets the arf_name.
        /// </summary>
        [Column]
        public string arf_name { get; set; }

        /// <summary>
        /// Gets or sets the arf_fieldtype.
        /// </summary>
        [Column]
        public int arf_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the arf_select_expression.
        /// </summary>
        [Column]
        public string arf_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_source.
        /// </summary>
        [Column]
        public string arf_source { get; set; }

        /// <summary>
        /// Gets or sets the arf_use_custom_expression.
        /// </summary>
        [Column]
        public bool arf_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_extra_select_expression.
        /// </summary>
        [Column]
        public string arf_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_report_query] table.
    /// </summary>
    [TableName("[dbo].[adhoc_report_query]")]
    [PrimaryKey("arq_id")]
    [ExplicitColumns]
    public partial class adhoc_report_queryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arq_id.
        /// </summary>
        [Column]
        public int arq_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_rpt_id.
        /// </summary>
        [Column]
        public int arq_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_type.
        /// </summary>
        [Column]
        public int arq_type { get; set; }

        /// <summary>
        /// Gets or sets the arq_value.
        /// </summary>
        [Column]
        public string arq_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_report_query_source] table.
    /// </summary>
    [TableName("[dbo].[adhoc_report_query_source]")]
    [PrimaryKey("arqs_id")]
    [ExplicitColumns]
    public partial class adhoc_report_query_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arqs_id.
        /// </summary>
        [Column]
        public int arqs_id { get; set; }

        /// <summary>
        /// Gets or sets the arqs_arq_id.
        /// </summary>
        [Column]
        public int arqs_arq_id { get; set; }

        /// <summary>
        /// Gets or sets the arqs_column_name.
        /// </summary>
        [Column]
        public string arqs_column_name { get; set; }

        /// <summary>
        /// Gets or sets the arqs_select_expression.
        /// </summary>
        [Column]
        public string arqs_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the arqs_source.
        /// </summary>
        [Column]
        public string arqs_source { get; set; }

        /// <summary>
        /// Gets or sets the arqs_use_custom_expression.
        /// </summary>
        [Column]
        public bool arqs_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the arqs_fieldtype.
        /// </summary>
        [Column]
        public int? arqs_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the arqs_extra_select_expression.
        /// </summary>
        [Column]
        public string arqs_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_report_renamed_columns] table.
    /// </summary>
    [TableName("[dbo].[adhoc_report_renamed_columns]")]
    [PrimaryKey("arrc_id")]
    [ExplicitColumns]
    public partial class adhoc_report_renamed_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arrc_id.
        /// </summary>
        [Column]
        public int arrc_id { get; set; }

        /// <summary>
        /// Gets or sets the arrc_rpt_id.
        /// </summary>
        [Column]
        public int arrc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arrc_column_name.
        /// </summary>
        [Column]
        public string arrc_column_name { get; set; }

        /// <summary>
        /// Gets or sets the arrc_display_name.
        /// </summary>
        [Column]
        public string arrc_display_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[adhoc_report_users] table.
    /// </summary>
    [TableName("[dbo].[adhoc_report_users]")]
    [PrimaryKey("aru_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class adhoc_report_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the aru_rpt_id.
        /// </summary>
        [Column]
        public int aru_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the aru_u_id.
        /// </summary>
        [Column]
        public int aru_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Alert] table.
    /// </summary>
    [TableName("[dbo].[Alert]")]
    [PrimaryKey("AlertId")]
    [ExplicitColumns]
    public partial class AlertRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AlertId.
        /// </summary>
        [Column]
        public long AlertId { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets the IsDismissed.
        /// </summary>
        [Column]
        public bool IsDismissed { get; set; }

        /// <summary>
        /// Gets or sets the IsResolved.
        /// </summary>
        [Column]
        public bool IsResolved { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Announcement] table.
    /// </summary>
    [TableName("[dbo].[Announcement]")]
    [PrimaryKey("AnnouncementId")]
    [ExplicitColumns]
    public partial class AnnouncementRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AnnouncementId.
        /// </summary>
        [Column]
        public int AnnouncementId { get; set; }

        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [Column]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the Message.
        /// </summary>
        [Column]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets the EffectiveDate.
        /// </summary>
        [Column]
        public DateTime EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets the ExpirationDate.
        /// </summary>
        [Column]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets the CreatedTime.
        /// </summary>
        [Column]
        public DateTimeOffset CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the CreatedByUserId.
        /// </summary>
        [Column]
        public int CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedTime.
        /// </summary>
        [Column]
        public DateTimeOffset LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedByUserId.
        /// </summary>
        [Column]
        public int LastModifiedByUserId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[application] table.
    /// </summary>
    [TableName("[dbo].[application]")]
    [PrimaryKey("app_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class applicationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the app_id.
        /// </summary>
        [Column]
        public int app_id { get; set; }

        /// <summary>
        /// Gets or sets the app_name.
        /// </summary>
        [Column]
        public string app_name { get; set; }

        /// <summary>
        /// Gets or sets the Active.
        /// </summary>
        [Column]
        public bool Active { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ApplicationDocumentType] table.
    /// </summary>
    [TableName("[dbo].[ApplicationDocumentType]")]
    [PrimaryKey("ApplicationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ApplicationDocumentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ApplicationId.
        /// </summary>
        [Column]
        public int ApplicationId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentTypeId.
        /// </summary>
        [Column]
        public int DocumentTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ApprovedLanguageOrganizationContractType] table.
    /// </summary>
    [TableName("[dbo].[ApprovedLanguageOrganizationContractType]")]
    [ExplicitColumns]
    public partial class ApprovedLanguageOrganizationContractTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ApprovedLanguageId.
        /// </summary>
        [Column]
        public int ApprovedLanguageId { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationContractTypeId.
        /// </summary>
        [Column]
        public int OrganizationContractTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Attachment] table.
    /// </summary>
    [TableName("[dbo].[Attachment]")]
    [PrimaryKey("AttachmentId")]
    [ExplicitColumns]
    public partial class AttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentId.
        /// </summary>
        [Column]
        public long AttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the DocumentTypeId.
        /// </summary>
        [Column]
        public int DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or sets the SortOrder.
        /// </summary>
        [Column]
        public int SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the CreatedBy.
        /// </summary>
        [Column]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets the CreatedTime.
        /// </summary>
        [Column]
        public DateTimeOffset CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedBy.
        /// </summary>
        [Column]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedTime.
        /// </summary>
        [Column]
        public DateTimeOffset LastModifiedTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[AttachmentChange] table.
    /// </summary>
    [TableName("[dbo].[AttachmentChange]")]
    [PrimaryKey("AttachmentChangeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AttachmentChangeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentChangeId.
        /// </summary>
        [Column]
        public long AttachmentChangeId { get; set; }

        /// <summary>
        /// Gets or sets the CreatedByPersonId.
        /// </summary>
        [Column]
        public int CreatedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedPersonId.
        /// </summary>
        [Column]
        public int LastModifiedPersonId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[AttachmentDocument] table.
    /// </summary>
    [TableName("[dbo].[AttachmentDocument]")]
    [PrimaryKey("AttachmentDocumentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AttachmentDocumentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentDocumentId.
        /// </summary>
        [Column]
        public long AttachmentDocumentId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentVersionId.
        /// </summary>
        [Column]
        public long DocumentVersionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[AttachmentNote] table.
    /// </summary>
    [TableName("[dbo].[AttachmentNote]")]
    [PrimaryKey("AttachmentNoteId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AttachmentNoteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentNoteId.
        /// </summary>
        [Column]
        public long AttachmentNoteId { get; set; }

        /// <summary>
        /// Gets or sets the Content.
        /// </summary>
        [Column]
        public string Content { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[auto_renewal] table.
    /// </summary>
    [TableName("[dbo].[auto_renewal]")]
    [PrimaryKey("ar_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class auto_renewalRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ar_id.
        /// </summary>
        [Column]
        public int ar_id { get; set; }

        /// <summary>
        /// Gets or sets the ar_name.
        /// </summary>
        [Column]
        public string ar_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[benefit] table.
    /// </summary>
    [TableName("[dbo].[benefit]")]
    [PrimaryKey("bn_id")]
    [ExplicitColumns]
    public partial class benefitRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the bn_id.
        /// </summary>
        [Column]
        public int bn_id { get; set; }

        /// <summary>
        /// Gets or sets the bn_name.
        /// </summary>
        [Column]
        public string bn_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[c_menu] table.
    /// </summary>
    [TableName("[dbo].[c_menu]")]
    [PrimaryKey("cm_id")]
    [ExplicitColumns]
    public partial class c_menuRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cm_id.
        /// </summary>
        [Column]
        public int cm_id { get; set; }

        /// <summary>
        /// Gets or sets the cm_product.
        /// </summary>
        [Column]
        public int cm_product { get; set; }

        /// <summary>
        /// Gets or sets the cm_application.
        /// </summary>
        [Column]
        public int cm_application { get; set; }

        /// <summary>
        /// Gets or sets the cm_mll_code.
        /// </summary>
        [Column]
        public string cm_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the cm_o_id.
        /// </summary>
        [Column]
        public int? cm_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cm_parent_cm_id.
        /// </summary>
        [Column]
        public int? cm_parent_cm_id { get; set; }

        /// <summary>
        /// Gets or sets the cm_name.
        /// </summary>
        [Column]
        public string cm_name { get; set; }

        /// <summary>
        /// Gets or sets the cm_display.
        /// </summary>
        [Column]
        public string cm_display { get; set; }

        /// <summary>
        /// Gets or sets the cm_tip.
        /// </summary>
        [Column]
        public string cm_tip { get; set; }

        /// <summary>
        /// Gets or sets the cm_action.
        /// </summary>
        [Column]
        public string cm_action { get; set; }

        /// <summary>
        /// Gets or sets the cm_action_type.
        /// </summary>
        [Column]
        public int cm_action_type { get; set; }

        /// <summary>
        /// Gets or sets the cm_roles.
        /// </summary>
        [Column]
        public string cm_roles { get; set; }

        /// <summary>
        /// Gets or sets the cm_order.
        /// </summary>
        [Column]
        public decimal? cm_order { get; set; }

        /// <summary>
        /// Gets or sets the cm_drilldown.
        /// </summary>
        [Column]
        public int cm_drilldown { get; set; }

        /// <summary>
        /// Gets or sets the cm_property.
        /// </summary>
        [Column]
        public string cm_property { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[c_view] table.
    /// </summary>
    [TableName("[dbo].[c_view]")]
    [PrimaryKey("cv_id")]
    [ExplicitColumns]
    public partial class c_viewRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cv_id.
        /// </summary>
        [Column]
        public int cv_id { get; set; }

        /// <summary>
        /// Gets or sets the cv_o_id.
        /// </summary>
        [Column]
        public int? cv_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cv_type.
        /// </summary>
        [Column]
        public int cv_type { get; set; }

        /// <summary>
        /// Gets or sets the cv_name.
        /// </summary>
        [Column]
        public string cv_name { get; set; }

        /// <summary>
        /// Gets or sets the cv_header.
        /// </summary>
        [Column]
        public string cv_header { get; set; }

        /// <summary>
        /// Gets or sets the cv_title.
        /// </summary>
        [Column]
        public string cv_title { get; set; }

        /// <summary>
        /// Gets or sets the cv_report.
        /// </summary>
        [Column]
        public string cv_report { get; set; }

        /// <summary>
        /// Gets or sets the cv_sql.
        /// </summary>
        [Column]
        public string cv_sql { get; set; }

        /// <summary>
        /// Gets or sets the cv_roles.
        /// </summary>
        [Column]
        public string cv_roles { get; set; }

        /// <summary>
        /// Gets or sets the cv_sort.
        /// </summary>
        [Column]
        public string cv_sort { get; set; }

        /// <summary>
        /// Gets or sets the cv_group.
        /// </summary>
        [Column]
        public string cv_group { get; set; }

        /// <summary>
        /// Gets or sets the cv_mll_code.
        /// </summary>
        [Column]
        public string cv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the cv_use_rolodex.
        /// </summary>
        [Column]
        public bool cv_use_rolodex { get; set; }

        /// <summary>
        /// Gets or sets the cv_rolodex_field.
        /// </summary>
        [Column]
        public string cv_rolodex_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[c_view_fields] table.
    /// </summary>
    [TableName("[dbo].[c_view_fields]")]
    [PrimaryKey("cvf_id")]
    [ExplicitColumns]
    public partial class c_view_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cvf_id.
        /// </summary>
        [Column]
        public int cvf_id { get; set; }

        /// <summary>
        /// Gets or sets the cvf_cv_id.
        /// </summary>
        [Column]
        public int cvf_cv_id { get; set; }

        /// <summary>
        /// Gets or sets the cvf_name.
        /// </summary>
        [Column]
        public string cvf_name { get; set; }

        /// <summary>
        /// Gets or sets the cvf_header.
        /// </summary>
        [Column]
        public string cvf_header { get; set; }

        /// <summary>
        /// Gets or sets the cvf_type.
        /// </summary>
        [Column]
        public int cvf_type { get; set; }

        /// <summary>
        /// Gets or sets the cvf_visible.
        /// </summary>
        [Column]
        public bool cvf_visible { get; set; }

        /// <summary>
        /// Gets or sets the cvf_text_field.
        /// </summary>
        [Column]
        public string cvf_text_field { get; set; }

        /// <summary>
        /// Gets or sets the cvf_value_field.
        /// </summary>
        [Column]
        public string cvf_value_field { get; set; }

        /// <summary>
        /// Gets or sets the cvf_navigate_field.
        /// </summary>
        [Column]
        public string cvf_navigate_field { get; set; }

        /// <summary>
        /// Gets or sets the cvf_format.
        /// </summary>
        [Column]
        public string cvf_format { get; set; }

        /// <summary>
        /// Gets or sets the cvf_navigate_format.
        /// </summary>
        [Column]
        public string cvf_navigate_format { get; set; }

        /// <summary>
        /// Gets or sets the cvf_order.
        /// </summary>
        [Column]
        public int cvf_order { get; set; }

        /// <summary>
        /// Gets or sets the cv_roles.
        /// </summary>
        [Column]
        public string cv_roles { get; set; }

        /// <summary>
        /// Gets or sets the cvf_mll_code.
        /// </summary>
        [Column]
        public string cvf_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[catcher_log] table.
    /// </summary>
    [TableName("[dbo].[catcher_log]")]
    [ExplicitColumns]
    public partial class catcher_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cl_id.
        /// </summary>
        [Column]
        public int cl_id { get; set; }

        /// <summary>
        /// Gets or sets the cl_date_loaded.
        /// </summary>
        [Column]
        public DateTime cl_date_loaded { get; set; }

        /// <summary>
        /// Gets or sets the cl_csf_id.
        /// </summary>
        [Column]
        public int cl_csf_id { get; set; }

        /// <summary>
        /// Gets or sets the cl_file_name.
        /// </summary>
        [Column]
        public string cl_file_name { get; set; }

        /// <summary>
        /// Gets or sets the cl_status.
        /// </summary>
        [Column]
        public short cl_status { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[catcher_spreadsheet_column] table.
    /// </summary>
    [TableName("[dbo].[catcher_spreadsheet_column]")]
    [ExplicitColumns]
    public partial class catcher_spreadsheet_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the csc_id.
        /// </summary>
        [Column]
        public int csc_id { get; set; }

        /// <summary>
        /// Gets or sets the csc_name.
        /// </summary>
        [Column]
        public string csc_name { get; set; }

        /// <summary>
        /// Gets or sets the csc_type.
        /// </summary>
        [Column]
        public short csc_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[catcher_spreadsheet_definition] table.
    /// </summary>
    [TableName("[dbo].[catcher_spreadsheet_definition]")]
    [ExplicitColumns]
    public partial class catcher_spreadsheet_definitionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the csd_id.
        /// </summary>
        [Column]
        public int csd_id { get; set; }

        /// <summary>
        /// Gets or sets the csd_csf_id.
        /// </summary>
        [Column]
        public int csd_csf_id { get; set; }

        /// <summary>
        /// Gets or sets the csd_csc_id.
        /// </summary>
        [Column]
        public int csd_csc_id { get; set; }

        /// <summary>
        /// Gets or sets the csd_client_column_name.
        /// </summary>
        [Column]
        public string csd_client_column_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[catcher_spreadsheet_format] table.
    /// </summary>
    [TableName("[dbo].[catcher_spreadsheet_format]")]
    [ExplicitColumns]
    public partial class catcher_spreadsheet_formatRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the csf_id.
        /// </summary>
        [Column]
        public int csf_id { get; set; }

        /// <summary>
        /// Gets or sets the csf_name.
        /// </summary>
        [Column]
        public string csf_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Category] table.
    /// </summary>
    [TableName("[dbo].[Category]")]
    [PrimaryKey("CategoryID")]
    [ExplicitColumns]
    public partial class CategoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CategoryID.
        /// </summary>
        [Column]
        public int CategoryID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger]")]
    [PrimaryKey("ccat_id")]
    [ExplicitColumns]
    public partial class cc_action_triggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccat_id.
        /// </summary>
        [Column]
        public int ccat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccat_ccp_id.
        /// </summary>
        [Column]
        public int ccat_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccat_ccpf_id.
        /// </summary>
        [Column]
        public int? ccat_ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccat_ccpi_id.
        /// </summary>
        [Column]
        public int? ccat_ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccat_o_id.
        /// </summary>
        [Column]
        public int ccat_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ccat_ot_id.
        /// </summary>
        [Column]
        public int ccat_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ccat_action_type.
        /// </summary>
        [Column]
        public int ccat_action_type { get; set; }

        /// <summary>
        /// Gets or sets the ccat_email_phase_owner.
        /// </summary>
        [Column]
        public bool ccat_email_phase_owner { get; set; }

        /// <summary>
        /// Gets or sets the ccat_email_other_reviewers.
        /// </summary>
        [Column]
        public bool ccat_email_other_reviewers { get; set; }

        /// <summary>
        /// Gets or sets the ccat_email_users.
        /// </summary>
        [Column]
        public string ccat_email_users { get; set; }

        /// <summary>
        /// Gets or sets the ccat_email_subject.
        /// </summary>
        [Column]
        public string ccat_email_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccat_email_body.
        /// </summary>
        [Column]
        public string ccat_email_body { get; set; }

        /// <summary>
        /// Gets or sets the ccat_signatory_u_id.
        /// </summary>
        [Column]
        public string ccat_signatory_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccat_field_to_focus_ccrfcf_id.
        /// </summary>
        [Column]
        public int? ccat_field_to_focus_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccat_field_to_focus_message.
        /// </summary>
        [Column]
        public string ccat_field_to_focus_message { get; set; }

        /// <summary>
        /// Gets or sets the ccat_email_roles.
        /// </summary>
        [Column]
        public string ccat_email_roles { get; set; }

        /// <summary>
        /// Gets or sets the ccat_instructions.
        /// </summary>
        [Column]
        public string ccat_instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_approver] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_approver]")]
    [PrimaryKey("ccata_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_approverRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccata_id.
        /// </summary>
        [Column]
        public int ccata_id { get; set; }

        /// <summary>
        /// Gets or sets the ccata_ccat_id.
        /// </summary>
        [Column]
        public int ccata_ccat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccata_ccpf_id.
        /// </summary>
        [Column]
        public int? ccata_ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccata_ccpi_id.
        /// </summary>
        [Column]
        public int? ccata_ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccata_u_id.
        /// </summary>
        [Column]
        public int? ccata_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccata_order.
        /// </summary>
        [Column]
        public int ccata_order { get; set; }

        /// <summary>
        /// Gets or sets the ccata_ort_id.
        /// </summary>
        [Column]
        public int? ccata_ort_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_approver_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_approver_custom_fields]")]
    [PrimaryKey("ccatacf_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_approver_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatacf_id.
        /// </summary>
        [Column]
        public int ccatacf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatacf_ccata_id.
        /// </summary>
        [Column]
        public int ccatacf_ccata_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatacf_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccatacf_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatacf_editable.
        /// </summary>
        [Column]
        public bool ccatacf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccatacf_hidden.
        /// </summary>
        [Column]
        public bool ccatacf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccatacf_required.
        /// </summary>
        [Column]
        public bool ccatacf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_approver_system_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_approver_system_fields]")]
    [PrimaryKey("ccatasf_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_approver_system_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatasf_id.
        /// </summary>
        [Column]
        public int ccatasf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatasf_ccata_id.
        /// </summary>
        [Column]
        public int ccatasf_ccata_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatasf_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccatasf_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatasf_editable.
        /// </summary>
        [Column]
        public bool ccatasf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccatasf_hidden.
        /// </summary>
        [Column]
        public bool ccatasf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccatasf_required.
        /// </summary>
        [Column]
        public bool ccatasf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_insert_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_insert_fields]")]
    [PrimaryKey("ccatif_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_insert_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatif_id.
        /// </summary>
        [Column]
        public int ccatif_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatif_ccat_id.
        /// </summary>
        [Column]
        public int ccatif_ccat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatif_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccatif_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatif_required.
        /// </summary>
        [Column]
        public bool ccatif_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_notification] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_notification]")]
    [PrimaryKey("ccatn_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_notificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatn_id.
        /// </summary>
        [Column]
        public int ccatn_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatn_ccpfw_id.
        /// </summary>
        [Column]
        public int? ccatn_ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatn_ccpiw_id.
        /// </summary>
        [Column]
        public int? ccatn_ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatn_ccrfcf_id.
        /// </summary>
        [Column]
        public int? ccatn_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatn_message.
        /// </summary>
        [Column]
        public string ccatn_message { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_parameter] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_parameter]")]
    [ExplicitColumns]
    public partial class cc_action_trigger_parameterRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatp_id.
        /// </summary>
        [Column]
        public int ccatp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatp_ccat_id.
        /// </summary>
        [Column]
        public int ccatp_ccat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatp_gate_type.
        /// </summary>
        [Column]
        public int ccatp_gate_type { get; set; }

        /// <summary>
        /// Gets or sets the ccatp_parent_id.
        /// </summary>
        [Column]
        public int? ccatp_parent_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatp_operator.
        /// </summary>
        [Column]
        public string ccatp_operator { get; set; }

        /// <summary>
        /// Gets or sets the ccatp_value.
        /// </summary>
        [Column]
        public string ccatp_value { get; set; }

        /// <summary>
        /// Gets or sets the ccatp_ccrfcf_id.
        /// </summary>
        [Column]
        public int? ccatp_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_reviewer]")]
    [PrimaryKey("ccatr_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatr_id.
        /// </summary>
        [Column]
        public int ccatr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatr_ccat_id.
        /// </summary>
        [Column]
        public int ccatr_ccat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatr_ccpf_id.
        /// </summary>
        [Column]
        public int? ccatr_ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatr_ccpi_id.
        /// </summary>
        [Column]
        public int? ccatr_ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatr_u_id.
        /// </summary>
        [Column]
        public int? ccatr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatr_order.
        /// </summary>
        [Column]
        public int ccatr_order { get; set; }

        /// <summary>
        /// Gets or sets the ccatr_ort_id.
        /// </summary>
        [Column]
        public int? ccatr_ort_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_reviewer_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_reviewer_custom_fields]")]
    [PrimaryKey("ccatrcf_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_reviewer_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatrcf_id.
        /// </summary>
        [Column]
        public int ccatrcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatrcf_ccatr_id.
        /// </summary>
        [Column]
        public int ccatrcf_ccatr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatrcf_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccatrcf_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatrcf_editable.
        /// </summary>
        [Column]
        public bool ccatrcf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccatrcf_hidden.
        /// </summary>
        [Column]
        public bool ccatrcf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccatrcf_required.
        /// </summary>
        [Column]
        public bool ccatrcf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_reviewer_system_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_reviewer_system_fields]")]
    [PrimaryKey("ccatrsf_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_reviewer_system_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatrsf_id.
        /// </summary>
        [Column]
        public int ccatrsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatrsf_ccatr_id.
        /// </summary>
        [Column]
        public int ccatrsf_ccatr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatrsf_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccatrsf_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatrsf_editable.
        /// </summary>
        [Column]
        public bool ccatrsf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccatrsf_hidden.
        /// </summary>
        [Column]
        public bool ccatrsf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccatrsf_required.
        /// </summary>
        [Column]
        public bool ccatrsf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_trigger_signatory] table.
    /// </summary>
    [TableName("[dbo].[cc_action_trigger_signatory]")]
    [PrimaryKey("ccats_id")]
    [ExplicitColumns]
    public partial class cc_action_trigger_signatoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccats_id.
        /// </summary>
        [Column]
        public int ccats_id { get; set; }

        /// <summary>
        /// Gets or sets the ccats_ccat_id.
        /// </summary>
        [Column]
        public int ccats_ccat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccats_ccpds_id.
        /// </summary>
        [Column]
        public int ccats_ccpds_id { get; set; }

        /// <summary>
        /// Gets or sets the ccats_u_id.
        /// </summary>
        [Column]
        public int? ccats_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccats_order.
        /// </summary>
        [Column]
        public int? ccats_order { get; set; }

        /// <summary>
        /// Gets or sets the ccats_ort_id.
        /// </summary>
        [Column]
        public int? ccats_ort_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_action_type] table.
    /// </summary>
    [TableName("[dbo].[cc_action_type]")]
    [PrimaryKey("ccatype_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_action_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccatype_id.
        /// </summary>
        [Column]
        public int ccatype_id { get; set; }

        /// <summary>
        /// Gets or sets the ccatype_type.
        /// </summary>
        [Column]
        public string ccatype_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc]")]
    [ExplicitColumns]
    public partial class cc_adhocRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the Attachment_Author.
        /// </summary>
        [Column("Attachment Author")] 
        public string Attachment_Author { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Comments.
        /// </summary>
        [Column("Attachment Comments")] 
        public string Attachment_Comments { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Subject.
        /// </summary>
        [Column("Attachment Subject")] 
        public string Attachment_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Type.
        /// </summary>
        [Column("Attachment Type")] 
        public string Attachment_Type { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Type.
        /// </summary>
        [Column("Contract Type")] 
        public string Contract_Type { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Type_Identification_Number.
        /// </summary>
        [Column("Contract Type Identification Number")] 
        public int? Contract_Type_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Identification_Number.
        /// </summary>
        [Column("Contracting Entity Identification Number")] 
        public int? Contracting_Entity_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Name.
        /// </summary>
        [Column("Contracting Entity Name")] 
        public string Contracting_Entity_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Reference_Number.
        /// </summary>
        [Column("Contracting Entity Reference Number")] 
        public string Contracting_Entity_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Short_Name.
        /// </summary>
        [Column("Contracting Entity Short Name")] 
        public string Contracting_Entity_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Department_Identification_Number.
        /// </summary>
        [Column("Department Identification Number")] 
        public int? Department_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Department_Name.
        /// </summary>
        [Column("Department Name")] 
        public string Department_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Number.
        /// </summary>
        [Column("Document Number")] 
        public int? Document_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Source.
        /// </summary>
        [Column("Document Source")] 
        public string Document_Source { get; set; }

        /// <summary>
        /// Gets or sets the Document_Subject.
        /// </summary>
        [Column("Document Subject")] 
        public string Document_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Identification_Number.
        /// </summary>
        [Column("Organization Identification Number")] 
        public int? Organization_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Name.
        /// </summary>
        [Column("Organization Name")] 
        public string Organization_Name { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Short_Name.
        /// </summary>
        [Column("Organization Short Name")] 
        public string Organization_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Identification_Number.
        /// </summary>
        [Column("Site Identification Number")] 
        public int? Site_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Name.
        /// </summary>
        [Column("Site Name")] 
        public string Site_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Short_Name.
        /// </summary>
        [Column("Site Short Name")] 
        public string Site_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Reference_Number.
        /// </summary>
        [Column("Site Reference Number")] 
        public string Site_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Line_1.
        /// </summary>
        [Column("Site Mailing Address Line 1")] 
        public string Site_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Line_2.
        /// </summary>
        [Column("Site Mailing Address Line 2")] 
        public string Site_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_City.
        /// </summary>
        [Column("Site Mailing Address City")] 
        public string Site_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_State.
        /// </summary>
        [Column("Site Mailing Address State")] 
        public string Site_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Site Mailing Address Zip Code")] 
        public string Site_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Last_Name.
        /// </summary>
        [Column("Site Contact Last Name")] 
        public string Site_Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_First_Name.
        /// </summary>
        [Column("Site Contact First Name")] 
        public string Site_Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Phone_Number.
        /// </summary>
        [Column("Site Contact Phone Number")] 
        public string Site_Contact_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Fax_Number.
        /// </summary>
        [Column("Site Contact Fax Number")] 
        public string Site_Contact_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Mobile_Number.
        /// </summary>
        [Column("Site Contact Mobile Number")] 
        public string Site_Contact_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Pager_Number.
        /// </summary>
        [Column("Site Contact Pager Number")] 
        public string Site_Contact_Pager_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Email_Address.
        /// </summary>
        [Column("Site Contact Email Address")] 
        public string Site_Contact_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Name.
        /// </summary>
        [Column("Vendor Name")] 
        public string Vendor_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Identification_Number.
        /// </summary>
        [Column("Vendor Identification Number")] 
        public int? Vendor_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Reference_Number.
        /// </summary>
        [Column("Vendor Reference Number")] 
        public string Vendor_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Last_Name.
        /// </summary>
        [Column("Vendor Contact Last Name")] 
        public string Vendor_Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_First_Name.
        /// </summary>
        [Column("Vendor Contact First Name")] 
        public string Vendor_Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Phone_Number.
        /// </summary>
        [Column("Vendor Contact Phone Number")] 
        public string Vendor_Contact_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Fax_Number.
        /// </summary>
        [Column("Vendor Contact Fax Number")] 
        public string Vendor_Contact_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Email_Address.
        /// </summary>
        [Column("Vendor Contact Email Address")] 
        public string Vendor_Contact_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Mobile_Number.
        /// </summary>
        [Column("Vendor Contact Mobile Number")] 
        public string Vendor_Contact_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Pager_Number.
        /// </summary>
        [Column("Vendor Contact Pager Number")] 
        public string Vendor_Contact_Pager_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Line_1.
        /// </summary>
        [Column("Vendor Mailing Address Line 1")] 
        public string Vendor_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Line_2.
        /// </summary>
        [Column("Vendor Mailing Address Line 2")] 
        public string Vendor_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_City.
        /// </summary>
        [Column("Vendor Mailing Address City")] 
        public string Vendor_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_State.
        /// </summary>
        [Column("Vendor Mailing Address State")] 
        public string Vendor_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Vendor Mailing Address Zip Code")] 
        public string Vendor_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Identification_Number.
        /// </summary>
        [Column("Document Originator Identification Number")] 
        public int? Document_Originator_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_User_Name.
        /// </summary>
        [Column("Document Originator User Name")] 
        public string Document_Originator_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Email_Address.
        /// </summary>
        [Column("Document Originator Email Address")] 
        public string Document_Originator_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Last_Name.
        /// </summary>
        [Column("Document Originator Last Name")] 
        public string Document_Originator_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_First_Name.
        /// </summary>
        [Column("Document Originator First Name")] 
        public string Document_Originator_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Middle_Name.
        /// </summary>
        [Column("Document Originator Middle Name")] 
        public string Document_Originator_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Phone_Number.
        /// </summary>
        [Column("Document Originator Phone Number")] 
        public string Document_Originator_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Fax_Number.
        /// </summary>
        [Column("Document Originator Fax Number")] 
        public string Document_Originator_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mobile_Number.
        /// </summary>
        [Column("Document Originator Mobile Number")] 
        public string Document_Originator_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Line_1.
        /// </summary>
        [Column("Document Originator Mailing Address Line 1")] 
        public string Document_Originator_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Line_2.
        /// </summary>
        [Column("Document Originator Mailing Address Line 2")] 
        public string Document_Originator_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_City.
        /// </summary>
        [Column("Document Originator Mailing Address City")] 
        public string Document_Originator_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_State.
        /// </summary>
        [Column("Document Originator Mailing Address State")] 
        public string Document_Originator_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Document Originator Mailing Address Zip Code")] 
        public string Document_Originator_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Origination_Date.
        /// </summary>
        [Column("Document Origination Date")] 
        public DateTime? Document_Origination_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Status.
        /// </summary>
        [Column("Document Status")] 
        public string Document_Status { get; set; }

        /// <summary>
        /// Gets or sets the Document_Status_Date.
        /// </summary>
        [Column("Document Status Date")] 
        public DateTime? Document_Status_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Style.
        /// </summary>
        [Column("Document Review Style")] 
        public string Document_Review_Style { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Type.
        /// </summary>
        [Column("Document Review Type")] 
        public string Document_Review_Type { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Time_Type.
        /// </summary>
        [Column("Document Review Time Type")] 
        public string Document_Review_Time_Type { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Time_Delay.
        /// </summary>
        [Column("Document Review Time Delay")] 
        public int? Document_Review_Time_Delay { get; set; }

        /// <summary>
        /// Gets or sets the Document_Path.
        /// </summary>
        [Column("Document Path")] 
        public string Document_Path { get; set; }

        /// <summary>
        /// Gets or sets the Document_Comments.
        /// </summary>
        [Column("Document Comments")] 
        public string Document_Comments { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Identification_Number.
        /// </summary>
        [Column("Document Reviewer Identification Number")] 
        public int? Document_Reviewer_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_User_Name.
        /// </summary>
        [Column("Document Reviewer User Name")] 
        public string Document_Reviewer_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Email_Address.
        /// </summary>
        [Column("Document Reviewer Email Address")] 
        public string Document_Reviewer_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Last_Name.
        /// </summary>
        [Column("Document Reviewer Last Name")] 
        public string Document_Reviewer_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_First_Name.
        /// </summary>
        [Column("Document Reviewer First Name")] 
        public string Document_Reviewer_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Middle_Name.
        /// </summary>
        [Column("Document Reviewer Middle Name")] 
        public string Document_Reviewer_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Phone_Number.
        /// </summary>
        [Column("Document Reviewer Phone Number")] 
        public string Document_Reviewer_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Fax_Number.
        /// </summary>
        [Column("Document Reviewer Fax Number")] 
        public string Document_Reviewer_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mobile_Number.
        /// </summary>
        [Column("Document Reviewer Mobile Number")] 
        public string Document_Reviewer_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Line_1.
        /// </summary>
        [Column("Document Reviewer Mailing Address Line 1")] 
        public string Document_Reviewer_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Line_2.
        /// </summary>
        [Column("Document Reviewer Mailing Address Line 2")] 
        public string Document_Reviewer_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_City.
        /// </summary>
        [Column("Document Reviewer Mailing Address City")] 
        public string Document_Reviewer_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_State.
        /// </summary>
        [Column("Document Reviewer Mailing Address State")] 
        public string Document_Reviewer_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Document Reviewer Mailing Address Zip Code")] 
        public string Document_Reviewer_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Status.
        /// </summary>
        [Column("Document Review Status")] 
        public string Document_Review_Status { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Comment.
        /// </summary>
        [Column("Document Review Comment")] 
        public string Document_Review_Comment { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Start_Date.
        /// </summary>
        [Column("Document Review Start Date")] 
        public DateTime? Document_Review_Start_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Reminder_Date.
        /// </summary>
        [Column("Document Review Reminder Date")] 
        public DateTime? Document_Review_Reminder_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_End_Date.
        /// </summary>
        [Column("Document Review End Date")] 
        public DateTime? Document_Review_End_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Effective_Date.
        /// </summary>
        [Column("Contract Effective Date")] 
        public DateTime? Contract_Effective_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Expiration_Date.
        /// </summary>
        [Column("Contract Expiration Date")] 
        public DateTime? Contract_Expiration_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal.
        /// </summary>
        [Column("Contract Automatic Renewal")] 
        public string Contract_Automatic_Renewal { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal_Term.
        /// </summary>
        [Column("Contract Automatic Renewal Term")] 
        public int? Contract_Automatic_Renewal_Term { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal_Time.
        /// </summary>
        [Column("Contract Automatic Renewal Time")] 
        public int? Contract_Automatic_Renewal_Time { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Action_List.
        /// </summary>
        [Column("Contract Action List")] 
        public string Contract_Action_List { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Group.
        /// </summary>
        [Column("Contract Group")] 
        public string Contract_Group { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Signatory_Name.
        /// </summary>
        [Column("Contract Signatory Name")] 
        public string Contract_Signatory_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Signatory_Title.
        /// </summary>
        [Column("Contract Signatory Title")] 
        public string Contract_Signatory_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Primary_Responsible_Party.
        /// </summary>
        [Column("Contract Primary Responsible Party")] 
        public int? Contract_Primary_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Primary_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Primary Responsible Party Title")] 
        public string Contract_Primary_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Secondary_Responsible_Party.
        /// </summary>
        [Column("Contract Secondary Responsible Party")] 
        public int? Contract_Secondary_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Secondary_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Secondary Responsible Party Title")] 
        public string Contract_Secondary_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Third_Responsible_Party.
        /// </summary>
        [Column("Contract Third Responsible Party")] 
        public int? Contract_Third_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Third_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Third Responsible Party Title")] 
        public string Contract_Third_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_PO_Number.
        /// </summary>
        [Column("Contract PO Number")] 
        public string Contract_PO_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Monthly_Value.
        /// </summary>
        [Column("Contract Monthly Value")] 
        public decimal? Contract_Monthly_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Annual_Value.
        /// </summary>
        [Column("Contract Annual Value")] 
        public decimal? Contract_Annual_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Total_Value.
        /// </summary>
        [Column("Contract Total Value")] 
        public decimal? Contract_Total_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Value_Escalates.
        /// </summary>
        [Column("Contract Value Escalates")] 
        public int? Contract_Value_Escalates { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Partial_Year.
        /// </summary>
        [Column("Contract Partial Year")] 
        public int? Contract_Partial_Year { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Other_Party_Signatory_Name.
        /// </summary>
        [Column("Contract Other Party Signatory Name")] 
        public string Contract_Other_Party_Signatory_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Other_Party_Signatory_Title.
        /// </summary>
        [Column("Contract Other Party Signatory Title")] 
        public string Contract_Other_Party_Signatory_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Product.
        /// </summary>
        [Column("Contract Product")] 
        public string Contract_Product { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Description.
        /// </summary>
        [Column("Contract Description")] 
        public string Contract_Description { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Term_Undefined.
        /// </summary>
        [Column("Contract Term Undefined")] 
        public string Contract_Term_Undefined { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Term.
        /// </summary>
        [Column("Contract Term")] 
        public string Contract_Term { get; set; }

        /// <summary>
        /// Gets or sets the Document_Pending_Signature.
        /// </summary>
        [Column("Document Pending Signature")] 
        public string Document_Pending_Signature { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_User_Name.
        /// </summary>
        [Column("Document Requestor User Name")] 
        public string Document_Requestor_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Email.
        /// </summary>
        [Column("Document Requestor Email")] 
        public string Document_Requestor_Email { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Last_Name.
        /// </summary>
        [Column("Document Requestor Last Name")] 
        public string Document_Requestor_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_First_Name.
        /// </summary>
        [Column("Document Requestor First Name")] 
        public string Document_Requestor_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Middle_Name.
        /// </summary>
        [Column("Document Requestor Middle Name")] 
        public string Document_Requestor_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Phone_Number.
        /// </summary>
        [Column("Document Requestor Phone Number")] 
        public string Document_Requestor_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the CFLDCID.
        /// </summary>
        [Column]
        public int? CFLDCID { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_1.
        /// </summary>
        [Column("Sample Field 1")] 
        public string Sample_Field_1 { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_2.
        /// </summary>
        [Column("Sample Field 2")] 
        public string Sample_Field_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_column]")]
    [ExplicitColumns]
    public partial class cc_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccac_id.
        /// </summary>
        [Column]
        public int ccac_id { get; set; }

        /// <summary>
        /// Gets or sets the ccac_name.
        /// </summary>
        [Column]
        public string ccac_name { get; set; }

        /// <summary>
        /// Gets or sets the ccac_format.
        /// </summary>
        [Column]
        public int ccac_format { get; set; }

        /// <summary>
        /// Gets or sets the ccac_fieldtype.
        /// </summary>
        [Column]
        public int ccac_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the ccac_select_expression.
        /// </summary>
        [Column]
        public string ccac_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccac_source.
        /// </summary>
        [Column]
        public string ccac_source { get; set; }

        /// <summary>
        /// Gets or sets the ccac_use_custom_expression.
        /// </summary>
        [Column]
        public bool ccac_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccac_extra_select_expression.
        /// </summary>
        [Column]
        public string ccac_extra_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccac_caption.
        /// </summary>
        [Column]
        public string ccac_caption { get; set; }

        /// <summary>
        /// Gets or sets the ccac_formula_field.
        /// </summary>
        [Column]
        public bool ccac_formula_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_field]")]
    [PrimaryKey("ccfld_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccfld_id.
        /// </summary>
        [Column]
        public int ccfld_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_name.
        /// </summary>
        [Column]
        public string ccfld_name { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_sort.
        /// </summary>
        [Column]
        public int? ccfld_sort { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_fieldtype.
        /// </summary>
        [Column]
        public int ccfld_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_select_expression.
        /// </summary>
        [Column]
        public string ccfld_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_source.
        /// </summary>
        [Column]
        public string ccfld_source { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_use_custom_expression.
        /// </summary>
        [Column]
        public bool ccfld_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_extra_select_expression.
        /// </summary>
        [Column]
        public string ccfld_extra_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_required.
        /// </summary>
        [Column]
        public int ccfld_required { get; set; }

        /// <summary>
        /// Gets or sets the ccfld_o_id.
        /// </summary>
        [Column]
        public int ccfld_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_field_crosstab] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_field_crosstab]")]
    [ExplicitColumns]
    public partial class cc_adhoc_field_crosstabRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CFLDCID.
        /// </summary>
        [Column]
        public int CFLDCID { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_1.
        /// </summary>
        [Column("Sample Field 1")] 
        public string Sample_Field_1 { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_2.
        /// </summary>
        [Column("Sample Field 2")] 
        public string Sample_Field_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_field_source] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_field_source]")]
    [PrimaryKey("ccafs_id")]
    [ExplicitColumns]
    public partial class cc_adhoc_field_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccafs_id.
        /// </summary>
        [Column]
        public int ccafs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccafs_source.
        /// </summary>
        [Column]
        public string ccafs_source { get; set; }

        /// <summary>
        /// Gets or sets the ccafs_preload_expression.
        /// </summary>
        [Column]
        public string ccafs_preload_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccafs_subquery_expression.
        /// </summary>
        [Column]
        public string ccafs_subquery_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccafs_table_name.
        /// </summary>
        [Column]
        public string ccafs_table_name { get; set; }

        /// <summary>
        /// Gets or sets the ccafs_parent_alias.
        /// </summary>
        [Column]
        public string ccafs_parent_alias { get; set; }

        /// <summary>
        /// Gets or sets the ccafs_join_type.
        /// </summary>
        [Column]
        public string ccafs_join_type { get; set; }

        /// <summary>
        /// Gets or sets the ccafs_left_column.
        /// </summary>
        [Column]
        public string ccafs_left_column { get; set; }

        /// <summary>
        /// Gets or sets the ccafs_right_column.
        /// </summary>
        [Column]
        public string ccafs_right_column { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_report] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_report]")]
    [PrimaryKey("cc_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_adhoc_reportRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cc_rpt_id.
        /// </summary>
        [Column]
        public int cc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_rpt_date.
        /// </summary>
        [Column]
        public DateTime cc_rpt_date { get; set; }

        /// <summary>
        /// Gets or sets the cc_rpt_u_id.
        /// </summary>
        [Column]
        public int cc_rpt_u_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_rpt_title.
        /// </summary>
        [Column]
        public string cc_rpt_title { get; set; }

        /// <summary>
        /// Gets or sets the cc_rpt_desc.
        /// </summary>
        [Column]
        public string cc_rpt_desc { get; set; }

        /// <summary>
        /// Gets or sets the cc_rpt_sql.
        /// </summary>
        [Column]
        public string cc_rpt_sql { get; set; }

        /// <summary>
        /// Gets or sets the cc_rpt_public.
        /// </summary>
        [Column]
        public bool cc_rpt_public { get; set; }

        /// <summary>
        /// Gets or sets the cc_rpt_template.
        /// </summary>
        [Column]
        public string cc_rpt_template { get; set; }

        /// <summary>
        /// Gets or sets the cc_rpt_o_id.
        /// </summary>
        [Column]
        public int? cc_rpt_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_report_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_report_fields]")]
    [PrimaryKey("arf_id")]
    [ExplicitColumns]
    public partial class cc_adhoc_report_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arf_id.
        /// </summary>
        [Column]
        public int arf_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_cc_rpt_id.
        /// </summary>
        [Column]
        public int arf_cc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_field.
        /// </summary>
        [Column]
        public string arf_field { get; set; }

        /// <summary>
        /// Gets or sets the arf_name.
        /// </summary>
        [Column]
        public string arf_name { get; set; }

        /// <summary>
        /// Gets or sets the arf_fieldtype.
        /// </summary>
        [Column]
        public int arf_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the arf_select_expression.
        /// </summary>
        [Column]
        public string arf_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_source.
        /// </summary>
        [Column]
        public string arf_source { get; set; }

        /// <summary>
        /// Gets or sets the arf_use_custom_expression.
        /// </summary>
        [Column]
        public bool arf_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_extra_select_expression.
        /// </summary>
        [Column]
        public string arf_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_report_query] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_report_query]")]
    [PrimaryKey("arq_id")]
    [ExplicitColumns]
    public partial class cc_adhoc_report_queryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arq_id.
        /// </summary>
        [Column]
        public int arq_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_cc_rpt_id.
        /// </summary>
        [Column]
        public int arq_cc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_type.
        /// </summary>
        [Column]
        public int arq_type { get; set; }

        /// <summary>
        /// Gets or sets the arq_value.
        /// </summary>
        [Column]
        public string arq_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_report_query_source] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_report_query_source]")]
    [PrimaryKey("ccarqs_id")]
    [ExplicitColumns]
    public partial class cc_adhoc_report_query_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccarqs_id.
        /// </summary>
        [Column]
        public int ccarqs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccarqs_arq_id.
        /// </summary>
        [Column]
        public int ccarqs_arq_id { get; set; }

        /// <summary>
        /// Gets or sets the ccarqs_column_name.
        /// </summary>
        [Column]
        public string ccarqs_column_name { get; set; }

        /// <summary>
        /// Gets or sets the ccarqs_select_expression.
        /// </summary>
        [Column]
        public string ccarqs_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccarqs_source.
        /// </summary>
        [Column]
        public string ccarqs_source { get; set; }

        /// <summary>
        /// Gets or sets the ccarqs_use_custom_expression.
        /// </summary>
        [Column]
        public bool ccarqs_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the ccarqs_fieldtype.
        /// </summary>
        [Column]
        public int? ccarqs_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the ccarqs_extra_select_expression.
        /// </summary>
        [Column]
        public string ccarqs_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_report_renamed_columns] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_report_renamed_columns]")]
    [PrimaryKey("cc_arrc_id")]
    [ExplicitColumns]
    public partial class cc_adhoc_report_renamed_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cc_arrc_id.
        /// </summary>
        [Column]
        public int cc_arrc_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_arrc_rpt_id.
        /// </summary>
        [Column]
        public int cc_arrc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_arrc_column_name.
        /// </summary>
        [Column]
        public string cc_arrc_column_name { get; set; }

        /// <summary>
        /// Gets or sets the cc_arrc_display_name.
        /// </summary>
        [Column]
        public string cc_arrc_display_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_report_users] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_report_users]")]
    [PrimaryKey("aru_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_adhoc_report_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the aru_rpt_id.
        /// </summary>
        [Column]
        public int aru_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the aru_u_id.
        /// </summary>
        [Column]
        public int aru_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_adhoc_without_attachments] table.
    /// </summary>
    [TableName("[dbo].[cc_adhoc_without_attachments]")]
    [ExplicitColumns]
    public partial class cc_adhoc_without_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the Attachment_Author.
        /// </summary>
        [Column("Attachment Author")] 
        public string Attachment_Author { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Type.
        /// </summary>
        [Column("Contract Type")] 
        public string Contract_Type { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Type_Identification_Number.
        /// </summary>
        [Column("Contract Type Identification Number")] 
        public int? Contract_Type_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Identification_Number.
        /// </summary>
        [Column("Contracting Entity Identification Number")] 
        public int? Contracting_Entity_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Name.
        /// </summary>
        [Column("Contracting Entity Name")] 
        public string Contracting_Entity_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Reference_Number.
        /// </summary>
        [Column("Contracting Entity Reference Number")] 
        public string Contracting_Entity_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Short_Name.
        /// </summary>
        [Column("Contracting Entity Short Name")] 
        public string Contracting_Entity_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Department_Identification_Number.
        /// </summary>
        [Column("Department Identification Number")] 
        public int? Department_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Department_Name.
        /// </summary>
        [Column("Department Name")] 
        public string Department_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Number.
        /// </summary>
        [Column("Document Number")] 
        public int? Document_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Source.
        /// </summary>
        [Column("Document Source")] 
        public string Document_Source { get; set; }

        /// <summary>
        /// Gets or sets the Document_Subject.
        /// </summary>
        [Column("Document Subject")] 
        public string Document_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Identification_Number.
        /// </summary>
        [Column("Organization Identification Number")] 
        public int? Organization_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Name.
        /// </summary>
        [Column("Organization Name")] 
        public string Organization_Name { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Short_Name.
        /// </summary>
        [Column("Organization Short Name")] 
        public string Organization_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Identification_Number.
        /// </summary>
        [Column("Site Identification Number")] 
        public int? Site_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Name.
        /// </summary>
        [Column("Site Name")] 
        public string Site_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Short_Name.
        /// </summary>
        [Column("Site Short Name")] 
        public string Site_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Reference_Number.
        /// </summary>
        [Column("Site Reference Number")] 
        public string Site_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Line_1.
        /// </summary>
        [Column("Site Mailing Address Line 1")] 
        public string Site_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Line_2.
        /// </summary>
        [Column("Site Mailing Address Line 2")] 
        public string Site_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_City.
        /// </summary>
        [Column("Site Mailing Address City")] 
        public string Site_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_State.
        /// </summary>
        [Column("Site Mailing Address State")] 
        public string Site_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Site Mailing Address Zip Code")] 
        public string Site_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Last_Name.
        /// </summary>
        [Column("Site Contact Last Name")] 
        public string Site_Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_First_Name.
        /// </summary>
        [Column("Site Contact First Name")] 
        public string Site_Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Phone_Number.
        /// </summary>
        [Column("Site Contact Phone Number")] 
        public string Site_Contact_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Fax_Number.
        /// </summary>
        [Column("Site Contact Fax Number")] 
        public string Site_Contact_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Mobile_Number.
        /// </summary>
        [Column("Site Contact Mobile Number")] 
        public string Site_Contact_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Pager_Number.
        /// </summary>
        [Column("Site Contact Pager Number")] 
        public string Site_Contact_Pager_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Email_Address.
        /// </summary>
        [Column("Site Contact Email Address")] 
        public string Site_Contact_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Name.
        /// </summary>
        [Column("Vendor Name")] 
        public string Vendor_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Identification_Number.
        /// </summary>
        [Column("Vendor Identification Number")] 
        public int? Vendor_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Reference_Number.
        /// </summary>
        [Column("Vendor Reference Number")] 
        public string Vendor_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Last_Name.
        /// </summary>
        [Column("Vendor Contact Last Name")] 
        public string Vendor_Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_First_Name.
        /// </summary>
        [Column("Vendor Contact First Name")] 
        public string Vendor_Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Phone_Number.
        /// </summary>
        [Column("Vendor Contact Phone Number")] 
        public string Vendor_Contact_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Fax_Number.
        /// </summary>
        [Column("Vendor Contact Fax Number")] 
        public string Vendor_Contact_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Email_Address.
        /// </summary>
        [Column("Vendor Contact Email Address")] 
        public string Vendor_Contact_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Mobile_Number.
        /// </summary>
        [Column("Vendor Contact Mobile Number")] 
        public string Vendor_Contact_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Pager_Number.
        /// </summary>
        [Column("Vendor Contact Pager Number")] 
        public string Vendor_Contact_Pager_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Line_1.
        /// </summary>
        [Column("Vendor Mailing Address Line 1")] 
        public string Vendor_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Line_2.
        /// </summary>
        [Column("Vendor Mailing Address Line 2")] 
        public string Vendor_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_City.
        /// </summary>
        [Column("Vendor Mailing Address City")] 
        public string Vendor_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_State.
        /// </summary>
        [Column("Vendor Mailing Address State")] 
        public string Vendor_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Vendor Mailing Address Zip Code")] 
        public string Vendor_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Identification_Number.
        /// </summary>
        [Column("Document Originator Identification Number")] 
        public int? Document_Originator_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_User_Name.
        /// </summary>
        [Column("Document Originator User Name")] 
        public string Document_Originator_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Email_Address.
        /// </summary>
        [Column("Document Originator Email Address")] 
        public string Document_Originator_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Last_Name.
        /// </summary>
        [Column("Document Originator Last Name")] 
        public string Document_Originator_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_First_Name.
        /// </summary>
        [Column("Document Originator First Name")] 
        public string Document_Originator_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Middle_Name.
        /// </summary>
        [Column("Document Originator Middle Name")] 
        public string Document_Originator_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Phone_Number.
        /// </summary>
        [Column("Document Originator Phone Number")] 
        public string Document_Originator_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Fax_Number.
        /// </summary>
        [Column("Document Originator Fax Number")] 
        public string Document_Originator_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mobile_Number.
        /// </summary>
        [Column("Document Originator Mobile Number")] 
        public string Document_Originator_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Line_1.
        /// </summary>
        [Column("Document Originator Mailing Address Line 1")] 
        public string Document_Originator_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Line_2.
        /// </summary>
        [Column("Document Originator Mailing Address Line 2")] 
        public string Document_Originator_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_City.
        /// </summary>
        [Column("Document Originator Mailing Address City")] 
        public string Document_Originator_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_State.
        /// </summary>
        [Column("Document Originator Mailing Address State")] 
        public string Document_Originator_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Document Originator Mailing Address Zip Code")] 
        public string Document_Originator_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Origination_Date.
        /// </summary>
        [Column("Document Origination Date")] 
        public DateTime? Document_Origination_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Status.
        /// </summary>
        [Column("Document Status")] 
        public string Document_Status { get; set; }

        /// <summary>
        /// Gets or sets the Document_Status_Date.
        /// </summary>
        [Column("Document Status Date")] 
        public DateTime? Document_Status_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Style.
        /// </summary>
        [Column("Document Review Style")] 
        public string Document_Review_Style { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Type.
        /// </summary>
        [Column("Document Review Type")] 
        public string Document_Review_Type { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Time_Type.
        /// </summary>
        [Column("Document Review Time Type")] 
        public string Document_Review_Time_Type { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Time_Delay.
        /// </summary>
        [Column("Document Review Time Delay")] 
        public int? Document_Review_Time_Delay { get; set; }

        /// <summary>
        /// Gets or sets the Document_Path.
        /// </summary>
        [Column("Document Path")] 
        public string Document_Path { get; set; }

        /// <summary>
        /// Gets or sets the Document_Comments.
        /// </summary>
        [Column("Document Comments")] 
        public string Document_Comments { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Identification_Number.
        /// </summary>
        [Column("Document Reviewer Identification Number")] 
        public int? Document_Reviewer_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_User_Name.
        /// </summary>
        [Column("Document Reviewer User Name")] 
        public string Document_Reviewer_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Email_Address.
        /// </summary>
        [Column("Document Reviewer Email Address")] 
        public string Document_Reviewer_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Last_Name.
        /// </summary>
        [Column("Document Reviewer Last Name")] 
        public string Document_Reviewer_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_First_Name.
        /// </summary>
        [Column("Document Reviewer First Name")] 
        public string Document_Reviewer_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Middle_Name.
        /// </summary>
        [Column("Document Reviewer Middle Name")] 
        public string Document_Reviewer_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Phone_Number.
        /// </summary>
        [Column("Document Reviewer Phone Number")] 
        public string Document_Reviewer_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Fax_Number.
        /// </summary>
        [Column("Document Reviewer Fax Number")] 
        public string Document_Reviewer_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mobile_Number.
        /// </summary>
        [Column("Document Reviewer Mobile Number")] 
        public string Document_Reviewer_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Line_1.
        /// </summary>
        [Column("Document Reviewer Mailing Address Line 1")] 
        public string Document_Reviewer_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Line_2.
        /// </summary>
        [Column("Document Reviewer Mailing Address Line 2")] 
        public string Document_Reviewer_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_City.
        /// </summary>
        [Column("Document Reviewer Mailing Address City")] 
        public string Document_Reviewer_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_State.
        /// </summary>
        [Column("Document Reviewer Mailing Address State")] 
        public string Document_Reviewer_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Document Reviewer Mailing Address Zip Code")] 
        public string Document_Reviewer_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Status.
        /// </summary>
        [Column("Document Review Status")] 
        public string Document_Review_Status { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Comment.
        /// </summary>
        [Column("Document Review Comment")] 
        public string Document_Review_Comment { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Start_Date.
        /// </summary>
        [Column("Document Review Start Date")] 
        public DateTime? Document_Review_Start_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Reminder_Date.
        /// </summary>
        [Column("Document Review Reminder Date")] 
        public DateTime? Document_Review_Reminder_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_End_Date.
        /// </summary>
        [Column("Document Review End Date")] 
        public DateTime? Document_Review_End_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Number.
        /// </summary>
        [Column("Contract Number")] 
        public string Contract_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Effective_Date.
        /// </summary>
        [Column("Contract Effective Date")] 
        public DateTime? Contract_Effective_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Expiration_Date.
        /// </summary>
        [Column("Contract Expiration Date")] 
        public DateTime? Contract_Expiration_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal.
        /// </summary>
        [Column("Contract Automatic Renewal")] 
        public string Contract_Automatic_Renewal { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal_Term.
        /// </summary>
        [Column("Contract Automatic Renewal Term")] 
        public int? Contract_Automatic_Renewal_Term { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal_Time.
        /// </summary>
        [Column("Contract Automatic Renewal Time")] 
        public int? Contract_Automatic_Renewal_Time { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Action_List.
        /// </summary>
        [Column("Contract Action List")] 
        public string Contract_Action_List { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Group.
        /// </summary>
        [Column("Contract Group")] 
        public string Contract_Group { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Signatory_Name.
        /// </summary>
        [Column("Contract Signatory Name")] 
        public string Contract_Signatory_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Signatory_Title.
        /// </summary>
        [Column("Contract Signatory Title")] 
        public string Contract_Signatory_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Primary_Responsible_Party.
        /// </summary>
        [Column("Contract Primary Responsible Party")] 
        public int? Contract_Primary_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Primary_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Primary Responsible Party Title")] 
        public string Contract_Primary_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Secondary_Responsible_Party.
        /// </summary>
        [Column("Contract Secondary Responsible Party")] 
        public int? Contract_Secondary_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Secondary_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Secondary Responsible Party Title")] 
        public string Contract_Secondary_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Third_Responsible_Party.
        /// </summary>
        [Column("Contract Third Responsible Party")] 
        public int? Contract_Third_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Third_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Third Responsible Party Title")] 
        public string Contract_Third_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_PO_Number.
        /// </summary>
        [Column("Contract PO Number")] 
        public string Contract_PO_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Monthly_Value.
        /// </summary>
        [Column("Contract Monthly Value")] 
        public decimal? Contract_Monthly_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Annual_Value.
        /// </summary>
        [Column("Contract Annual Value")] 
        public decimal? Contract_Annual_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Total_Value.
        /// </summary>
        [Column("Contract Total Value")] 
        public decimal? Contract_Total_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Value_Escalates.
        /// </summary>
        [Column("Contract Value Escalates")] 
        public int? Contract_Value_Escalates { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Partial_Year.
        /// </summary>
        [Column("Contract Partial Year")] 
        public int? Contract_Partial_Year { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Other_Party_Signatory_Name.
        /// </summary>
        [Column("Contract Other Party Signatory Name")] 
        public string Contract_Other_Party_Signatory_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Other_Party_Signatory_Title.
        /// </summary>
        [Column("Contract Other Party Signatory Title")] 
        public string Contract_Other_Party_Signatory_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Product.
        /// </summary>
        [Column("Contract Product")] 
        public string Contract_Product { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Description.
        /// </summary>
        [Column("Contract Description")] 
        public string Contract_Description { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Term_Undefined.
        /// </summary>
        [Column("Contract Term Undefined")] 
        public string Contract_Term_Undefined { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Term.
        /// </summary>
        [Column("Contract Term")] 
        public string Contract_Term { get; set; }

        /// <summary>
        /// Gets or sets the Document_Pending_Signature.
        /// </summary>
        [Column("Document Pending Signature")] 
        public string Document_Pending_Signature { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_User_Name.
        /// </summary>
        [Column("Document Requestor User Name")] 
        public string Document_Requestor_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Email.
        /// </summary>
        [Column("Document Requestor Email")] 
        public string Document_Requestor_Email { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Last_Name.
        /// </summary>
        [Column("Document Requestor Last Name")] 
        public string Document_Requestor_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_First_Name.
        /// </summary>
        [Column("Document Requestor First Name")] 
        public string Document_Requestor_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Middle_Name.
        /// </summary>
        [Column("Document Requestor Middle Name")] 
        public string Document_Requestor_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Phone_Number.
        /// </summary>
        [Column("Document Requestor Phone Number")] 
        public string Document_Requestor_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the CFLDCID.
        /// </summary>
        [Column]
        public int? CFLDCID { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_1.
        /// </summary>
        [Column("Sample Field 1")] 
        public string Sample_Field_1 { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_2.
        /// </summary>
        [Column("Sample Field 2")] 
        public string Sample_Field_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_alert_contract_effective] table.
    /// </summary>
    [TableName("[dbo].[cc_alert_contract_effective]")]
    [PrimaryKey("ccace_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_alert_contract_effectiveRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccace_id.
        /// </summary>
        [Column]
        public int ccace_id { get; set; }

        /// <summary>
        /// Gets or sets the ccace_day.
        /// </summary>
        [Column]
        public int ccace_day { get; set; }

        /// <summary>
        /// Gets or sets the ccace_subject.
        /// </summary>
        [Column]
        public string ccace_subject { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_alternate] table.
    /// </summary>
    [TableName("[dbo].[cc_alternate]")]
    [PrimaryKey("cca_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_alternateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cca_id.
        /// </summary>
        [Column]
        public int cca_id { get; set; }

        /// <summary>
        /// Gets or sets the cca_name.
        /// </summary>
        [Column]
        public string cca_name { get; set; }

        /// <summary>
        /// Gets or sets the cca_text.
        /// </summary>
        [Column]
        public string cca_text { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_contract_adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[cc_contract_adhoc_field]")]
    [PrimaryKey("cccfld_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_contract_adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cccfld_id.
        /// </summary>
        [Column]
        public int cccfld_id { get; set; }

        /// <summary>
        /// Gets or sets the cccfld_ccd_id.
        /// </summary>
        [Column]
        public int cccfld_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the cccfld_fld_id.
        /// </summary>
        [Column]
        public int cccfld_fld_id { get; set; }

        /// <summary>
        /// Gets or sets the cccfld_value.
        /// </summary>
        [Column]
        public string cccfld_value { get; set; }

        /// <summary>
        /// Gets or sets the cccfld_value_id.
        /// </summary>
        [Column]
        public int? cccfld_value_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_default_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_default_reviewer]")]
    [PrimaryKey("ccdef_id")]
    [ExplicitColumns]
    public partial class cc_default_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdef_ot_id.
        /// </summary>
        [Column]
        public int? ccdef_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdef_u_id.
        /// </summary>
        [Column]
        public int ccdef_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdef_order.
        /// </summary>
        [Column]
        public int ccdef_order { get; set; }

        /// <summary>
        /// Gets or sets the ccdef_id.
        /// </summary>
        [Column]
        public int ccdef_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdef_s_id.
        /// </summary>
        [Column]
        public int? ccdef_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_default_signatory] table.
    /// </summary>
    [TableName("[dbo].[cc_default_signatory]")]
    [PrimaryKey("ccdefs_id")]
    [ExplicitColumns]
    public partial class cc_default_signatoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdefs_ot_id.
        /// </summary>
        [Column]
        public int? ccdefs_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdefs_u_id.
        /// </summary>
        [Column]
        public int ccdefs_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdefs_order.
        /// </summary>
        [Column]
        public int ccdefs_order { get; set; }

        /// <summary>
        /// Gets or sets the ccdefs_id.
        /// </summary>
        [Column]
        public int ccdefs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdefs_s_id.
        /// </summary>
        [Column]
        public int? ccdefs_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_default_template] table.
    /// </summary>
    [TableName("[dbo].[cc_default_template]")]
    [PrimaryKey("ccdeft_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_default_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdeft_id.
        /// </summary>
        [Column]
        public int ccdeft_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdeft_ot_id.
        /// </summary>
        [Column]
        public int ccdeft_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdeft_name.
        /// </summary>
        [Column]
        public string ccdeft_name { get; set; }

        /// <summary>
        /// Gets or sets the ccdeft_doc_path.
        /// </summary>
        [Column]
        public string ccdeft_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccdeft_modified_date.
        /// </summary>
        [Column]
        public DateTime? ccdeft_modified_date { get; set; }

        /// <summary>
        /// Gets or sets the ccdeft_modified_u_id.
        /// </summary>
        [Column]
        public int? ccdeft_modified_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdeft_all_sites.
        /// </summary>
        [Column]
        public bool? ccdeft_all_sites { get; set; }

        /// <summary>
        /// Gets or sets the applicationId.
        /// </summary>
        [Column]
        public int? applicationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_default_template_site] table.
    /// </summary>
    [TableName("[dbo].[cc_default_template_site]")]
    [PrimaryKey("ccdefts_ccdeft_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_default_template_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdefts_ccdeft_id.
        /// </summary>
        [Column]
        public int ccdefts_ccdeft_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdefts_s_id.
        /// </summary>
        [Column]
        public int ccdefts_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_default_template_tags] table.
    /// </summary>
    [TableName("[dbo].[cc_default_template_tags]")]
    [ExplicitColumns]
    public partial class cc_default_template_tagRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdeftt_ccdeft_id.
        /// </summary>
        [Column]
        public int ccdeftt_ccdeft_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdeftt_ocf_id.
        /// </summary>
        [Column]
        public int? ccdeftt_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdeftt_tags.
        /// </summary>
        [Column]
        public int? ccdeftt_tags { get; set; }

        /// <summary>
        /// Gets or sets the ccdeftt_ccrfsfs_id.
        /// </summary>
        [Column]
        public int? ccdeftt_ccrfsfs_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document] table.
    /// </summary>
    [TableName("[dbo].[cc_document]")]
    [PrimaryKey("ccd_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_documentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccd_id.
        /// </summary>
        [Column]
        public int ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_ccdsrc_id.
        /// </summary>
        [Column]
        public int ccd_ccdsrc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_o_id.
        /// </summary>
        [Column]
        public int ccd_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_v_id.
        /// </summary>
        [Column]
        public int? ccd_v_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_e_id.
        /// </summary>
        [Column]
        public int? ccd_e_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_od_id.
        /// </summary>
        [Column]
        public int? ccd_od_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_ot_id.
        /// </summary>
        [Column]
        public int? ccd_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_u_id_originator.
        /// </summary>
        [Column]
        public int ccd_u_id_originator { get; set; }

        /// <summary>
        /// Gets or sets the ccd_origination_date.
        /// </summary>
        [Column]
        public DateTime ccd_origination_date { get; set; }

        /// <summary>
        /// Gets or sets the ccd_subject.
        /// </summary>
        [Column]
        public string ccd_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccd_ccdstat_id.
        /// </summary>
        [Column]
        public int ccd_ccdstat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_ccdstat_date.
        /// </summary>
        [Column]
        public DateTime ccd_ccdstat_date { get; set; }

        /// <summary>
        /// Gets or sets the ccd_ccrs_id.
        /// </summary>
        [Column]
        public int ccd_ccrs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_ccrt_id.
        /// </summary>
        [Column]
        public int ccd_ccrt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_cctt_id.
        /// </summary>
        [Column]
        public int ccd_cctt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_cctt_delay.
        /// </summary>
        [Column]
        public int ccd_cctt_delay { get; set; }

        /// <summary>
        /// Gets or sets the ccd_doc_path.
        /// </summary>
        [Column]
        public string ccd_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccd_con_no.
        /// </summary>
        [Column]
        public string ccd_con_no { get; set; }

        /// <summary>
        /// Gets or sets the ccd_comment.
        /// </summary>
        [Column]
        public string ccd_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccd_ccdstat_u_id.
        /// </summary>
        [Column]
        public int? ccd_ccdstat_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_date_eff.
        /// </summary>
        [Column]
        public DateTime? ccd_date_eff { get; set; }

        /// <summary>
        /// Gets or sets the ccd_date_exp.
        /// </summary>
        [Column]
        public DateTime? ccd_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the ccd_auto_renew.
        /// </summary>
        [Column]
        public int? ccd_auto_renew { get; set; }

        /// <summary>
        /// Gets or sets the ccd_auto_renew_term.
        /// </summary>
        [Column]
        public int? ccd_auto_renew_term { get; set; }

        /// <summary>
        /// Gets or sets the ccd_auto_renew_time.
        /// </summary>
        [Column]
        public int? ccd_auto_renew_time { get; set; }

        /// <summary>
        /// Gets or sets the ccd_action_list.
        /// </summary>
        [Column]
        public bool? ccd_action_list { get; set; }

        /// <summary>
        /// Gets or sets the ccd_group.
        /// </summary>
        [Column]
        public string ccd_group { get; set; }

        /// <summary>
        /// Gets or sets the ccd_sig_name.
        /// </summary>
        [Column]
        public string ccd_sig_name { get; set; }

        /// <summary>
        /// Gets or sets the ccd_sig_title.
        /// </summary>
        [Column]
        public string ccd_sig_title { get; set; }

        /// <summary>
        /// Gets or sets the ccd_u_id_primary.
        /// </summary>
        [Column]
        public int? ccd_u_id_primary { get; set; }

        /// <summary>
        /// Gets or sets the ccd_u_id_primary_title.
        /// </summary>
        [Column]
        public string ccd_u_id_primary_title { get; set; }

        /// <summary>
        /// Gets or sets the ccd_u_id_secondary.
        /// </summary>
        [Column]
        public int? ccd_u_id_secondary { get; set; }

        /// <summary>
        /// Gets or sets the ccd_u_id_secondary_title.
        /// </summary>
        [Column]
        public string ccd_u_id_secondary_title { get; set; }

        /// <summary>
        /// Gets or sets the ccd_u_id_third.
        /// </summary>
        [Column]
        public int? ccd_u_id_third { get; set; }

        /// <summary>
        /// Gets or sets the ccd_u_id_third_title.
        /// </summary>
        [Column]
        public string ccd_u_id_third_title { get; set; }

        /// <summary>
        /// Gets or sets the ccd_po_no.
        /// </summary>
        [Column]
        public string ccd_po_no { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value.
        /// </summary>
        [Column]
        public decimal? ccd_value { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_annual.
        /// </summary>
        [Column]
        public decimal? ccd_value_annual { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_total.
        /// </summary>
        [Column]
        public decimal? ccd_value_total { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_esc.
        /// </summary>
        [Column]
        public int? ccd_value_esc { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_sqf.
        /// </summary>
        [Column]
        public int? ccd_value_sqf { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_psf.
        /// </summary>
        [Column]
        public decimal? ccd_value_psf { get; set; }

        /// <summary>
        /// Gets or sets the ccd_sig_name_v.
        /// </summary>
        [Column]
        public string ccd_sig_name_v { get; set; }

        /// <summary>
        /// Gets or sets the ccd_sig_title_v.
        /// </summary>
        [Column]
        public string ccd_sig_title_v { get; set; }

        /// <summary>
        /// Gets or sets the ccd_product.
        /// </summary>
        [Column]
        public string ccd_product { get; set; }

        /// <summary>
        /// Gets or sets the ccd_desc.
        /// </summary>
        [Column]
        public string ccd_desc { get; set; }

        /// <summary>
        /// Gets or sets the ccd_term_undefined.
        /// </summary>
        [Column]
        public bool? ccd_term_undefined { get; set; }

        /// <summary>
        /// Gets or sets the ccd_term.
        /// </summary>
        [Column]
        public string ccd_term { get; set; }

        /// <summary>
        /// Gets or sets the ccd_pending_sig.
        /// </summary>
        [Column]
        public int ccd_pending_sig { get; set; }

        /// <summary>
        /// Gets or sets the ccd_u_id_requestor.
        /// </summary>
        [Column]
        public int? ccd_u_id_requestor { get; set; }

        /// <summary>
        /// Gets or sets the ccd_approval_date.
        /// </summary>
        [Column]
        public DateTime? ccd_approval_date { get; set; }

        /// <summary>
        /// Gets or sets the ccd_inreview_date.
        /// </summary>
        [Column]
        public DateTime? ccd_inreview_date { get; set; }

        /// <summary>
        /// Gets or sets the ccd_version.
        /// </summary>
        [Column]
        public int? ccd_version { get; set; }

        /// <summary>
        /// Gets or sets the ccd_version_date.
        /// </summary>
        [Column]
        public DateTime? ccd_version_date { get; set; }

        /// <summary>
        /// Gets or sets the ccd_version_u_id.
        /// </summary>
        [Column]
        public int? ccd_version_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_original_ccd_id.
        /// </summary>
        [Column]
        public int? ccd_original_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_current_version.
        /// </summary>
        [Column]
        public bool ccd_current_version { get; set; }

        /// <summary>
        /// Gets or sets the ccd_country_id.
        /// </summary>
        [Column]
        public int? ccd_country_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_state_id.
        /// </summary>
        [Column]
        public int? ccd_state_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_county_id.
        /// </summary>
        [Column]
        public int? ccd_county_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_draft_id.
        /// </summary>
        [Column]
        public int? ccd_draft_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_otherinfo1.
        /// </summary>
        [Column]
        public string ccd_otherinfo1 { get; set; }

        /// <summary>
        /// Gets or sets the ccd_otherinfo2.
        /// </summary>
        [Column]
        public string ccd_otherinfo2 { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_currency_code.
        /// </summary>
        [Column]
        public string ccd_value_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_annual_currency_code.
        /// </summary>
        [Column]
        public string ccd_value_annual_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_total_currency_code.
        /// </summary>
        [Column]
        public string ccd_value_total_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the ccd_value_psf_currency_code.
        /// </summary>
        [Column]
        public string ccd_value_psf_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the ccd_suppliment_c_id.
        /// </summary>
        [Column]
        public int? ccd_suppliment_c_id { get; set; }

        /// <summary>
        /// Gets or sets the last_modified.
        /// </summary>
        [Column]
        public DateTime last_modified { get; set; }

        /// <summary>
        /// Gets or sets the ccd_sig_vendor_name.
        /// </summary>
        [Column]
        public string ccd_sig_vendor_name { get; set; }

        /// <summary>
        /// Gets or sets the ccd_sig_vendor_email.
        /// </summary>
        [Column]
        public string ccd_sig_vendor_email { get; set; }

        /// <summary>
        /// Gets or sets the ccd_sig_date.
        /// </summary>
        [Column]
        public string ccd_sig_date { get; set; }

        /// <summary>
        /// Gets or sets the ccd_docusign_envelope_id.
        /// </summary>
        [Column]
        public string ccd_docusign_envelope_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_docusign_doc_path.
        /// </summary>
        [Column]
        public string ccd_docusign_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccd_sig_docusign_envelope_id.
        /// </summary>
        [Column]
        public string ccd_sig_docusign_envelope_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_other_signatory_position.
        /// </summary>
        [Column]
        public int? ccd_other_signatory_position { get; set; }

        /// <summary>
        /// Gets or sets the ccd_processing_status.
        /// </summary>
        [Column]
        public int? ccd_processing_status { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[cc_document_adhoc_field]")]
    [PrimaryKey("ccdcfld_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdcfld_id.
        /// </summary>
        [Column]
        public int ccdcfld_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdcfld_ccd_id.
        /// </summary>
        [Column]
        public int ccdcfld_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdcfld_ccfld_id.
        /// </summary>
        [Column]
        public int ccdcfld_ccfld_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdcfld_value.
        /// </summary>
        [Column]
        public string ccdcfld_value { get; set; }

        /// <summary>
        /// Gets or sets the ccdcfld_value_id.
        /// </summary>
        [Column]
        public int? ccdcfld_value_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_document_attachment]")]
    [PrimaryKey("ccda_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccda_id.
        /// </summary>
        [Column]
        public int ccda_id { get; set; }

        /// <summary>
        /// Gets or sets the ccda_ccd_id.
        /// </summary>
        [Column]
        public int ccda_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccda_ccdat_id.
        /// </summary>
        [Column]
        public int ccda_ccdat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccda_u_id.
        /// </summary>
        [Column]
        public int ccda_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccda_date.
        /// </summary>
        [Column]
        public DateTime ccda_date { get; set; }

        /// <summary>
        /// Gets or sets the ccda_subject.
        /// </summary>
        [Column]
        public string ccda_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccda_sort.
        /// </summary>
        [Column]
        public int ccda_sort { get; set; }

        /// <summary>
        /// Gets or sets the ccda_doc_path.
        /// </summary>
        [Column]
        public string ccda_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccda_body.
        /// </summary>
        [Column]
        public string ccda_body { get; set; }

        /// <summary>
        /// Gets or sets the last_modified.
        /// </summary>
        [Column]
        public DateTime last_modified { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_attachment_type] table.
    /// </summary>
    [TableName("[dbo].[cc_document_attachment_type]")]
    [PrimaryKey("ccdat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_attachment_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdat_id.
        /// </summary>
        [Column]
        public int ccdat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdat_name.
        /// </summary>
        [Column]
        public string ccdat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_document_comment]")]
    [PrimaryKey("ccdc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdc_id.
        /// </summary>
        [Column]
        public int ccdc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdc_ccd_id.
        /// </summary>
        [Column]
        public int ccdc_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdc_u_id.
        /// </summary>
        [Column]
        public int ccdc_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccdc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccdc_comment.
        /// </summary>
        [Column]
        public string ccdc_comment { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_compliance] table.
    /// </summary>
    [TableName("[dbo].[cc_document_compliance]")]
    [PrimaryKey("ccdc_id")]
    [ExplicitColumns]
    public partial class cc_document_complianceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdc_id.
        /// </summary>
        [Column]
        public int ccdc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdc_ccd_id.
        /// </summary>
        [Column]
        public int ccdc_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdc_cq_id.
        /// </summary>
        [Column]
        public int ccdc_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdc_yes.
        /// </summary>
        [Column]
        public int ccdc_yes { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_cost_value] table.
    /// </summary>
    [TableName("[dbo].[cc_document_cost_value]")]
    [PrimaryKey("cdcv_id")]
    [ExplicitColumns]
    public partial class cc_document_cost_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cdcv_id.
        /// </summary>
        [Column]
        public int cdcv_id { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_ccd_id.
        /// </summary>
        [Column]
        public int cdcv_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_ccf_id.
        /// </summary>
        [Column]
        public int cdcv_ccf_id { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_details.
        /// </summary>
        [Column]
        public string cdcv_details { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_unit.
        /// </summary>
        [Column]
        public double? cdcv_unit { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_ccu_id.
        /// </summary>
        [Column]
        public int? cdcv_ccu_id { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_year.
        /// </summary>
        [Column]
        public int? cdcv_year { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_period.
        /// </summary>
        [Column]
        public int? cdcv_period { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_total.
        /// </summary>
        [Column]
        public double cdcv_total { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_fixed.
        /// </summary>
        [Column]
        public bool cdcv_fixed { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_total_currency_code.
        /// </summary>
        [Column]
        public string cdcv_total_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the cdcv_cct_id.
        /// </summary>
        [Column]
        public int? cdcv_cct_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_email] table.
    /// </summary>
    [TableName("[dbo].[cc_document_email]")]
    [PrimaryKey("ccde_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccde_id.
        /// </summary>
        [Column]
        public int ccde_id { get; set; }

        /// <summary>
        /// Gets or sets the ccde_ccd_id.
        /// </summary>
        [Column]
        public int ccde_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccde_u_id.
        /// </summary>
        [Column]
        public string ccde_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_review] table.
    /// </summary>
    [TableName("[dbo].[cc_document_review]")]
    [PrimaryKey("ccdrr_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_reviewRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdrr_id.
        /// </summary>
        [Column]
        public int ccdrr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdrr_ccdr_id.
        /// </summary>
        [Column]
        public int ccdrr_ccdr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdrr_ccdrstat_id.
        /// </summary>
        [Column]
        public int ccdrr_ccdrstat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdrr_ccdrstat_date.
        /// </summary>
        [Column]
        public DateTime ccdrr_ccdrstat_date { get; set; }

        /// <summary>
        /// Gets or sets the ccdrr_date_start.
        /// </summary>
        [Column]
        public DateTime ccdrr_date_start { get; set; }

        /// <summary>
        /// Gets or sets the ccdrr_date_nag.
        /// </summary>
        [Column]
        public DateTime? ccdrr_date_nag { get; set; }

        /// <summary>
        /// Gets or sets the ccdrr_date_end.
        /// </summary>
        [Column]
        public DateTime? ccdrr_date_end { get; set; }

        /// <summary>
        /// Gets or sets the ccdrr_prev_ccdrstat_id.
        /// </summary>
        [Column]
        public int? ccdrr_prev_ccdrstat_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_review_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_document_review_comment]")]
    [PrimaryKey("ccdrc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_review_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdrc_id.
        /// </summary>
        [Column]
        public int ccdrc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdrc_ccdrr_id.
        /// </summary>
        [Column]
        public int ccdrc_ccdrr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdrc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccdrc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccdrc_comment.
        /// </summary>
        [Column]
        public string ccdrc_comment { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_review_status] table.
    /// </summary>
    [TableName("[dbo].[cc_document_review_status]")]
    [PrimaryKey("ccdrstat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_review_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdrstat_id.
        /// </summary>
        [Column]
        public int ccdrstat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdrstat_name.
        /// </summary>
        [Column]
        public string ccdrstat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_document_reviewer]")]
    [PrimaryKey("ccdr_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdr_id.
        /// </summary>
        [Column]
        public int ccdr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdr_ccd_id.
        /// </summary>
        [Column]
        public int ccdr_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdr_u_id.
        /// </summary>
        [Column]
        public int ccdr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdr_order.
        /// </summary>
        [Column]
        public int ccdr_order { get; set; }

        /// <summary>
        /// Gets or sets the ccdr_signature_step.
        /// </summary>
        [Column]
        public bool ccdr_signature_step { get; set; }

        /// <summary>
        /// Gets or sets the ccdr_isproxyuser.
        /// </summary>
        [Column]
        public bool? ccdr_isproxyuser { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_signatory] table.
    /// </summary>
    [TableName("[dbo].[cc_document_signatory]")]
    [PrimaryKey("ccdsg_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_signatoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdsg_id.
        /// </summary>
        [Column]
        public int ccdsg_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdsg_ccd_id.
        /// </summary>
        [Column]
        public int ccdsg_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdsg_u_id.
        /// </summary>
        [Column]
        public int ccdsg_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdsg_start_date.
        /// </summary>
        [Column]
        public DateTime? ccdsg_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccdsg_end_date.
        /// </summary>
        [Column]
        public DateTime? ccdsg_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccdsg_order.
        /// </summary>
        [Column]
        public int ccdsg_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_signatory_other] table.
    /// </summary>
    [TableName("[dbo].[cc_document_signatory_other]")]
    [PrimaryKey("ccdso_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_signatory_otherRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdso_id.
        /// </summary>
        [Column]
        public int ccdso_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdso_ccd_id.
        /// </summary>
        [Column]
        public int ccdso_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdso_name.
        /// </summary>
        [Column]
        public string ccdso_name { get; set; }

        /// <summary>
        /// Gets or sets the ccdso_email.
        /// </summary>
        [Column]
        public string ccdso_email { get; set; }

        /// <summary>
        /// Gets or sets the ccdso_start_date.
        /// </summary>
        [Column]
        public DateTime? ccdso_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccdso_end_date.
        /// </summary>
        [Column]
        public DateTime? ccdso_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccdso_order.
        /// </summary>
        [Column]
        public int ccdso_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_site] table.
    /// </summary>
    [TableName("[dbo].[cc_document_site]")]
    [PrimaryKey("ccds_ccd_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccds_ccd_id.
        /// </summary>
        [Column]
        public int ccds_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccds_s_id.
        /// </summary>
        [Column]
        public int ccds_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_sop] table.
    /// </summary>
    [TableName("[dbo].[cc_document_sop]")]
    [PrimaryKey("ccdsop_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_sopRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdsop_id.
        /// </summary>
        [Column]
        public int ccdsop_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdsop_ccd_id.
        /// </summary>
        [Column]
        public int ccdsop_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdsop_v_id.
        /// </summary>
        [Column]
        public int ccdsop_v_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdsop_vt_id.
        /// </summary>
        [Column]
        public int ccdsop_vt_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_source] table.
    /// </summary>
    [TableName("[dbo].[cc_document_source]")]
    [PrimaryKey("ccdsrc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdsrc_id.
        /// </summary>
        [Column]
        public int ccdsrc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdsrc_name.
        /// </summary>
        [Column]
        public string ccdsrc_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_document_status] table.
    /// </summary>
    [TableName("[dbo].[cc_document_status]")]
    [PrimaryKey("ccdstat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_document_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdstat_id.
        /// </summary>
        [Column]
        public int ccdstat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdstat_name.
        /// </summary>
        [Column]
        public string ccdstat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_file_summary_field] table.
    /// </summary>
    [TableName("[dbo].[cc_file_summary_field]")]
    [PrimaryKey("ccfsf_id")]
    [ExplicitColumns]
    public partial class cc_file_summary_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccfsf_id.
        /// </summary>
        [Column]
        public int ccfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfsf_ui_name.
        /// </summary>
        [Column]
        public string ccfsf_ui_name { get; set; }

        /// <summary>
        /// Gets or sets the ccfsf_lab_id.
        /// </summary>
        [Column]
        public int ccfsf_lab_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfsf_las_id.
        /// </summary>
        [Column]
        public int ccfsf_las_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfsf_sort.
        /// </summary>
        [Column]
        public int ccfsf_sort { get; set; }

        /// <summary>
        /// Gets or sets the ccfsf_unpvt_name.
        /// </summary>
        [Column]
        public string ccfsf_unpvt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_initiator_update_type] table.
    /// </summary>
    [TableName("[dbo].[cc_initiator_update_type]")]
    [PrimaryKey("cciut_id")]
    [ExplicitColumns]
    public partial class cc_initiator_update_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cciut_id.
        /// </summary>
        [Column]
        public int cciut_id { get; set; }

        /// <summary>
        /// Gets or sets the cciut_name.
        /// </summary>
        [Column]
        public string cciut_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_notification] table.
    /// </summary>
    [TableName("[dbo].[cc_notification]")]
    [PrimaryKey("ccn_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_notificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccn_id.
        /// </summary>
        [Column]
        public int ccn_id { get; set; }

        /// <summary>
        /// Gets or sets the ccn_name.
        /// </summary>
        [Column]
        public string ccn_name { get; set; }

        /// <summary>
        /// Gets or sets the ccn_o_id.
        /// </summary>
        [Column]
        public int ccn_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ccn_template.
        /// </summary>
        [Column]
        public string ccn_template { get; set; }

        /// <summary>
        /// Gets or sets the ccn_app_id.
        /// </summary>
        [Column]
        public int? ccn_app_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_option] table.
    /// </summary>
    [TableName("[dbo].[cc_option]")]
    [PrimaryKey("cco_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_optionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cco_o_id.
        /// </summary>
        [Column]
        public int cco_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cco_all_review_status.
        /// </summary>
        [Column]
        public int cco_all_review_status { get; set; }

        /// <summary>
        /// Gets or sets the cco_show_email.
        /// </summary>
        [Column]
        public int cco_show_email { get; set; }

        /// <summary>
        /// Gets or sets the cco_send_originator_nag.
        /// </summary>
        [Column]
        public int cco_send_originator_nag { get; set; }

        /// <summary>
        /// Gets or sets the cco_new_recipient.
        /// </summary>
        [Column]
        public string cco_new_recipient { get; set; }

        /// <summary>
        /// Gets or sets the cco_originator_list.
        /// </summary>
        [Column]
        public string cco_originator_list { get; set; }

        /// <summary>
        /// Gets or sets the cco_requestor_ccdat_id.
        /// </summary>
        [Column]
        public int cco_requestor_ccdat_id { get; set; }

        /// <summary>
        /// Gets or sets the cco_min_role_required_to_change_status.
        /// </summary>
        [Column]
        public int cco_min_role_required_to_change_status { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_out_of_office_rule] table.
    /// </summary>
    [TableName("[dbo].[cc_out_of_office_rule]")]
    [PrimaryKey("ccooor_id")]
    [ExplicitColumns]
    public partial class cc_out_of_office_ruleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccooor_id.
        /// </summary>
        [Column]
        public int ccooor_id { get; set; }

        /// <summary>
        /// Gets or sets the ccooor_u_id.
        /// </summary>
        [Column]
        public int ccooor_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccooor_startdate.
        /// </summary>
        [Column]
        public DateTime ccooor_startdate { get; set; }

        /// <summary>
        /// Gets or sets the ccooor_enddate.
        /// </summary>
        [Column]
        public DateTime? ccooor_enddate { get; set; }

        /// <summary>
        /// Gets or sets the ccooor_ooo_message.
        /// </summary>
        [Column]
        public string ccooor_ooo_message { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process] table.
    /// </summary>
    [TableName("[dbo].[cc_process]")]
    [PrimaryKey("ccp_id")]
    [ExplicitColumns]
    public partial class cc_processRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccp_id.
        /// </summary>
        [Column]
        public int ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccp_name.
        /// </summary>
        [Column]
        public string ccp_name { get; set; }

        /// <summary>
        /// Gets or sets the ccp_status.
        /// </summary>
        [Column]
        public int ccp_status { get; set; }

        /// <summary>
        /// Gets or sets the ccp_ot_id.
        /// </summary>
        [Column]
        public int? ccp_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ccp_created_date.
        /// </summary>
        [Column]
        public DateTime ccp_created_date { get; set; }

        /// <summary>
        /// Gets or sets the ccp_created_u_id.
        /// </summary>
        [Column]
        public int ccp_created_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccp_modified_date.
        /// </summary>
        [Column]
        public DateTime ccp_modified_date { get; set; }

        /// <summary>
        /// Gets or sets the ccp_modified_u_id.
        /// </summary>
        [Column]
        public int ccp_modified_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccp_can_add_vendor.
        /// </summary>
        [Column]
        public bool ccp_can_add_vendor { get; set; }

        /// <summary>
        /// Gets or sets the ccp_start_option.
        /// </summary>
        [Column]
        public int? ccp_start_option { get; set; }

        /// <summary>
        /// Gets or sets the ccp_is_clone.
        /// </summary>
        [Column]
        public bool ccp_is_clone { get; set; }

        /// <summary>
        /// Gets or sets the ccp_clone_source.
        /// </summary>
        [Column]
        public int? ccp_clone_source { get; set; }

        /// <summary>
        /// Gets or sets the ccp_default.
        /// </summary>
        [Column]
        public bool ccp_default { get; set; }

        /// <summary>
        /// Gets or sets the ccp_ccatype_id.
        /// </summary>
        [Column]
        public int? ccp_ccatype_id { get; set; }

        /// <summary>
        /// Gets or sets the ccp_min_role_unprotect_template.
        /// </summary>
        [Column]
        public int ccp_min_role_unprotect_template { get; set; }

        /// <summary>
        /// Gets or sets the ccp_all_sites.
        /// </summary>
        [Column]
        public bool? ccp_all_sites { get; set; }

        /// <summary>
        /// Gets or sets the ccp_enable_role_manager.
        /// </summary>
        [Column]
        public bool ccp_enable_role_manager { get; set; }

        /// <summary>
        /// Gets or sets the ccp_enable_external_party_comm.
        /// </summary>
        [Column]
        public bool? ccp_enable_external_party_comm { get; set; }

        /// <summary>
        /// Gets or sets the ccp_enable_groups.
        /// </summary>
        [Column]
        public bool ccp_enable_groups { get; set; }

        /// <summary>
        /// Gets or sets the ccp_allow_po_access_to_workflow_maintenance.
        /// </summary>
        [Column]
        public bool ccp_allow_po_access_to_workflow_maintenance { get; set; }

        /// <summary>
        /// Gets or sets the ccp_auto_populate_subject.
        /// </summary>
        [Column]
        public bool ccp_auto_populate_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccp_can_reinitiate.
        /// </summary>
        [Column]
        public bool ccp_can_reinitiate { get; set; }

        /// <summary>
        /// Gets or sets the ccp_enable_effective_date_email_sched.
        /// </summary>
        [Column]
        public bool ccp_enable_effective_date_email_sched { get; set; }

        /// <summary>
        /// Gets or sets the ccp_enable_expertrfp.
        /// </summary>
        [Column]
        public bool ccp_enable_expertrfp { get; set; }

        /// <summary>
        /// Gets or sets the ccp_expertrfp_required_phase.
        /// </summary>
        [Column]
        public string ccp_expertrfp_required_phase { get; set; }

        /// <summary>
        /// Gets or sets the ccp_require_npi.
        /// </summary>
        [Column]
        public bool ccp_require_npi { get; set; }

        /// <summary>
        /// Gets or sets the ccp_allow_po_access_to_workflow_history.
        /// </summary>
        [Column]
        public bool ccp_allow_po_access_to_workflow_history { get; set; }

        /// <summary>
        /// Gets or sets the ccp_allow_skipping_roles.
        /// </summary>
        [Column]
        public bool ccp_allow_skipping_roles { get; set; }

        /// <summary>
        /// Gets or sets the ccp_allow_explicit_access_initiation_cl.
        /// </summary>
        [Column]
        public bool ccp_allow_explicit_access_initiation_cl { get; set; }

        /// <summary>
        /// Gets or sets the ccp_allow_explicit_access_initiation_pm.
        /// </summary>
        [Column]
        public bool ccp_allow_explicit_access_initiation_pm { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_activation] table.
    /// </summary>
    [TableName("[dbo].[cc_process_activation]")]
    [PrimaryKey("ccpa_id")]
    [ExplicitColumns]
    public partial class cc_process_activationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpa_id.
        /// </summary>
        [Column]
        public int ccpa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_ccp_id.
        /// </summary>
        [Column]
        public int ccpa_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_name.
        /// </summary>
        [Column]
        public string ccpa_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpa_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_v_id.
        /// </summary>
        [Column]
        public int? ccpa_v_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_v_id_readonly.
        /// </summary>
        [Column]
        public bool ccpa_v_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_e_id.
        /// </summary>
        [Column]
        public int? ccpa_e_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_e_id_readonly.
        /// </summary>
        [Column]
        public bool ccpa_e_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_od_id.
        /// </summary>
        [Column]
        public int? ccpa_od_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_od_id_readonly.
        /// </summary>
        [Column]
        public bool ccpa_od_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_primary_u_id.
        /// </summary>
        [Column]
        public int? ccpa_primary_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_primary_u_id_readonly.
        /// </summary>
        [Column]
        public bool ccpa_primary_u_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_secondary_u_id.
        /// </summary>
        [Column]
        public int? ccpa_secondary_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_secondary_u_id_readonly.
        /// </summary>
        [Column]
        public bool ccpa_secondary_u_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_baa_visible.
        /// </summary>
        [Column]
        public bool ccpa_baa_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_baa_required.
        /// </summary>
        [Column]
        public bool ccpa_baa_required { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_coi_visible.
        /// </summary>
        [Column]
        public bool ccpa_coi_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_coi_required.
        /// </summary>
        [Column]
        public bool ccpa_coi_required { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_attachments_visible.
        /// </summary>
        [Column]
        public bool ccpa_attachments_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_attachments_required.
        /// </summary>
        [Column]
        public bool ccpa_attachments_required { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_attachments_default.
        /// </summary>
        [Column]
        public string ccpa_attachments_default { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_s_id_readonly.
        /// </summary>
        [Column]
        public bool ccpa_s_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_owner_ort_id.
        /// </summary>
        [Column]
        public int? ccpa_owner_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpa_enable_external_party_comm.
        /// </summary>
        [Column]
        public bool? ccpa_enable_external_party_comm { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_activation_compliance_questions] table.
    /// </summary>
    [TableName("[dbo].[cc_process_activation_compliance_questions]")]
    [PrimaryKey("ccpacq_id")]
    [ExplicitColumns]
    public partial class cc_process_activation_compliance_questionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpacq_id.
        /// </summary>
        [Column]
        public int ccpacq_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpacq_ccpa_id.
        /// </summary>
        [Column]
        public int ccpacq_ccpa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpacq_cq_id.
        /// </summary>
        [Column]
        public int ccpacq_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpacq_visible.
        /// </summary>
        [Column]
        public bool ccpacq_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccpacq_required.
        /// </summary>
        [Column]
        public bool ccpacq_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_activation_notification_target] table.
    /// </summary>
    [TableName("[dbo].[cc_process_activation_notification_target]")]
    [PrimaryKey("ccpant_id")]
    [ExplicitColumns]
    public partial class cc_process_activation_notification_targetRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpant_id.
        /// </summary>
        [Column]
        public int ccpant_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpant_ccpa_id.
        /// </summary>
        [Column]
        public int ccpant_ccpa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpant_target_id.
        /// </summary>
        [Column]
        public int ccpant_target_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_activation_optional_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_activation_optional_fields]")]
    [PrimaryKey("ccpaof_id")]
    [ExplicitColumns]
    public partial class cc_process_activation_optional_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpaof_id.
        /// </summary>
        [Column]
        public int ccpaof_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaof_ccpa_id.
        /// </summary>
        [Column]
        public int ccpaof_ccpa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaof_field_type.
        /// </summary>
        [Column]
        public int ccpaof_field_type { get; set; }

        /// <summary>
        /// Gets or sets the ccpaof_required.
        /// </summary>
        [Column]
        public bool ccpaof_required { get; set; }

        /// <summary>
        /// Gets or sets the ccpaof_visible.
        /// </summary>
        [Column]
        public bool ccpaof_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccpaof_vendor_profile_field.
        /// </summary>
        [Column]
        public bool ccpaof_vendor_profile_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_activation_site] table.
    /// </summary>
    [TableName("[dbo].[cc_process_activation_site]")]
    [PrimaryKey("ccpas_id")]
    [ExplicitColumns]
    public partial class cc_process_activation_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpas_id.
        /// </summary>
        [Column]
        public int ccpas_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpas_ccpa_id.
        /// </summary>
        [Column]
        public int ccpas_ccpa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpas_s_id.
        /// </summary>
        [Column]
        public int ccpas_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_activation_workflow] table.
    /// </summary>
    [TableName("[dbo].[cc_process_activation_workflow]")]
    [PrimaryKey("ccpaw_id")]
    [ExplicitColumns]
    public partial class cc_process_activation_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpaw_id.
        /// </summary>
        [Column]
        public int ccpaw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_ccpw_id.
        /// </summary>
        [Column]
        public int ccpaw_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_ccpa_id.
        /// </summary>
        [Column]
        public int ccpaw_ccpa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_owner_u_id.
        /// </summary>
        [Column]
        public int ccpaw_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpaw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpaw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_ccpps_id.
        /// </summary>
        [Column]
        public int ccpaw_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_ccd_id.
        /// </summary>
        [Column]
        public int? ccpaw_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_v_id.
        /// </summary>
        [Column]
        public int? ccpaw_v_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_ort_id.
        /// </summary>
        [Column]
        public int? ccpaw_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_save_attachment.
        /// </summary>
        [Column]
        public bool? ccpaw_save_attachment { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_save_attachment_comment.
        /// </summary>
        [Column]
        public string ccpaw_save_attachment_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_save_attachment_permissions.
        /// </summary>
        [Column]
        public string ccpaw_save_attachment_permissions { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_save_attachment_category.
        /// </summary>
        [Column]
        public int? ccpaw_save_attachment_category { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_save_attachment_subject.
        /// </summary>
        [Column]
        public string ccpaw_save_attachment_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_proxied_u_id.
        /// </summary>
        [Column]
        public int? ccpaw_proxied_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_proxied_ort_id.
        /// </summary>
        [Column]
        public int? ccpaw_proxied_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_proxy_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpaw_proxy_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpaw_proxy_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpaw_proxy_end_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_activation_workflow_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_activation_workflow_attachment]")]
    [PrimaryKey("ccpawa_id")]
    [ExplicitColumns]
    public partial class cc_process_activation_workflow_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpawa_id.
        /// </summary>
        [Column]
        public int ccpawa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_ccpaw_id.
        /// </summary>
        [Column]
        public int ccpawa_ccpaw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_doc_path.
        /// </summary>
        [Column]
        public string ccpawa_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_subject.
        /// </summary>
        [Column]
        public string ccpawa_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_cnt_id.
        /// </summary>
        [Column]
        public int? ccpawa_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_position.
        /// </summary>
        [Column]
        public int ccpawa_position { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_comment.
        /// </summary>
        [Column]
        public string ccpawa_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_permissions.
        /// </summary>
        [Column]
        public string ccpawa_permissions { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_type_id.
        /// </summary>
        [Column]
        public int? ccpawa_type_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_effective_date.
        /// </summary>
        [Column]
        public DateTime? ccpawa_effective_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_expiration_date.
        /// </summary>
        [Column]
        public DateTime? ccpawa_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpawa_selected.
        /// </summary>
        [Column]
        public bool ccpawa_selected { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_activation_workflow_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_activation_workflow_comment]")]
    [PrimaryKey("ccpawc_id")]
    [ExplicitColumns]
    public partial class cc_process_activation_workflow_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpawc_id.
        /// </summary>
        [Column]
        public int ccpawc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpawc_ccpaw_id.
        /// </summary>
        [Column]
        public int ccpawc_ccpaw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpawc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccpawc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccpawc_comment.
        /// </summary>
        [Column]
        public string ccpawc_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpawc_created_by.
        /// </summary>
        [Column]
        public string ccpawc_created_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpawc_ccpwc_id.
        /// </summary>
        [Column]
        public int? ccpawc_ccpwc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document]")]
    [PrimaryKey("ccpd_id")]
    [ExplicitColumns]
    public partial class cc_process_documentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpd_id.
        /// </summary>
        [Column]
        public int ccpd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_ccp_id.
        /// </summary>
        [Column]
        public int ccpd_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_name.
        /// </summary>
        [Column]
        public string ccpd_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_order.
        /// </summary>
        [Column]
        public int ccpd_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpd_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_ccpdt_id.
        /// </summary>
        [Column]
        public int? ccpd_ccpdt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_ccdeft_id.
        /// </summary>
        [Column]
        public int? ccpd_ccdeft_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_default_ccdsrc_id.
        /// </summary>
        [Column]
        public int? ccpd_default_ccdsrc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_owner_ort_id.
        /// </summary>
        [Column]
        public int? ccpd_owner_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_enable_external_party_comm.
        /// </summary>
        [Column]
        public bool? ccpd_enable_external_party_comm { get; set; }

        /// <summary>
        /// Gets or sets the ccpd_auto_populate_tagged_fields.
        /// </summary>
        [Column]
        public bool ccpd_auto_populate_tagged_fields { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_notification_target] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_notification_target]")]
    [PrimaryKey("ccpdnt_id")]
    [ExplicitColumns]
    public partial class cc_process_document_notification_targetRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdnt_id.
        /// </summary>
        [Column]
        public int ccpdnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdnt_ccpd_id.
        /// </summary>
        [Column]
        public int ccpdnt_ccpd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdnt_target_id.
        /// </summary>
        [Column]
        public int ccpdnt_target_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_review] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_review]")]
    [PrimaryKey("ccpdr_id")]
    [ExplicitColumns]
    public partial class cc_process_document_reviewRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdr_id.
        /// </summary>
        [Column]
        public int ccpdr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_ccpd_id.
        /// </summary>
        [Column]
        public int ccpdr_ccpd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_name.
        /// </summary>
        [Column]
        public string ccpdr_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpdr_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_ccrt_id.
        /// </summary>
        [Column]
        public int? ccpdr_ccrt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_cctt_id.
        /// </summary>
        [Column]
        public int? ccpdr_cctt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_cctt_delay.
        /// </summary>
        [Column]
        public int? ccpdr_cctt_delay { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_require_owner_approval.
        /// </summary>
        [Column]
        public bool? ccpdr_require_owner_approval { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_owner_ort_id.
        /// </summary>
        [Column]
        public int? ccpdr_owner_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_allow_owner_edit_remove_approvers.
        /// </summary>
        [Column]
        public bool? ccpdr_allow_owner_edit_remove_approvers { get; set; }

        /// <summary>
        /// Gets or sets the ccpdr_enable_external_party_comm.
        /// </summary>
        [Column]
        public bool? ccpdr_enable_external_party_comm { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_review_notification_target] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_review_notification_target]")]
    [PrimaryKey("ccpdrnt_id")]
    [ExplicitColumns]
    public partial class cc_process_document_review_notification_targetRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdrnt_id.
        /// </summary>
        [Column]
        public int ccpdrnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrnt_ccpdr_id.
        /// </summary>
        [Column]
        public int ccpdrnt_ccpdr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrnt_target_id.
        /// </summary>
        [Column]
        public int ccpdrnt_target_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_review_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_review_reviewer]")]
    [PrimaryKey("ccpdrr_id")]
    [ExplicitColumns]
    public partial class cc_process_document_review_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdrr_id.
        /// </summary>
        [Column]
        public int ccpdrr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrr_ccpdr_id.
        /// </summary>
        [Column]
        public int ccpdrr_ccpdr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrr_u_id.
        /// </summary>
        [Column]
        public int? ccpdrr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrr_order.
        /// </summary>
        [Column]
        public int ccpdrr_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrr_is_approver.
        /// </summary>
        [Column]
        public bool ccpdrr_is_approver { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrr_ort_id.
        /// </summary>
        [Column]
        public int? ccpdrr_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrr_ccpug_id.
        /// </summary>
        [Column]
        public int? ccpdrr_ccpug_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrr_ccpug_order.
        /// </summary>
        [Column]
        public int ccpdrr_ccpug_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_review_workflow] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_review_workflow]")]
    [PrimaryKey("ccpdrw_id")]
    [ExplicitColumns]
    public partial class cc_process_document_review_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdrw_id.
        /// </summary>
        [Column]
        public int ccpdrw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_ccpdw_id.
        /// </summary>
        [Column]
        public int ccpdrw_ccpdw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_owner_u_id.
        /// </summary>
        [Column]
        public int ccpdrw_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_ccpps_id.
        /// </summary>
        [Column]
        public int ccpdrw_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_doc_path.
        /// </summary>
        [Column]
        public string ccpdrw_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_ccpdr_id.
        /// </summary>
        [Column]
        public int ccpdrw_ccpdr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_revive_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrw_revive_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_on_reject_ccpps_id.
        /// </summary>
        [Column]
        public int? ccpdrw_on_reject_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_effective_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrw_effective_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_expiration_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrw_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_ort_id.
        /// </summary>
        [Column]
        public int? ccpdrw_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_proxied_u_id.
        /// </summary>
        [Column]
        public int? ccpdrw_proxied_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_proxied_ort_id.
        /// </summary>
        [Column]
        public int? ccpdrw_proxied_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_proxy_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrw_proxy_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrw_proxy_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrw_proxy_end_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_review_workflow_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_review_workflow_comment]")]
    [PrimaryKey("ccpdrwc_id")]
    [ExplicitColumns]
    public partial class cc_process_document_review_workflow_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdrwc_id.
        /// </summary>
        [Column]
        public int ccpdrwc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwc_ccpdrw_id.
        /// </summary>
        [Column]
        public int ccpdrwc_ccpdrw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccpdrwc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwc_comment.
        /// </summary>
        [Column]
        public string ccpdrwc_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwc_created_by.
        /// </summary>
        [Column]
        public string ccpdrwc_created_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwc_ccpdrwr_id.
        /// </summary>
        [Column]
        public int? ccpdrwc_ccpdrwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwc_ccpwc_id.
        /// </summary>
        [Column]
        public int? ccpdrwc_ccpwc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_review_workflow_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_review_workflow_reviewer]")]
    [PrimaryKey("ccpdrwr_id")]
    [ExplicitColumns]
    public partial class cc_process_document_review_workflow_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdrwr_id.
        /// </summary>
        [Column]
        public int ccpdrwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_ccpdrw_id.
        /// </summary>
        [Column]
        public int ccpdrwr_ccpdrw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_ccpprs_id.
        /// </summary>
        [Column]
        public int ccpdrwr_ccpprs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_u_id.
        /// </summary>
        [Column]
        public int ccpdrwr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrwr_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpdrwr_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_order.
        /// </summary>
        [Column]
        public int ccpdrwr_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_added_in_workflow.
        /// </summary>
        [Column]
        public bool ccpdrwr_added_in_workflow { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_is_approver.
        /// </summary>
        [Column]
        public bool ccpdrwr_is_approver { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_ort_id.
        /// </summary>
        [Column]
        public int? ccpdrwr_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_ccpwug_id.
        /// </summary>
        [Column]
        public int? ccpdrwr_ccpwug_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwr_ccpwug_order.
        /// </summary>
        [Column]
        public int ccpdrwr_ccpwug_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_review_workflow_reviewer_doc_version] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_review_workflow_reviewer_doc_version]")]
    [PrimaryKey("ccpdrwrdv_id")]
    [ExplicitColumns]
    public partial class cc_process_document_review_workflow_reviewer_doc_versionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdrwrdv_id.
        /// </summary>
        [Column]
        public int ccpdrwrdv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwrdv_ccpdrwr_id.
        /// </summary>
        [Column]
        public int ccpdrwrdv_ccpdrwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwrdv_doc_path.
        /// </summary>
        [Column]
        public string ccpdrwrdv_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwrdv_order.
        /// </summary>
        [Column]
        public int ccpdrwrdv_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwrdv_submitted.
        /// </summary>
        [Column]
        public bool ccpdrwrdv_submitted { get; set; }

        /// <summary>
        /// Gets or sets the ccpdrwrdv_timestamp.
        /// </summary>
        [Column]
        public DateTime ccpdrwrdv_timestamp { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_signatory] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_signatory]")]
    [PrimaryKey("ccpds_id")]
    [ExplicitColumns]
    public partial class cc_process_document_signatoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpds_id.
        /// </summary>
        [Column]
        public int ccpds_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_ccpd_id.
        /// </summary>
        [Column]
        public int? ccpds_ccpd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_name.
        /// </summary>
        [Column]
        public string ccpds_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpds_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_signature_wet.
        /// </summary>
        [Column]
        public bool ccpds_signature_wet { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_signature_electronic.
        /// </summary>
        [Column]
        public bool ccpds_signature_electronic { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_signature_wet_with_routing.
        /// </summary>
        [Column]
        public bool ccpds_signature_wet_with_routing { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_require_owner_approval.
        /// </summary>
        [Column]
        public bool? ccpds_require_owner_approval { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_reject_behavior.
        /// </summary>
        [Column]
        public int ccpds_reject_behavior { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_owner_ort_id.
        /// </summary>
        [Column]
        public int? ccpds_owner_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_allow_owner_edit_remove_approvers.
        /// </summary>
        [Column]
        public bool? ccpds_allow_owner_edit_remove_approvers { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_enable_external_party_comm.
        /// </summary>
        [Column]
        public bool? ccpds_enable_external_party_comm { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_allow_external_party.
        /// </summary>
        [Column]
        public bool? ccpds_allow_external_party { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_digital_order_sequential.
        /// </summary>
        [Column]
        public bool? ccpds_digital_order_sequential { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_enable_signed_document_recipients.
        /// </summary>
        [Column]
        public bool? ccpds_enable_signed_document_recipients { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_phase_action_deadline_type.
        /// </summary>
        [Column]
        public int ccpds_phase_action_deadline_type { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_phase_action_deadline_days.
        /// </summary>
        [Column]
        public short ccpds_phase_action_deadline_days { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_signatory_notification_target] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_signatory_notification_target]")]
    [PrimaryKey("ccpdsnt_id")]
    [ExplicitColumns]
    public partial class cc_process_document_signatory_notification_targetRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdsnt_id.
        /// </summary>
        [Column]
        public int ccpdsnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsnt_ccpds_id.
        /// </summary>
        [Column]
        public int ccpdsnt_ccpds_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsnt_target_id.
        /// </summary>
        [Column]
        public int ccpdsnt_target_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_signatory_signatory] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_signatory_signatory]")]
    [PrimaryKey("ccpdss_id")]
    [ExplicitColumns]
    public partial class cc_process_document_signatory_signatoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdss_id.
        /// </summary>
        [Column]
        public int ccpdss_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdss_ccpds_id.
        /// </summary>
        [Column]
        public int ccpdss_ccpds_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdss_u_id.
        /// </summary>
        [Column]
        public int? ccpdss_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdss_order.
        /// </summary>
        [Column]
        public int ccpdss_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpdss_ort_id.
        /// </summary>
        [Column]
        public int? ccpdss_ort_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_signatory_workflow] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_signatory_workflow]")]
    [PrimaryKey("ccpdsw_id")]
    [ExplicitColumns]
    public partial class cc_process_document_signatory_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdsw_id.
        /// </summary>
        [Column]
        public int ccpdsw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_ccpdw_id.
        /// </summary>
        [Column]
        public int? ccpdsw_ccpdw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_owner_u_id.
        /// </summary>
        [Column]
        public int ccpdsw_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_ccpps_id.
        /// </summary>
        [Column]
        public int ccpdsw_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_doc_path.
        /// </summary>
        [Column]
        public string ccpdsw_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_ccpds_id.
        /// </summary>
        [Column]
        public int ccpdsw_ccpds_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_revive_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsw_revive_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_on_reject_ccpps_id.
        /// </summary>
        [Column]
        public int? ccpdsw_on_reject_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_effective_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsw_effective_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_expiration_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsw_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_ort_id.
        /// </summary>
        [Column]
        public int? ccpdsw_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_proxied_u_id.
        /// </summary>
        [Column]
        public int? ccpdsw_proxied_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_proxied_ort_id.
        /// </summary>
        [Column]
        public int? ccpdsw_proxied_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_proxy_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsw_proxy_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_proxy_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsw_proxy_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsw_enable_signed_document_recipients.
        /// </summary>
        [Column]
        public bool? ccpdsw_enable_signed_document_recipients { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_signatory_workflow_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_signatory_workflow_comment]")]
    [PrimaryKey("ccpdswc_id")]
    [ExplicitColumns]
    public partial class cc_process_document_signatory_workflow_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdswc_id.
        /// </summary>
        [Column]
        public int ccpdswc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdswc_ccpdsw_id.
        /// </summary>
        [Column]
        public int ccpdswc_ccpdsw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdswc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccpdswc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccpdswc_comment.
        /// </summary>
        [Column]
        public string ccpdswc_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpdswc_created_by.
        /// </summary>
        [Column]
        public string ccpdswc_created_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpdswc_ccpdsws_id.
        /// </summary>
        [Column]
        public int? ccpdswc_ccpdsws_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdswc_pmds_id.
        /// </summary>
        [Column]
        public int? ccpdswc_pmds_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdswc_ccpwc_id.
        /// </summary>
        [Column]
        public int? ccpdswc_ccpwc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_signatory_workflow_signatory] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_signatory_workflow_signatory]")]
    [PrimaryKey("ccpdsws_id")]
    [ExplicitColumns]
    public partial class cc_process_document_signatory_workflow_signatoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdsws_id.
        /// </summary>
        [Column]
        public int ccpdsws_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_ccpdsw_id.
        /// </summary>
        [Column]
        public int ccpdsws_ccpdsw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_ccpprs_id.
        /// </summary>
        [Column]
        public int ccpdsws_ccpprs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_u_id.
        /// </summary>
        [Column]
        public int ccpdsws_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_doc_path.
        /// </summary>
        [Column]
        public string ccpdsws_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsws_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpdsws_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_order.
        /// </summary>
        [Column]
        public int ccpdsws_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_signature_type.
        /// </summary>
        [Column]
        public int ccpdsws_signature_type { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_added_in_workflow.
        /// </summary>
        [Column]
        public bool ccpdsws_added_in_workflow { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsws_ort_id.
        /// </summary>
        [Column]
        public int? ccpdsws_ort_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_simultaneous_phase] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_simultaneous_phase]")]
    [PrimaryKey("ccpdsp_source_ccpd_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_document_simultaneous_phaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdsp_source_ccpd_id.
        /// </summary>
        [Column]
        public int ccpdsp_source_ccpd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdsp_target_ccpd_id.
        /// </summary>
        [Column]
        public int ccpdsp_target_ccpd_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_source] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_source]")]
    [PrimaryKey("ccpds_id")]
    [ExplicitColumns]
    public partial class cc_process_document_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpds_id.
        /// </summary>
        [Column]
        public int ccpds_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_ccpd_id.
        /// </summary>
        [Column]
        public int ccpds_ccpd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpds_ccdsrc_id.
        /// </summary>
        [Column]
        public int ccpds_ccdsrc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_workflow] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_workflow]")]
    [PrimaryKey("ccpdw_id")]
    [ExplicitColumns]
    public partial class cc_process_document_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdw_id.
        /// </summary>
        [Column]
        public int ccpdw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_ccpw_id.
        /// </summary>
        [Column]
        public int ccpdw_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_ccpd_id.
        /// </summary>
        [Column]
        public int ccpdw_ccpd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_ccpdt_id.
        /// </summary>
        [Column]
        public int? ccpdw_ccpdt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_ccpps_id.
        /// </summary>
        [Column]
        public int ccpdw_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpdw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpdw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpdw_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_default_ccdsrc_id.
        /// </summary>
        [Column]
        public int? ccpdw_default_ccdsrc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_ccdeft_id.
        /// </summary>
        [Column]
        public int? ccpdw_ccdeft_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_doc_path.
        /// </summary>
        [Column]
        public string ccpdw_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_ccdsrc_id.
        /// </summary>
        [Column]
        public int? ccpdw_ccdsrc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_effective_date.
        /// </summary>
        [Column]
        public DateTime? ccpdw_effective_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_expiration_date.
        /// </summary>
        [Column]
        public DateTime? ccpdw_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_template_doc_path.
        /// </summary>
        [Column]
        public string ccpdw_template_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_template_tags.
        /// </summary>
        [Column]
        public string ccpdw_template_tags { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_ort_id.
        /// </summary>
        [Column]
        public int? ccpdw_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_proxied_u_id.
        /// </summary>
        [Column]
        public int? ccpdw_proxied_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_proxied_ort_id.
        /// </summary>
        [Column]
        public int? ccpdw_proxied_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_proxy_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpdw_proxy_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_proxy_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpdw_proxy_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpdw_ccdsrc_item_id.
        /// </summary>
        [Column]
        public int? ccpdw_ccdsrc_item_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_workflow_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_workflow_comment]")]
    [PrimaryKey("ccpdwc_id")]
    [ExplicitColumns]
    public partial class cc_process_document_workflow_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdwc_id.
        /// </summary>
        [Column]
        public int ccpdwc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdwc_ccpdw_id.
        /// </summary>
        [Column]
        public int ccpdwc_ccpdw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdwc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccpdwc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccpdwc_comment.
        /// </summary>
        [Column]
        public string ccpdwc_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpdwc_created_by.
        /// </summary>
        [Column]
        public string ccpdwc_created_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpdwc_ccpwc_id.
        /// </summary>
        [Column]
        public int? ccpdwc_ccpwc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_document_workflow_source] table.
    /// </summary>
    [TableName("[dbo].[cc_process_document_workflow_source]")]
    [PrimaryKey("ccpdws_id")]
    [ExplicitColumns]
    public partial class cc_process_document_workflow_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpdws_id.
        /// </summary>
        [Column]
        public int ccpdws_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdws_ccpdw_id.
        /// </summary>
        [Column]
        public int ccpdws_ccpdw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpdws_ccdsrc_id.
        /// </summary>
        [Column]
        public int ccpdws_ccdsrc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_expertrfp_permissions] table.
    /// </summary>
    [TableName("[dbo].[cc_process_expertrfp_permissions]")]
    [PrimaryKey("ccperfpp_id")]
    [ExplicitColumns]
    public partial class cc_process_expertrfp_permissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccperfpp_id.
        /// </summary>
        [Column]
        public int ccperfpp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccperfpp_ccp_id.
        /// </summary>
        [Column]
        public int ccperfpp_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccperfpp_allowed.
        /// </summary>
        [Column]
        public int ccperfpp_allowed { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form]")]
    [PrimaryKey("ccpf_id")]
    [ExplicitColumns]
    public partial class cc_process_formRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpf_id.
        /// </summary>
        [Column]
        public int ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_ccp_id.
        /// </summary>
        [Column]
        public int ccpf_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_name.
        /// </summary>
        [Column]
        public string ccpf_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_order.
        /// </summary>
        [Column]
        public int ccpf_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_ccrf_id.
        /// </summary>
        [Column]
        public int? ccpf_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_ccrt_id.
        /// </summary>
        [Column]
        public int? ccpf_ccrt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_cctt_id.
        /// </summary>
        [Column]
        public int? ccpf_cctt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_cctt_delay.
        /// </summary>
        [Column]
        public int? ccpf_cctt_delay { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpf_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_require_owner_approval.
        /// </summary>
        [Column]
        public bool? ccpf_require_owner_approval { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_owner_ort_id.
        /// </summary>
        [Column]
        public int? ccpf_owner_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_allow_owner_edit_remove_approvers.
        /// </summary>
        [Column]
        public bool? ccpf_allow_owner_edit_remove_approvers { get; set; }

        /// <summary>
        /// Gets or sets the ccpf_enable_external_party_comm.
        /// </summary>
        [Column]
        public bool? ccpf_enable_external_party_comm { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_notification_target] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_notification_target]")]
    [PrimaryKey("ccpfnt_id")]
    [ExplicitColumns]
    public partial class cc_process_form_notification_targetRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfnt_id.
        /// </summary>
        [Column]
        public int ccpfnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfnt_ccpf_id.
        /// </summary>
        [Column]
        public int ccpfnt_ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfnt_target_id.
        /// </summary>
        [Column]
        public int ccpfnt_target_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_reviewer]")]
    [PrimaryKey("ccpfr_id")]
    [ExplicitColumns]
    public partial class cc_process_form_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfr_id.
        /// </summary>
        [Column]
        public int ccpfr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfr_ccpf_id.
        /// </summary>
        [Column]
        public int ccpfr_ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfr_u_id.
        /// </summary>
        [Column]
        public int? ccpfr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfr_order.
        /// </summary>
        [Column]
        public int ccpfr_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpfr_is_approver.
        /// </summary>
        [Column]
        public bool ccpfr_is_approver { get; set; }

        /// <summary>
        /// Gets or sets the ccpfr_ort_id.
        /// </summary>
        [Column]
        public int? ccpfr_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfr_ccpug_id.
        /// </summary>
        [Column]
        public int? ccpfr_ccpug_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfr_ccpug_order.
        /// </summary>
        [Column]
        public int ccpfr_ccpug_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_reviewer_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_reviewer_custom_fields]")]
    [PrimaryKey("ccpfrcf_id")]
    [ExplicitColumns]
    public partial class cc_process_form_reviewer_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfrcf_id.
        /// </summary>
        [Column]
        public int ccpfrcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrcf_ccpfr_id.
        /// </summary>
        [Column]
        public int ccpfrcf_ccpfr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrcf_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpfrcf_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrcf_editable.
        /// </summary>
        [Column]
        public bool ccpfrcf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrcf_hidden.
        /// </summary>
        [Column]
        public bool ccpfrcf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrcf_required.
        /// </summary>
        [Column]
        public bool ccpfrcf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_reviewer_system_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_reviewer_system_fields]")]
    [PrimaryKey("ccpfrsf_id")]
    [ExplicitColumns]
    public partial class cc_process_form_reviewer_system_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfrsf_id.
        /// </summary>
        [Column]
        public int ccpfrsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrsf_ccpfr_id.
        /// </summary>
        [Column]
        public int ccpfrsf_ccpfr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrsf_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccpfrsf_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrsf_editable.
        /// </summary>
        [Column]
        public bool ccpfrsf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrsf_hidden.
        /// </summary>
        [Column]
        public bool ccpfrsf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpfrsf_required.
        /// </summary>
        [Column]
        public bool ccpfrsf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow]")]
    [PrimaryKey("ccpfw_id")]
    [ExplicitColumns]
    public partial class cc_process_form_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfw_id.
        /// </summary>
        [Column]
        public int ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_ccpw_id.
        /// </summary>
        [Column]
        public int ccpfw_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_ccpps_id.
        /// </summary>
        [Column]
        public int ccpfw_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpfw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpfw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_ccrf_id.
        /// </summary>
        [Column]
        public int ccpfw_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_ccpf_id.
        /// </summary>
        [Column]
        public int? ccpfw_ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpfw_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_revive_date.
        /// </summary>
        [Column]
        public DateTime? ccpfw_revive_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_on_reject_ccpps_id.
        /// </summary>
        [Column]
        public int? ccpfw_on_reject_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_url.
        /// </summary>
        [Column]
        public string ccpfw_url { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_ort_id.
        /// </summary>
        [Column]
        public int? ccpfw_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_proxied_u_id.
        /// </summary>
        [Column]
        public int? ccpfw_proxied_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_proxied_ort_id.
        /// </summary>
        [Column]
        public int? ccpfw_proxied_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_proxy_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpfw_proxy_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_proxy_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpfw_proxy_end_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow_action_triggers] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow_action_triggers]")]
    [PrimaryKey("ccpfwat_ccpfw_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_form_workflow_action_triggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfwat_ccpfw_id.
        /// </summary>
        [Column]
        public int ccpfwat_ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwat_ccat_id.
        /// </summary>
        [Column]
        public int ccpfwat_ccat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwat_activated.
        /// </summary>
        [Column]
        public bool ccpfwat_activated { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwat_u_id.
        /// </summary>
        [Column]
        public int? ccpfwat_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwat_activated_date.
        /// </summary>
        [Column]
        public DateTime? ccpfwat_activated_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwat_field_values.
        /// </summary>
        [Column]
        public string ccpfwat_field_values { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwat_instructions.
        /// </summary>
        [Column]
        public string ccpfwat_instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow_comment]")]
    [PrimaryKey("ccpfwc_id")]
    [ExplicitColumns]
    public partial class cc_process_form_workflow_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfwc_id.
        /// </summary>
        [Column]
        public int ccpfwc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwc_ccpfwr_id.
        /// </summary>
        [Column]
        public int? ccpfwc_ccpfwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccpfwc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwc_comment.
        /// </summary>
        [Column]
        public string ccpfwc_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwc_created_by.
        /// </summary>
        [Column]
        public string ccpfwc_created_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwc_ccpfw_id.
        /// </summary>
        [Column]
        public int? ccpfwc_ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwc_ccpwc_id.
        /// </summary>
        [Column]
        public int? ccpfwc_ccpwc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow_custom_field_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow_custom_field_attachment]")]
    [PrimaryKey("ccpfwcfa_id")]
    [ExplicitColumns]
    public partial class cc_process_form_workflow_custom_field_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfwcfa_id.
        /// </summary>
        [Column]
        public int ccpfwcfa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpfwcfa_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_ccpfw_id.
        /// </summary>
        [Column]
        public int ccpfwcfa_ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_url.
        /// </summary>
        [Column]
        public string ccpfwcfa_url { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_name.
        /// </summary>
        [Column]
        public string ccpfwcfa_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_add_user.
        /// </summary>
        [Column]
        public string ccpfwcfa_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_add_date.
        /// </summary>
        [Column]
        public DateTime ccpfwcfa_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_mod_user.
        /// </summary>
        [Column]
        public string ccpfwcfa_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_mod_date.
        /// </summary>
        [Column]
        public DateTime ccpfwcfa_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfa_attached_to_workflow.
        /// </summary>
        [Column]
        public bool ccpfwcfa_attached_to_workflow { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow_custom_field_values] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow_custom_field_values]")]
    [PrimaryKey("ccpfwcfv_id")]
    [ExplicitColumns]
    public partial class cc_process_form_workflow_custom_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfwcfv_id.
        /// </summary>
        [Column]
        public int ccpfwcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpfwcfv_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_mll_code.
        /// </summary>
        [Column]
        public string ccpfwcfv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_ccpfw_id.
        /// </summary>
        [Column]
        public int ccpfwcfv_ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_mlcfv_id.
        /// </summary>
        [Column]
        public int? ccpfwcfv_mlcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_numeric.
        /// </summary>
        [Column]
        public decimal? ccpfwcfv_numeric { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_date.
        /// </summary>
        [Column]
        public DateTime? ccpfwcfv_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_string.
        /// </summary>
        [Column]
        public string ccpfwcfv_string { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_modified_by.
        /// </summary>
        [Column]
        public int? ccpfwcfv_modified_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwcfv_imported.
        /// </summary>
        [Column]
        public bool? ccpfwcfv_imported { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow_reviewer]")]
    [PrimaryKey("ccpfwr_id")]
    [ExplicitColumns]
    public partial class cc_process_form_workflow_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfwr_id.
        /// </summary>
        [Column]
        public int ccpfwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_ccpfw_id.
        /// </summary>
        [Column]
        public int ccpfwr_ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpfwr_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpfwr_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_u_id.
        /// </summary>
        [Column]
        public int ccpfwr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_ccpprs_id.
        /// </summary>
        [Column]
        public int ccpfwr_ccpprs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_order.
        /// </summary>
        [Column]
        public int ccpfwr_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_added_in_workflow.
        /// </summary>
        [Column]
        public bool? ccpfwr_added_in_workflow { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_is_approver.
        /// </summary>
        [Column]
        public bool ccpfwr_is_approver { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_ort_id.
        /// </summary>
        [Column]
        public int? ccpfwr_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_ccpwug_id.
        /// </summary>
        [Column]
        public int? ccpfwr_ccpwug_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwr_ccpwug_order.
        /// </summary>
        [Column]
        public int ccpfwr_ccpwug_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow_reviewer_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow_reviewer_custom_fields]")]
    [PrimaryKey("ccpfwrcf_id")]
    [ExplicitColumns]
    public partial class cc_process_form_workflow_reviewer_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfwrcf_id.
        /// </summary>
        [Column]
        public int ccpfwrcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrcf_ccpfwr_id.
        /// </summary>
        [Column]
        public int ccpfwrcf_ccpfwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrcf_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpfwrcf_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrcf_editable.
        /// </summary>
        [Column]
        public bool ccpfwrcf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrcf_hidden.
        /// </summary>
        [Column]
        public bool ccpfwrcf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrcf_required.
        /// </summary>
        [Column]
        public bool ccpfwrcf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow_reviewer_system_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow_reviewer_system_fields]")]
    [PrimaryKey("ccpfwrsf_id")]
    [ExplicitColumns]
    public partial class cc_process_form_workflow_reviewer_system_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfwrsf_id.
        /// </summary>
        [Column]
        public int ccpfwrsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrsf_ccpfwr_id.
        /// </summary>
        [Column]
        public int ccpfwrsf_ccpfwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrsf_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccpfwrsf_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrsf_editable.
        /// </summary>
        [Column]
        public bool ccpfwrsf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrsf_hidden.
        /// </summary>
        [Column]
        public bool ccpfwrsf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwrsf_required.
        /// </summary>
        [Column]
        public bool ccpfwrsf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_form_workflow_system_field_values] table.
    /// </summary>
    [TableName("[dbo].[cc_process_form_workflow_system_field_values]")]
    [PrimaryKey("ccpfwsfv_id")]
    [ExplicitColumns]
    public partial class cc_process_form_workflow_system_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpfwsfv_id.
        /// </summary>
        [Column]
        public int ccpfwsfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccpfwsfv_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_mll_code.
        /// </summary>
        [Column]
        public string ccpfwsfv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_ccpfw_id.
        /// </summary>
        [Column]
        public int ccpfwsfv_ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_value_id.
        /// </summary>
        [Column]
        public string ccpfwsfv_value_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_numeric.
        /// </summary>
        [Column]
        public decimal? ccpfwsfv_numeric { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_date.
        /// </summary>
        [Column]
        public DateTime? ccpfwsfv_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_string.
        /// </summary>
        [Column]
        public string ccpfwsfv_string { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_modified_by.
        /// </summary>
        [Column]
        public int? ccpfwsfv_modified_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpfwsfv_imported.
        /// </summary>
        [Column]
        public bool? ccpfwsfv_imported { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initator_update_type] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initator_update_type]")]
    [PrimaryKey("ccpiut_ccp_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_initator_update_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiut_ccp_id.
        /// </summary>
        [Column]
        public int ccpiut_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiut_cciut_id.
        /// </summary>
        [Column]
        public int ccpiut_cciut_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation]")]
    [PrimaryKey("ccpi_id")]
    [ExplicitColumns]
    public partial class cc_process_initiationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpi_id.
        /// </summary>
        [Column]
        public int ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_ccp_id.
        /// </summary>
        [Column]
        public int ccpi_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_name.
        /// </summary>
        [Column]
        public string ccpi_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_ccrf_id.
        /// </summary>
        [Column]
        public int? ccpi_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpi_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_ccrt_id.
        /// </summary>
        [Column]
        public int? ccpi_ccrt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_cctt_id.
        /// </summary>
        [Column]
        public int? ccpi_cctt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_cctt_delay.
        /// </summary>
        [Column]
        public int? ccpi_cctt_delay { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_require_owner_approval.
        /// </summary>
        [Column]
        public bool? ccpi_require_owner_approval { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_owner_ort_id.
        /// </summary>
        [Column]
        public int? ccpi_owner_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_allow_owner_edit_remove_approvers.
        /// </summary>
        [Column]
        public bool? ccpi_allow_owner_edit_remove_approvers { get; set; }

        /// <summary>
        /// Gets or sets the ccpi_enable_external_party_comm.
        /// </summary>
        [Column]
        public bool? ccpi_enable_external_party_comm { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_custom_fields]")]
    [PrimaryKey("ccpicf_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpicf_id.
        /// </summary>
        [Column]
        public int ccpicf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpicf_ccpi_id.
        /// </summary>
        [Column]
        public int ccpicf_ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpicf_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpicf_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpicf_editable.
        /// </summary>
        [Column]
        public bool ccpicf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpicf_hidden.
        /// </summary>
        [Column]
        public bool ccpicf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpicf_required.
        /// </summary>
        [Column]
        public bool ccpicf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_notification_target] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_notification_target]")]
    [PrimaryKey("ccpint_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_notification_targetRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpint_id.
        /// </summary>
        [Column]
        public int ccpint_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpint_ccpi_id.
        /// </summary>
        [Column]
        public int ccpint_ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpint_target_id.
        /// </summary>
        [Column]
        public int ccpint_target_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_reviewer]")]
    [PrimaryKey("ccpir_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpir_id.
        /// </summary>
        [Column]
        public int ccpir_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_ccpi_id.
        /// </summary>
        [Column]
        public int ccpir_ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_u_id.
        /// </summary>
        [Column]
        public int? ccpir_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_order.
        /// </summary>
        [Column]
        public int ccpir_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_is_approver.
        /// </summary>
        [Column]
        public bool ccpir_is_approver { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_ort_id.
        /// </summary>
        [Column]
        public int? ccpir_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_ccpug_id.
        /// </summary>
        [Column]
        public int? ccpir_ccpug_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_ccpug_order.
        /// </summary>
        [Column]
        public int ccpir_ccpug_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_reviewer_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_reviewer_custom_fields]")]
    [PrimaryKey("ccpircf_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_reviewer_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpircf_id.
        /// </summary>
        [Column]
        public int ccpircf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpircf_ccpir_id.
        /// </summary>
        [Column]
        public int ccpircf_ccpir_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpircf_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpircf_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpircf_editable.
        /// </summary>
        [Column]
        public bool ccpircf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpircf_hidden.
        /// </summary>
        [Column]
        public bool ccpircf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpircf_required.
        /// </summary>
        [Column]
        public bool ccpircf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_reviewer_system_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_reviewer_system_fields]")]
    [PrimaryKey("ccpirsf_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_reviewer_system_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpirsf_id.
        /// </summary>
        [Column]
        public int ccpirsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpirsf_ccpir_id.
        /// </summary>
        [Column]
        public int ccpirsf_ccpir_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpirsf_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccpirsf_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpirsf_editable.
        /// </summary>
        [Column]
        public bool ccpirsf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpirsf_hidden.
        /// </summary>
        [Column]
        public bool ccpirsf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpirsf_required.
        /// </summary>
        [Column]
        public bool ccpirsf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_role] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_role]")]
    [PrimaryKey("ccpir_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_roleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpir_id.
        /// </summary>
        [Column]
        public int ccpir_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_ccp_id.
        /// </summary>
        [Column]
        public int ccpir_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_ur_id.
        /// </summary>
        [Column]
        public int? ccpir_ur_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_cc.
        /// </summary>
        [Column]
        public bool ccpir_cc { get; set; }

        /// <summary>
        /// Gets or sets the ccpir_ort_id.
        /// </summary>
        [Column]
        public int? ccpir_ort_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_system_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_system_fields]")]
    [PrimaryKey("ccpisf_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_system_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpisf_id.
        /// </summary>
        [Column]
        public int ccpisf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpisf_ccpi_id.
        /// </summary>
        [Column]
        public int ccpisf_ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpisf_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccpisf_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpisf_editable.
        /// </summary>
        [Column]
        public bool ccpisf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpisf_hidden.
        /// </summary>
        [Column]
        public bool ccpisf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpisf_required.
        /// </summary>
        [Column]
        public bool ccpisf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow]")]
    [PrimaryKey("ccpiw_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiw_id.
        /// </summary>
        [Column]
        public int ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_ccpw_id.
        /// </summary>
        [Column]
        public int ccpiw_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpiw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpiw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_initiator_u_id.
        /// </summary>
        [Column]
        public int ccpiw_initiator_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_ccpps_id.
        /// </summary>
        [Column]
        public int ccpiw_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_subject.
        /// </summary>
        [Column]
        public string ccpiw_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_ccrf_id.
        /// </summary>
        [Column]
        public int ccpiw_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_ccpi_id.
        /// </summary>
        [Column]
        public int? ccpiw_ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_revive_date.
        /// </summary>
        [Column]
        public DateTime? ccpiw_revive_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_on_reject_ccpps_id.
        /// </summary>
        [Column]
        public int? ccpiw_on_reject_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_url.
        /// </summary>
        [Column]
        public string ccpiw_url { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_ort_id.
        /// </summary>
        [Column]
        public int? ccpiw_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_owner_u_id.
        /// </summary>
        [Column]
        public int ccpiw_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_proxied_u_id.
        /// </summary>
        [Column]
        public int? ccpiw_proxied_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_proxied_ort_id.
        /// </summary>
        [Column]
        public int? ccpiw_proxied_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_proxy_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpiw_proxy_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_proxy_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpiw_proxy_end_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_action_triggers] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_action_triggers]")]
    [PrimaryKey("ccpiwat_ccpiw_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_action_triggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwat_ccpiw_id.
        /// </summary>
        [Column]
        public int ccpiwat_ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwat_ccat_id.
        /// </summary>
        [Column]
        public int ccpiwat_ccat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwat_activated.
        /// </summary>
        [Column]
        public bool ccpiwat_activated { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwat_u_id.
        /// </summary>
        [Column]
        public int? ccpiwat_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwat_activated_date.
        /// </summary>
        [Column]
        public DateTime? ccpiwat_activated_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwat_field_values.
        /// </summary>
        [Column]
        public string ccpiwat_field_values { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwat_instructions.
        /// </summary>
        [Column]
        public string ccpiwat_instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_comment]")]
    [PrimaryKey("ccpiwc_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwc_id.
        /// </summary>
        [Column]
        public int ccpiwc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwc_ccpiwr_id.
        /// </summary>
        [Column]
        public int? ccpiwc_ccpiwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccpiwc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwc_comment.
        /// </summary>
        [Column]
        public string ccpiwc_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwc_created_by.
        /// </summary>
        [Column]
        public string ccpiwc_created_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwc_ccpiw_id.
        /// </summary>
        [Column]
        public int? ccpiwc_ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwc_ccpwc_id.
        /// </summary>
        [Column]
        public int? ccpiwc_ccpwc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_custom_field_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_custom_field_attachment]")]
    [PrimaryKey("ccpiwcfa_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_custom_field_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwcfa_id.
        /// </summary>
        [Column]
        public int ccpiwcfa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpiwcfa_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_ccpiw_id.
        /// </summary>
        [Column]
        public int ccpiwcfa_ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_url.
        /// </summary>
        [Column]
        public string ccpiwcfa_url { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_name.
        /// </summary>
        [Column]
        public string ccpiwcfa_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_add_user.
        /// </summary>
        [Column]
        public string ccpiwcfa_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_add_date.
        /// </summary>
        [Column]
        public DateTime ccpiwcfa_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_mod_user.
        /// </summary>
        [Column]
        public string ccpiwcfa_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_mod_date.
        /// </summary>
        [Column]
        public DateTime ccpiwcfa_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfa_attached_to_workflow.
        /// </summary>
        [Column]
        public bool ccpiwcfa_attached_to_workflow { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_custom_field_values] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_custom_field_values]")]
    [PrimaryKey("ccpiwcfv_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_custom_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwcfv_id.
        /// </summary>
        [Column]
        public int ccpiwcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpiwcfv_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_mll_code.
        /// </summary>
        [Column]
        public string ccpiwcfv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_ccpiw_id.
        /// </summary>
        [Column]
        public int ccpiwcfv_ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_mlcfv_id.
        /// </summary>
        [Column]
        public int? ccpiwcfv_mlcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_numeric.
        /// </summary>
        [Column]
        public decimal? ccpiwcfv_numeric { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_date.
        /// </summary>
        [Column]
        public DateTime? ccpiwcfv_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_string.
        /// </summary>
        [Column]
        public string ccpiwcfv_string { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_modified_by.
        /// </summary>
        [Column]
        public int? ccpiwcfv_modified_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcfv_imported.
        /// </summary>
        [Column]
        public bool? ccpiwcfv_imported { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_custom_fields]")]
    [PrimaryKey("ccpiwcf_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwcf_id.
        /// </summary>
        [Column]
        public int ccpiwcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcf_ccpiw_id.
        /// </summary>
        [Column]
        public int ccpiwcf_ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcf_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpiwcf_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwcf_hidden_until_trigger.
        /// </summary>
        [Column]
        public bool ccpiwcf_hidden_until_trigger { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_reviewer] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_reviewer]")]
    [PrimaryKey("ccpiwr_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwr_id.
        /// </summary>
        [Column]
        public int ccpiwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_ccpiw_id.
        /// </summary>
        [Column]
        public int ccpiwr_ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpiwr_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpiwr_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_u_id.
        /// </summary>
        [Column]
        public int ccpiwr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_ccpprs_id.
        /// </summary>
        [Column]
        public int ccpiwr_ccpprs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_order.
        /// </summary>
        [Column]
        public int ccpiwr_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_is_approver.
        /// </summary>
        [Column]
        public bool ccpiwr_is_approver { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_ort_id.
        /// </summary>
        [Column]
        public int? ccpiwr_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_ccpwug_id.
        /// </summary>
        [Column]
        public int? ccpiwr_ccpwug_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwr_ccpwug_order.
        /// </summary>
        [Column]
        public int ccpiwr_ccpwug_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_reviewer_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_reviewer_custom_fields]")]
    [PrimaryKey("ccpiwrcf_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_reviewer_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwrcf_id.
        /// </summary>
        [Column]
        public int ccpiwrcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrcf_ccpiwr_id.
        /// </summary>
        [Column]
        public int ccpiwrcf_ccpiwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrcf_ccrfcf_id.
        /// </summary>
        [Column]
        public int ccpiwrcf_ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrcf_editable.
        /// </summary>
        [Column]
        public bool ccpiwrcf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrcf_hidden.
        /// </summary>
        [Column]
        public bool ccpiwrcf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrcf_required.
        /// </summary>
        [Column]
        public bool ccpiwrcf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_reviewer_system_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_reviewer_system_fields]")]
    [PrimaryKey("ccpiwrsf_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_reviewer_system_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwrsf_id.
        /// </summary>
        [Column]
        public int ccpiwrsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrsf_ccpiwr_id.
        /// </summary>
        [Column]
        public int ccpiwrsf_ccpiwr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrsf_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccpiwrsf_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrsf_editable.
        /// </summary>
        [Column]
        public bool ccpiwrsf_editable { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrsf_hidden.
        /// </summary>
        [Column]
        public bool ccpiwrsf_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwrsf_required.
        /// </summary>
        [Column]
        public bool ccpiwrsf_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_initiation_workflow_system_field_values] table.
    /// </summary>
    [TableName("[dbo].[cc_process_initiation_workflow_system_field_values]")]
    [PrimaryKey("ccpiwsfv_id")]
    [ExplicitColumns]
    public partial class cc_process_initiation_workflow_system_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpiwsfv_id.
        /// </summary>
        [Column]
        public int ccpiwsfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_ccrfsf_id.
        /// </summary>
        [Column]
        public int ccpiwsfv_ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_mll_code.
        /// </summary>
        [Column]
        public string ccpiwsfv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_ccpiw_id.
        /// </summary>
        [Column]
        public int ccpiwsfv_ccpiw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_value_id.
        /// </summary>
        [Column]
        public string ccpiwsfv_value_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_numeric.
        /// </summary>
        [Column]
        public decimal? ccpiwsfv_numeric { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_date.
        /// </summary>
        [Column]
        public DateTime? ccpiwsfv_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_string.
        /// </summary>
        [Column]
        public string ccpiwsfv_string { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_modified_by.
        /// </summary>
        [Column]
        public int? ccpiwsfv_modified_by { get; set; }

        /// <summary>
        /// Gets or sets the ccpiwsfv_imported.
        /// </summary>
        [Column]
        public bool? ccpiwsfv_imported { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_navigation_item] table.
    /// </summary>
    [TableName("[dbo].[cc_process_navigation_item]")]
    [PrimaryKey("ccpni_id")]
    [ExplicitColumns]
    public partial class cc_process_navigation_itemRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpni_id.
        /// </summary>
        [Column]
        public int ccpni_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpni_u_id.
        /// </summary>
        [Column]
        public int ccpni_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpni_o_id.
        /// </summary>
        [Column]
        public int ccpni_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpni_title.
        /// </summary>
        [Column]
        public string ccpni_title { get; set; }

        /// <summary>
        /// Gets or sets the ccpni_filter.
        /// </summary>
        [Column]
        public string ccpni_filter { get; set; }

        /// <summary>
        /// Gets or sets the ccpni_order.
        /// </summary>
        [Column]
        public int ccpni_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpni_type.
        /// </summary>
        [Column]
        public int ccpni_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_phase_approval_status] table.
    /// </summary>
    [TableName("[dbo].[cc_process_phase_approval_status]")]
    [PrimaryKey("ccppas_id")]
    [ExplicitColumns]
    public partial class cc_process_phase_approval_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccppas_id.
        /// </summary>
        [Column]
        public int ccppas_id { get; set; }

        /// <summary>
        /// Gets or sets the ccppas_name.
        /// </summary>
        [Column]
        public string ccppas_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_phase_review_status] table.
    /// </summary>
    [TableName("[dbo].[cc_process_phase_review_status]")]
    [PrimaryKey("ccpprs_id")]
    [ExplicitColumns]
    public partial class cc_process_phase_review_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpprs_id.
        /// </summary>
        [Column]
        public int ccpprs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpprs_name.
        /// </summary>
        [Column]
        public string ccpprs_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_phase_status] table.
    /// </summary>
    [TableName("[dbo].[cc_process_phase_status]")]
    [PrimaryKey("ccpps_id")]
    [ExplicitColumns]
    public partial class cc_process_phase_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpps_id.
        /// </summary>
        [Column]
        public int ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpps_name.
        /// </summary>
        [Column]
        public string ccpps_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_required_workflow_action_type_comments] table.
    /// </summary>
    [TableName("[dbo].[cc_process_required_workflow_action_type_comments]")]
    [PrimaryKey("ccprwatc_ccp_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_required_workflow_action_type_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccprwatc_ccp_id.
        /// </summary>
        [Column]
        public int ccprwatc_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccprwatc_ccpwat_id.
        /// </summary>
        [Column]
        public int ccprwatc_ccpwat_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_site] table.
    /// </summary>
    [TableName("[dbo].[cc_process_site]")]
    [PrimaryKey("ccpss_ccp_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpss_ccp_id.
        /// </summary>
        [Column]
        public int ccpss_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpss_s_id.
        /// </summary>
        [Column]
        public int ccpss_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_status] table.
    /// </summary>
    [TableName("[dbo].[cc_process_status]")]
    [PrimaryKey("ccps_id")]
    [ExplicitColumns]
    public partial class cc_process_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccps_id.
        /// </summary>
        [Column]
        public int ccps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccps_name.
        /// </summary>
        [Column]
        public string ccps_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination]")]
    [PrimaryKey("ccpt_id")]
    [ExplicitColumns]
    public partial class cc_process_terminationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpt_id.
        /// </summary>
        [Column]
        public int ccpt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_ccp_id.
        /// </summary>
        [Column]
        public int ccpt_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_name.
        /// </summary>
        [Column]
        public string ccpt_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_owner_u_id.
        /// </summary>
        [Column]
        public int? ccpt_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_owner_ort_id.
        /// </summary>
        [Column]
        public int? ccpt_owner_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_disable_cemail.
        /// </summary>
        [Column]
        public bool? ccpt_disable_cemail { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_disable_cemail_readonly.
        /// </summary>
        [Column]
        public bool ccpt_disable_cemail_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_auto_archive.
        /// </summary>
        [Column]
        public bool? ccpt_auto_archive { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_auto_archive_readonly.
        /// </summary>
        [Column]
        public bool ccpt_auto_archive_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_archive_on.
        /// </summary>
        [Column]
        public DateTime? ccpt_archive_on { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_archive_on_readonly.
        /// </summary>
        [Column]
        public bool ccpt_archive_on_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_archive_until.
        /// </summary>
        [Column]
        public DateTime? ccpt_archive_until { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_archive_until_readonly.
        /// </summary>
        [Column]
        public bool ccpt_archive_until_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_save_attachment.
        /// </summary>
        [Column]
        public bool? ccpt_save_attachment { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_save_attachment_readonly.
        /// </summary>
        [Column]
        public bool ccpt_save_attachment_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_save_attachment_comment.
        /// </summary>
        [Column]
        public string ccpt_save_attachment_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_pending_message_visible.
        /// </summary>
        [Column]
        public bool? ccpt_pending_message_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_pending_message_readonly.
        /// </summary>
        [Column]
        public bool ccpt_pending_message_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_pending_message_text.
        /// </summary>
        [Column]
        public string ccpt_pending_message_text { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_pending_recipients_readonly.
        /// </summary>
        [Column]
        public bool ccpt_pending_recipients_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_pending_recipients_initiator.
        /// </summary>
        [Column]
        public bool ccpt_pending_recipients_initiator { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_pending_recipients_primary_rp.
        /// </summary>
        [Column]
        public bool ccpt_pending_recipients_primary_rp { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_pending_recipients_secondary_rp.
        /// </summary>
        [Column]
        public bool ccpt_pending_recipients_secondary_rp { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_pending_recipients_tertiary_rp.
        /// </summary>
        [Column]
        public bool ccpt_pending_recipients_tertiary_rp { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_instructions.
        /// </summary>
        [Column]
        public string ccpt_instructions { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_enable_external_party_comm.
        /// </summary>
        [Column]
        public bool? ccpt_enable_external_party_comm { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_v_id.
        /// </summary>
        [Column]
        public int? ccpt_v_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_v_id_readonly.
        /// </summary>
        [Column]
        public bool ccpt_v_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_e_id.
        /// </summary>
        [Column]
        public int? ccpt_e_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_e_id_readonly.
        /// </summary>
        [Column]
        public bool ccpt_e_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_od_id.
        /// </summary>
        [Column]
        public int? ccpt_od_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_od_id_readonly.
        /// </summary>
        [Column]
        public bool ccpt_od_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_primary_u_id.
        /// </summary>
        [Column]
        public int? ccpt_primary_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_primary_u_id_readonly.
        /// </summary>
        [Column]
        public bool ccpt_primary_u_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_secondary_u_id.
        /// </summary>
        [Column]
        public int? ccpt_secondary_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_secondary_u_id_readonly.
        /// </summary>
        [Column]
        public bool ccpt_secondary_u_id_readonly { get; set; }

        /// <summary>
        /// Gets or sets the ccpt_s_id_readonly.
        /// </summary>
        [Column]
        public bool ccpt_s_id_readonly { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_compliance_questions] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_compliance_questions]")]
    [PrimaryKey("ccptcq_id")]
    [ExplicitColumns]
    public partial class cc_process_termination_compliance_questionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptcq_id.
        /// </summary>
        [Column]
        public int ccptcq_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptcq_ccpt_id.
        /// </summary>
        [Column]
        public int ccptcq_ccpt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptcq_cq_id.
        /// </summary>
        [Column]
        public int ccptcq_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptcq_visible.
        /// </summary>
        [Column]
        public bool ccptcq_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccptcq_required.
        /// </summary>
        [Column]
        public bool ccptcq_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_optional_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_optional_fields]")]
    [PrimaryKey("ccptof_id")]
    [ExplicitColumns]
    public partial class cc_process_termination_optional_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptof_id.
        /// </summary>
        [Column]
        public int ccptof_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptof_ccpt_id.
        /// </summary>
        [Column]
        public int ccptof_ccpt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptof_field_type.
        /// </summary>
        [Column]
        public int ccptof_field_type { get; set; }

        /// <summary>
        /// Gets or sets the ccptof_required.
        /// </summary>
        [Column]
        public bool ccptof_required { get; set; }

        /// <summary>
        /// Gets or sets the ccptof_visible.
        /// </summary>
        [Column]
        public bool ccptof_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccptof_vendor_profile_field.
        /// </summary>
        [Column]
        public bool ccptof_vendor_profile_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_permission] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_permission]")]
    [PrimaryKey("ccptp_ccpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_termination_permissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptp_ccpt_id.
        /// </summary>
        [Column]
        public int ccptp_ccpt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptp_u_id.
        /// </summary>
        [Column]
        public int ccptp_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_recipient] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_recipient]")]
    [PrimaryKey("ccptr_ccpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_termination_recipientRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptr_ccpt_id.
        /// </summary>
        [Column]
        public int ccptr_ccpt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptr_u_id.
        /// </summary>
        [Column]
        public int ccptr_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_site] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_site]")]
    [PrimaryKey("ccpts_id")]
    [ExplicitColumns]
    public partial class cc_process_termination_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpts_id.
        /// </summary>
        [Column]
        public int ccpts_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpts_ccpt_id.
        /// </summary>
        [Column]
        public int ccpts_ccpt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpts_s_id.
        /// </summary>
        [Column]
        public int ccpts_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_workflow] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_workflow]")]
    [PrimaryKey("ccptw_id")]
    [ExplicitColumns]
    public partial class cc_process_termination_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptw_id.
        /// </summary>
        [Column]
        public int ccptw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_ccpw_id.
        /// </summary>
        [Column]
        public int ccptw_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_ccpt_id.
        /// </summary>
        [Column]
        public int ccptw_ccpt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_owner_u_id.
        /// </summary>
        [Column]
        public int? ccptw_owner_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_ort_id.
        /// </summary>
        [Column]
        public int? ccptw_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_v_id.
        /// </summary>
        [Column]
        public int? ccptw_v_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_start_date.
        /// </summary>
        [Column]
        public DateTime? ccptw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccptw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_ccpps_id.
        /// </summary>
        [Column]
        public int ccptw_ccpps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_disable_cemail.
        /// </summary>
        [Column]
        public bool? ccptw_disable_cemail { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_auto_archive.
        /// </summary>
        [Column]
        public bool? ccptw_auto_archive { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_archive_on.
        /// </summary>
        [Column]
        public DateTime? ccptw_archive_on { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_archive_until.
        /// </summary>
        [Column]
        public DateTime? ccptw_archive_until { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_save_attachment.
        /// </summary>
        [Column]
        public bool? ccptw_save_attachment { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_save_attachment_comment.
        /// </summary>
        [Column]
        public string ccptw_save_attachment_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_pending_message_visible.
        /// </summary>
        [Column]
        public bool? ccptw_pending_message_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_pending_message_text.
        /// </summary>
        [Column]
        public string ccptw_pending_message_text { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_pending_recipients_initiator.
        /// </summary>
        [Column]
        public bool ccptw_pending_recipients_initiator { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_pending_recipients_primary_rp.
        /// </summary>
        [Column]
        public bool ccptw_pending_recipients_primary_rp { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_pending_recipients_secondary_rp.
        /// </summary>
        [Column]
        public bool ccptw_pending_recipients_secondary_rp { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_pending_recipients_tertiary_rp.
        /// </summary>
        [Column]
        public bool ccptw_pending_recipients_tertiary_rp { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_push_attachment.
        /// </summary>
        [Column]
        public bool ccptw_push_attachment { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_push_attachment_cnt_id.
        /// </summary>
        [Column]
        public int? ccptw_push_attachment_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_push_attachment_subject.
        /// </summary>
        [Column]
        public string ccptw_push_attachment_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_push_attachment_comment.
        /// </summary>
        [Column]
        public string ccptw_push_attachment_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_proxied_u_id.
        /// </summary>
        [Column]
        public int? ccptw_proxied_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_proxied_ort_id.
        /// </summary>
        [Column]
        public int? ccptw_proxied_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_proxy_start_date.
        /// </summary>
        [Column]
        public DateTime? ccptw_proxy_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccptw_proxy_end_date.
        /// </summary>
        [Column]
        public DateTime? ccptw_proxy_end_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_workflow_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_workflow_attachment]")]
    [PrimaryKey("ccptwa_id")]
    [ExplicitColumns]
    public partial class cc_process_termination_workflow_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptwa_id.
        /// </summary>
        [Column]
        public int ccptwa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_ccptw_id.
        /// </summary>
        [Column]
        public int ccptwa_ccptw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_doc_path.
        /// </summary>
        [Column]
        public string ccptwa_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_subject.
        /// </summary>
        [Column]
        public string ccptwa_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_cnt_id.
        /// </summary>
        [Column]
        public int? ccptwa_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_position.
        /// </summary>
        [Column]
        public int ccptwa_position { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_comment.
        /// </summary>
        [Column]
        public string ccptwa_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_permissions.
        /// </summary>
        [Column]
        public string ccptwa_permissions { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_type_id.
        /// </summary>
        [Column]
        public int? ccptwa_type_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_effective_date.
        /// </summary>
        [Column]
        public DateTime? ccptwa_effective_date { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_expiration_date.
        /// </summary>
        [Column]
        public DateTime? ccptwa_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the ccptwa_selected.
        /// </summary>
        [Column]
        public bool ccptwa_selected { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_workflow_comment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_workflow_comment]")]
    [PrimaryKey("ccptwc_id")]
    [ExplicitColumns]
    public partial class cc_process_termination_workflow_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptwc_id.
        /// </summary>
        [Column]
        public int ccptwc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwc_ccptw_id.
        /// </summary>
        [Column]
        public int ccptwc_ccptw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwc_timestamp.
        /// </summary>
        [Column]
        public DateTime ccptwc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ccptwc_comment.
        /// </summary>
        [Column]
        public string ccptwc_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccptwc_created_by.
        /// </summary>
        [Column]
        public string ccptwc_created_by { get; set; }

        /// <summary>
        /// Gets or sets the ccptwc_ccpwc_id.
        /// </summary>
        [Column]
        public int? ccptwc_ccpwc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_workflow_permission] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_workflow_permission]")]
    [PrimaryKey("ccptwp_ccptw_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_termination_workflow_permissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptwp_ccptw_id.
        /// </summary>
        [Column]
        public int ccptwp_ccptw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwp_u_id.
        /// </summary>
        [Column]
        public int ccptwp_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwp_on_push.
        /// </summary>
        [Column]
        public bool ccptwp_on_push { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_termination_workflow_recipient] table.
    /// </summary>
    [TableName("[dbo].[cc_process_termination_workflow_recipient]")]
    [PrimaryKey("ccptwr_ccptw_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_termination_workflow_recipientRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccptwr_ccptw_id.
        /// </summary>
        [Column]
        public int ccptwr_ccptw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccptwr_u_id.
        /// </summary>
        [Column]
        public int ccptwr_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_user_group] table.
    /// </summary>
    [TableName("[dbo].[cc_process_user_group]")]
    [PrimaryKey("ccpug_id")]
    [ExplicitColumns]
    public partial class cc_process_user_groupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpug_id.
        /// </summary>
        [Column]
        public int ccpug_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpug_name.
        /// </summary>
        [Column]
        public string ccpug_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpug_order.
        /// </summary>
        [Column]
        public int ccpug_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpug_ccp_id.
        /// </summary>
        [Column]
        public int ccpug_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpug_ccrt_id.
        /// </summary>
        [Column]
        public int? ccpug_ccrt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpug_cctt_id.
        /// </summary>
        [Column]
        public int? ccpug_cctt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpug_cctt_delay.
        /// </summary>
        [Column]
        public int? ccpug_cctt_delay { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow]")]
    [PrimaryKey("ccpw_id")]
    [ExplicitColumns]
    public partial class cc_process_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpw_id.
        /// </summary>
        [Column]
        public int ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_subject.
        /// </summary>
        [Column]
        public string ccpw_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_ccp_id.
        /// </summary>
        [Column]
        public int ccpw_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_initiator_u_id.
        /// </summary>
        [Column]
        public int ccpw_initiator_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_start_date.
        /// </summary>
        [Column]
        public DateTime ccpw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_ccps_id.
        /// </summary>
        [Column]
        public int ccpw_ccps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_status_comment.
        /// </summary>
        [Column]
        public string ccpw_status_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_u_id.
        /// </summary>
        [Column]
        public int? ccpw_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_ccd_id.
        /// </summary>
        [Column]
        public int ccpw_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_comment_date.
        /// </summary>
        [Column]
        public DateTime? ccpw_comment_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_is_draft.
        /// </summary>
        [Column]
        public bool? ccpw_is_draft { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_revive_date.
        /// </summary>
        [Column]
        public DateTime? ccpw_revive_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_on_reject_ccps_id.
        /// </summary>
        [Column]
        public int? ccpw_on_reject_ccps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_c_id.
        /// </summary>
        [Column]
        public int? ccpw_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_c_import.
        /// </summary>
        [Column]
        public bool ccpw_c_import { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_od_id.
        /// </summary>
        [Column]
        public int? ccpw_od_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_is_corrupt.
        /// </summary>
        [Column]
        public bool ccpw_is_corrupt { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_taw_s_id.
        /// </summary>
        [Column]
        public int? ccpw_taw_s_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_expertrfp_pending.
        /// </summary>
        [Column]
        public bool ccpw_expertrfp_pending { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_action_type] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_action_type]")]
    [PrimaryKey("ccpwat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_workflow_action_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwat_id.
        /// </summary>
        [Column]
        public int ccpwat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwat_name.
        /// </summary>
        [Column]
        public string ccpwat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_attachment]")]
    [PrimaryKey("ccpwa_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwa_id.
        /// </summary>
        [Column]
        public int ccpwa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_ccpw_id.
        /// </summary>
        [Column]
        public int ccpwa_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_ccpfw_id.
        /// </summary>
        [Column]
        public int? ccpwa_ccpfw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_ccpwat_id.
        /// </summary>
        [Column]
        public int ccpwa_ccpwat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_subject.
        /// </summary>
        [Column]
        public string ccpwa_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_add_user.
        /// </summary>
        [Column]
        public string ccpwa_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_mod_user.
        /// </summary>
        [Column]
        public string ccpwa_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_add_date.
        /// </summary>
        [Column]
        public DateTime ccpwa_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_mod_date.
        /// </summary>
        [Column]
        public DateTime ccpwa_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_sort.
        /// </summary>
        [Column]
        public int ccpwa_sort { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_url.
        /// </summary>
        [Column]
        public string ccpwa_url { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_body.
        /// </summary>
        [Column]
        public string ccpwa_body { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_add_u_id.
        /// </summary>
        [Column]
        public int? ccpwa_add_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwa_checked.
        /// </summary>
        [Column]
        public bool ccpwa_checked { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_attachment_type] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_attachment_type]")]
    [PrimaryKey("ccpwat_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_attachment_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwat_id.
        /// </summary>
        [Column]
        public int ccpwat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwat_name.
        /// </summary>
        [Column]
        public string ccpwat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_attachment_type_mapping] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_attachment_type_mapping]")]
    [PrimaryKey("ccpwatm_ccpwat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_workflow_attachment_type_mappingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwatm_ccpwat_id.
        /// </summary>
        [Column]
        public int ccpwatm_ccpwat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwatm_cnt_id.
        /// </summary>
        [Column]
        public int ccpwatm_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwatm_o_id.
        /// </summary>
        [Column]
        public int ccpwatm_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_communication] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_communication]")]
    [PrimaryKey("ccpwc_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_communicationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwc_id.
        /// </summary>
        [Column]
        public int ccpwc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwc_ccpw_id.
        /// </summary>
        [Column]
        public int ccpwc_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwc_ccpwcs_id.
        /// </summary>
        [Column]
        public int ccpwc_ccpwcs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwc_intent.
        /// </summary>
        [Column]
        public string ccpwc_intent { get; set; }

        /// <summary>
        /// Gets or sets the ccpwc_viewable_ids.
        /// </summary>
        [Column]
        public string ccpwc_viewable_ids { get; set; }

        /// <summary>
        /// Gets or sets the ccpwc_required_ids.
        /// </summary>
        [Column]
        public string ccpwc_required_ids { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_communication_external_party] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_communication_external_party]")]
    [PrimaryKey("ccpwcep_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_communication_external_partyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwcep_id.
        /// </summary>
        [Column]
        public int ccpwcep_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_ccpwc_id.
        /// </summary>
        [Column]
        public int ccpwcep_ccpwc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_p_id.
        /// </summary>
        [Column]
        public int ccpwcep_p_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_intent.
        /// </summary>
        [Column]
        public string ccpwcep_intent { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpwcep_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpwcep_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_ccpwceps_id.
        /// </summary>
        [Column]
        public int ccpwcep_ccpwceps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_phase_type.
        /// </summary>
        [Column]
        public int? ccpwcep_phase_type { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_phase_id.
        /// </summary>
        [Column]
        public int? ccpwcep_phase_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_submit_u_id.
        /// </summary>
        [Column]
        public int? ccpwcep_submit_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcep_token.
        /// </summary>
        [Column]
        public Guid? ccpwcep_token { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_communication_external_party_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_communication_external_party_attachment]")]
    [PrimaryKey("ccpwcepa_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_communication_external_party_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwcepa_id.
        /// </summary>
        [Column]
        public int ccpwcepa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcepa_ccpwcep_id.
        /// </summary>
        [Column]
        public int ccpwcepa_ccpwcep_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcepa_ccpwa_id.
        /// </summary>
        [Column]
        public int? ccpwcepa_ccpwa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcepa_main_url.
        /// </summary>
        [Column]
        public string ccpwcepa_main_url { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcepa_viewable.
        /// </summary>
        [Column]
        public bool? ccpwcepa_viewable { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcepa_required.
        /// </summary>
        [Column]
        public bool? ccpwcepa_required { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcepa_ccpwcepas_id.
        /// </summary>
        [Column]
        public int? ccpwcepa_ccpwcepas_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcepa_decline_reason.
        /// </summary>
        [Column]
        public string ccpwcepa_decline_reason { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_communication_external_party_attachment_status] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_communication_external_party_attachment_status]")]
    [PrimaryKey("ccpwcepas_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_communication_external_party_attachment_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwcepas_id.
        /// </summary>
        [Column]
        public int ccpwcepas_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcepas_name.
        /// </summary>
        [Column]
        public string ccpwcepas_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_communication_external_party_status] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_communication_external_party_status]")]
    [PrimaryKey("ccpwceps_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_communication_external_party_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwceps_id.
        /// </summary>
        [Column]
        public int ccpwceps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwceps_name.
        /// </summary>
        [Column]
        public string ccpwceps_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_communication_status] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_communication_status]")]
    [PrimaryKey("ccpwcs_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_communication_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwcs_id.
        /// </summary>
        [Column]
        public int ccpwcs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwcs_name.
        /// </summary>
        [Column]
        public string ccpwcs_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_data] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_data]")]
    [PrimaryKey("ccpwd_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_datumRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwd_id.
        /// </summary>
        [Column]
        public int ccpwd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_ccpw_id.
        /// </summary>
        [Column]
        public int ccpwd_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_url.
        /// </summary>
        [Column]
        public string ccpwd_url { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_id.
        /// </summary>
        [Column]
        public int? ccpwd_v_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_other_v_id.
        /// </summary>
        [Column]
        public int? ccpwd_other_v_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_ot_id.
        /// </summary>
        [Column]
        public int? ccpwd_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_o_id.
        /// </summary>
        [Column]
        public int ccpwd_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_e_id.
        /// </summary>
        [Column]
        public int? ccpwd_e_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_od_id.
        /// </summary>
        [Column]
        public int? ccpwd_od_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_date_eff.
        /// </summary>
        [Column]
        public DateTime? ccpwd_date_eff { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_date_exp.
        /// </summary>
        [Column]
        public DateTime? ccpwd_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_auto_renew.
        /// </summary>
        [Column]
        public int? ccpwd_auto_renew { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_auto_renew_term.
        /// </summary>
        [Column]
        public int? ccpwd_auto_renew_term { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_auto_renew_time.
        /// </summary>
        [Column]
        public int? ccpwd_auto_renew_time { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_action_list.
        /// </summary>
        [Column]
        public bool? ccpwd_action_list { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_group.
        /// </summary>
        [Column]
        public string ccpwd_group { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_sig_name.
        /// </summary>
        [Column]
        public string ccpwd_sig_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_sig_title.
        /// </summary>
        [Column]
        public string ccpwd_sig_title { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_term.
        /// </summary>
        [Column]
        public string ccpwd_term { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_u_id_primary.
        /// </summary>
        [Column]
        public int? ccpwd_u_id_primary { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_u_id_secondary.
        /// </summary>
        [Column]
        public int? ccpwd_u_id_secondary { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_u_id_third.
        /// </summary>
        [Column]
        public int? ccpwd_u_id_third { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_po_no.
        /// </summary>
        [Column]
        public string ccpwd_po_no { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_sig_name_v.
        /// </summary>
        [Column]
        public string ccpwd_sig_name_v { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_sig_title_v.
        /// </summary>
        [Column]
        public string ccpwd_sig_title_v { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_product.
        /// </summary>
        [Column]
        public string ccpwd_product { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_desc.
        /// </summary>
        [Column]
        public string ccpwd_desc { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_otherinfo1.
        /// </summary>
        [Column]
        public string ccpwd_otherinfo1 { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_otherinfo2.
        /// </summary>
        [Column]
        public string ccpwd_otherinfo2 { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_website.
        /// </summary>
        [Column]
        public string ccpwd_v_website { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_con_fname.
        /// </summary>
        [Column]
        public string ccpwd_v_con_fname { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_con_lname.
        /// </summary>
        [Column]
        public string ccpwd_v_con_lname { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_title.
        /// </summary>
        [Column]
        public string ccpwd_v_title { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_addr_1.
        /// </summary>
        [Column]
        public string ccpwd_v_addr_1 { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_addr_2.
        /// </summary>
        [Column]
        public string ccpwd_v_addr_2 { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_city.
        /// </summary>
        [Column]
        public string ccpwd_v_city { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_state.
        /// </summary>
        [Column]
        public string ccpwd_v_state { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_zip.
        /// </summary>
        [Column]
        public string ccpwd_v_zip { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_cty_id.
        /// </summary>
        [Column]
        public int? ccpwd_v_cty_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_latitude.
        /// </summary>
        [Column]
        public decimal? ccpwd_v_latitude { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_longitude.
        /// </summary>
        [Column]
        public decimal? ccpwd_v_longitude { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_ref_no.
        /// </summary>
        [Column]
        public string ccpwd_v_ref_no { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_email.
        /// </summary>
        [Column]
        public string ccpwd_v_email { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_con_phone.
        /// </summary>
        [Column]
        public string ccpwd_v_con_phone { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_con_fax.
        /// </summary>
        [Column]
        public string ccpwd_v_con_fax { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_con_mobile.
        /// </summary>
        [Column]
        public string ccpwd_v_con_mobile { get; set; }

        /// <summary>
        /// Gets or sets the ccpwd_v_con_pager.
        /// </summary>
        [Column]
        public string ccpwd_v_con_pager { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_data_compliance] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_data_compliance]")]
    [PrimaryKey("ccpwdc_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_data_complianceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwdc_id.
        /// </summary>
        [Column]
        public int ccpwdc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdc_ccpwd_id.
        /// </summary>
        [Column]
        public int ccpwdc_ccpwd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdc_cq_id.
        /// </summary>
        [Column]
        public int ccpwdc_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdc_yes.
        /// </summary>
        [Column]
        public int ccpwdc_yes { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_data_custom_field_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_data_custom_field_attachment]")]
    [PrimaryKey("ccpwdcfa_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_data_custom_field_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwdcfa_id.
        /// </summary>
        [Column]
        public int ccpwdcfa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfa_ccpwd_id.
        /// </summary>
        [Column]
        public int ccpwdcfa_ccpwd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfa_ocf_id.
        /// </summary>
        [Column]
        public int ccpwdcfa_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfa_url.
        /// </summary>
        [Column]
        public string ccpwdcfa_url { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfa_name.
        /// </summary>
        [Column]
        public string ccpwdcfa_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfa_add_user.
        /// </summary>
        [Column]
        public string ccpwdcfa_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfa_add_date.
        /// </summary>
        [Column]
        public DateTime ccpwdcfa_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfa_mod_user.
        /// </summary>
        [Column]
        public string ccpwdcfa_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfa_mod_date.
        /// </summary>
        [Column]
        public DateTime ccpwdcfa_mod_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_data_custom_field_values] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_data_custom_field_values]")]
    [PrimaryKey("ccpwdcfv_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_data_custom_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwdcfv_id.
        /// </summary>
        [Column]
        public int ccpwdcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfv_ccpwd_id.
        /// </summary>
        [Column]
        public int ccpwdcfv_ccpwd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfv_ocf_id.
        /// </summary>
        [Column]
        public int ccpwdcfv_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfv_mll_code.
        /// </summary>
        [Column]
        public string ccpwdcfv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfv_mlcfv_id.
        /// </summary>
        [Column]
        public int? ccpwdcfv_mlcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfv_numeric.
        /// </summary>
        [Column]
        public decimal? ccpwdcfv_numeric { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfv_date.
        /// </summary>
        [Column]
        public DateTime? ccpwdcfv_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpwdcfv_string.
        /// </summary>
        [Column]
        public string ccpwdcfv_string { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_data_email] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_data_email]")]
    [PrimaryKey("ccpwde_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_data_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwde_id.
        /// </summary>
        [Column]
        public int ccpwde_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwde_ccpwd_id.
        /// </summary>
        [Column]
        public int ccpwde_ccpwd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwde_u_id.
        /// </summary>
        [Column]
        public int ccpwde_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_data_site] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_data_site]")]
    [PrimaryKey("ccpwds_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_data_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwds_id.
        /// </summary>
        [Column]
        public int ccpwds_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwds_ccpwd_id.
        /// </summary>
        [Column]
        public int ccpwds_ccpwd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwds_s_id.
        /// </summary>
        [Column]
        public int ccpwds_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_snapshot] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_snapshot]")]
    [PrimaryKey("ccpws_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_snapshotRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpws_id.
        /// </summary>
        [Column]
        public int ccpws_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpws_ccpw_id.
        /// </summary>
        [Column]
        public int ccpws_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpws_title.
        /// </summary>
        [Column]
        public string ccpws_title { get; set; }

        /// <summary>
        /// Gets or sets the ccpws_description.
        /// </summary>
        [Column]
        public string ccpws_description { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_sop] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_sop]")]
    [PrimaryKey("ccpws_ccpw_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_process_workflow_sopRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpws_ccpw_id.
        /// </summary>
        [Column]
        public int ccpws_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpws_v_id.
        /// </summary>
        [Column]
        public int ccpws_v_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_process_workflow_user_group] table.
    /// </summary>
    [TableName("[dbo].[cc_process_workflow_user_group]")]
    [PrimaryKey("ccpwug_id")]
    [ExplicitColumns]
    public partial class cc_process_workflow_user_groupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpwug_id.
        /// </summary>
        [Column]
        public int ccpwug_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_name.
        /// </summary>
        [Column]
        public string ccpwug_name { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_order.
        /// </summary>
        [Column]
        public int ccpwug_order { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_ccpw_id.
        /// </summary>
        [Column]
        public int ccpwug_ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_ccrt_id.
        /// </summary>
        [Column]
        public int ccpwug_ccrt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_cctt_id.
        /// </summary>
        [Column]
        public int? ccpwug_cctt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_cctt_delay.
        /// </summary>
        [Column]
        public int? ccpwug_cctt_delay { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_ccpprs_id.
        /// </summary>
        [Column]
        public int ccpwug_ccpprs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_start_date.
        /// </summary>
        [Column]
        public DateTime? ccpwug_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpwug_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpwug_ccpug_id.
        /// </summary>
        [Column]
        public int? ccpwug_ccpug_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_proxy_rule] table.
    /// </summary>
    [TableName("[dbo].[cc_proxy_rule]")]
    [PrimaryKey("ccpr_id")]
    [ExplicitColumns]
    public partial class cc_proxy_ruleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpr_id.
        /// </summary>
        [Column]
        public int ccpr_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpr_u_id.
        /// </summary>
        [Column]
        public int ccpr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpr_o_id.
        /// </summary>
        [Column]
        public int ccpr_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpr_startdate.
        /// </summary>
        [Column]
        public DateTime ccpr_startdate { get; set; }

        /// <summary>
        /// Gets or sets the ccpr_enddate.
        /// </summary>
        [Column]
        public DateTime? ccpr_enddate { get; set; }

        /// <summary>
        /// Gets or sets the ccpr_proxy_u_id.
        /// </summary>
        [Column]
        public int? ccpr_proxy_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpr_cc_while_away.
        /// </summary>
        [Column]
        public bool ccpr_cc_while_away { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_push_notification] table.
    /// </summary>
    [TableName("[dbo].[cc_push_notification]")]
    [PrimaryKey("ccpn_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_push_notificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpn_id.
        /// </summary>
        [Column]
        public int ccpn_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpn_ot_id.
        /// </summary>
        [Column]
        public int ccpn_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpn_u_id.
        /// </summary>
        [Column]
        public int ccpn_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_requisition_form] table.
    /// </summary>
    [TableName("[dbo].[cc_requisition_form]")]
    [PrimaryKey("ccrf_id")]
    [ExplicitColumns]
    public partial class cc_requisition_formRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrf_id.
        /// </summary>
        [Column]
        public int ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_name.
        /// </summary>
        [Column]
        public string ccrf_name { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_body.
        /// </summary>
        [Column]
        public string ccrf_body { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_add_user.
        /// </summary>
        [Column]
        public string ccrf_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_mod_user.
        /// </summary>
        [Column]
        public string ccrf_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_add_date.
        /// </summary>
        [Column]
        public DateTime? ccrf_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_mod_date.
        /// </summary>
        [Column]
        public DateTime? ccrf_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_source_ccrf_id.
        /// </summary>
        [Column]
        public int? ccrf_source_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_is_current.
        /// </summary>
        [Column]
        public bool ccrf_is_current { get; set; }

        /// <summary>
        /// Gets or sets the ccrf_o_id.
        /// </summary>
        [Column]
        public int? ccrf_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_requisition_form_affected_processes] table.
    /// </summary>
    [TableName("[dbo].[cc_requisition_form_affected_processes]")]
    [PrimaryKey("ccrfap_ccrf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_requisition_form_affected_processRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrfap_ccrf_id.
        /// </summary>
        [Column]
        public int ccrfap_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfap_ccp_id.
        /// </summary>
        [Column]
        public int ccrfap_ccp_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_requisition_form_attachment] table.
    /// </summary>
    [TableName("[dbo].[cc_requisition_form_attachment]")]
    [PrimaryKey("ccrfa_id")]
    [ExplicitColumns]
    public partial class cc_requisition_form_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrfa_id.
        /// </summary>
        [Column]
        public int ccrfa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_ccrf_id.
        /// </summary>
        [Column]
        public int ccrfa_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_ccrfat_id.
        /// </summary>
        [Column]
        public int ccrfa_ccrfat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_subject.
        /// </summary>
        [Column]
        public string ccrfa_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_add_user.
        /// </summary>
        [Column]
        public string ccrfa_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_mod_user.
        /// </summary>
        [Column]
        public string ccrfa_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_add_date.
        /// </summary>
        [Column]
        public DateTime ccrfa_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_mod_date.
        /// </summary>
        [Column]
        public DateTime ccrfa_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_sort.
        /// </summary>
        [Column]
        public int ccrfa_sort { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_url.
        /// </summary>
        [Column]
        public string ccrfa_url { get; set; }

        /// <summary>
        /// Gets or sets the ccrfa_body.
        /// </summary>
        [Column]
        public string ccrfa_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_requisition_form_attachment_type] table.
    /// </summary>
    [TableName("[dbo].[cc_requisition_form_attachment_type]")]
    [PrimaryKey("ccrfat_id")]
    [ExplicitColumns]
    public partial class cc_requisition_form_attachment_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrfat_id.
        /// </summary>
        [Column]
        public int ccrfat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfat_name.
        /// </summary>
        [Column]
        public string ccrfat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_requisition_form_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_requisition_form_custom_fields]")]
    [PrimaryKey("ccrfcf_id")]
    [ExplicitColumns]
    public partial class cc_requisition_form_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrfcf_id.
        /// </summary>
        [Column]
        public int ccrfcf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_cf_id.
        /// </summary>
        [Column]
        public int ccrfcf_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_ccrf_id.
        /// </summary>
        [Column]
        public int ccrfcf_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_required.
        /// </summary>
        [Column]
        public bool ccrfcf_required { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_visible.
        /// </summary>
        [Column]
        public bool ccrfcf_visible { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_sort.
        /// </summary>
        [Column]
        public int ccrfcf_sort { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_cft_id.
        /// </summary>
        [Column]
        public int? ccrfcf_cft_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_cfc_id.
        /// </summary>
        [Column]
        public int? ccrfcf_cfc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_cfs_id.
        /// </summary>
        [Column]
        public int? ccrfcf_cfs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_hidden_until_trigger.
        /// </summary>
        [Column]
        public bool? ccrfcf_hidden_until_trigger { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_is_layout_field.
        /// </summary>
        [Column]
        public bool ccrfcf_is_layout_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_requisition_form_system_fields] table.
    /// </summary>
    [TableName("[dbo].[cc_requisition_form_system_fields]")]
    [PrimaryKey("ccrfsf_id")]
    [ExplicitColumns]
    public partial class cc_requisition_form_system_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrfsf_id.
        /// </summary>
        [Column]
        public int ccrfsf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsf_ccrf_id.
        /// </summary>
        [Column]
        public int ccrfsf_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsf_ccrfsfs_id.
        /// </summary>
        [Column]
        public int ccrfsf_ccrfsfs_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_requisition_form_system_fields_source] table.
    /// </summary>
    [TableName("[dbo].[cc_requisition_form_system_fields_source]")]
    [PrimaryKey("ccrfsfs_id")]
    [ExplicitColumns]
    public partial class cc_requisition_form_system_fields_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrfsfs_id.
        /// </summary>
        [Column]
        public int ccrfsfs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsfs_name.
        /// </summary>
        [Column]
        public string ccrfsfs_name { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsfs_caption.
        /// </summary>
        [Column]
        public string ccrfsfs_caption { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsfs_column_index.
        /// </summary>
        [Column]
        public int ccrfsfs_column_index { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsfs_column_sort.
        /// </summary>
        [Column]
        public int ccrfsfs_column_sort { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsfs_ccd_source_column.
        /// </summary>
        [Column]
        public string ccrfsfs_ccd_source_column { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsfs_display_type.
        /// </summary>
        [Column]
        public int ccrfsfs_display_type { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsfs_vendor_profile_field.
        /// </summary>
        [Column]
        public bool ccrfsfs_vendor_profile_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_review_style] table.
    /// </summary>
    [TableName("[dbo].[cc_review_style]")]
    [PrimaryKey("ccrs_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_review_styleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrs_id.
        /// </summary>
        [Column]
        public int ccrs_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrs_name.
        /// </summary>
        [Column]
        public string ccrs_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_review_type] table.
    /// </summary>
    [TableName("[dbo].[cc_review_type]")]
    [PrimaryKey("ccrt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_review_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccrt_id.
        /// </summary>
        [Column]
        public int ccrt_id { get; set; }

        /// <summary>
        /// Gets or sets the ccrt_name.
        /// </summary>
        [Column]
        public string ccrt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cc_time_type] table.
    /// </summary>
    [TableName("[dbo].[cc_time_type]")]
    [PrimaryKey("cctt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class cc_time_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cctt_id.
        /// </summary>
        [Column]
        public int cctt_id { get; set; }

        /// <summary>
        /// Gets or sets the cctt_name.
        /// </summary>
        [Column]
        public string cctt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccdat_attachment_types] table.
    /// </summary>
    [TableName("[dbo].[ccdat_attachment_types]")]
    [PrimaryKey("ccdatat_id")]
    [ExplicitColumns]
    public partial class ccdat_attachment_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccdatat_id.
        /// </summary>
        [Column]
        public int ccdatat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdatat_org_id.
        /// </summary>
        [Column]
        public int ccdatat_org_id { get; set; }

        /// <summary>
        /// Gets or sets the ccdatat_ccdat_id.
        /// </summary>
        [Column]
        public int ccdatat_ccdat_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_adhoc] table.
    /// </summary>
    [TableName("[dbo].[ccv_adhoc]")]
    [ExplicitColumns]
    public partial class ccv_adhocRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the Attachment_Comments.
        /// </summary>
        [Column("Attachment Comments")] 
        public string Attachment_Comments { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Subject.
        /// </summary>
        [Column("Attachment Subject")] 
        public string Attachment_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Type.
        /// </summary>
        [Column("Attachment Type")] 
        public string Attachment_Type { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Type.
        /// </summary>
        [Column("Contract Type")] 
        public string Contract_Type { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Type_Identification_Number.
        /// </summary>
        [Column("Contract Type Identification Number")] 
        public int? Contract_Type_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Identification_Number.
        /// </summary>
        [Column("Contracting Entity Identification Number")] 
        public int? Contracting_Entity_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Name.
        /// </summary>
        [Column("Contracting Entity Name")] 
        public string Contracting_Entity_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Reference_Number.
        /// </summary>
        [Column("Contracting Entity Reference Number")] 
        public string Contracting_Entity_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Short_Name.
        /// </summary>
        [Column("Contracting Entity Short Name")] 
        public string Contracting_Entity_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Department_Identification_Number.
        /// </summary>
        [Column("Department Identification Number")] 
        public int? Department_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Department_Name.
        /// </summary>
        [Column("Department Name")] 
        public string Department_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Number.
        /// </summary>
        [Column("Document Number")] 
        public int? Document_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Source.
        /// </summary>
        [Column("Document Source")] 
        public string Document_Source { get; set; }

        /// <summary>
        /// Gets or sets the Document_Subject.
        /// </summary>
        [Column("Document Subject")] 
        public string Document_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Identification_Number.
        /// </summary>
        [Column("Organization Identification Number")] 
        public int? Organization_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Name.
        /// </summary>
        [Column("Organization Name")] 
        public string Organization_Name { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Short_Name.
        /// </summary>
        [Column("Organization Short Name")] 
        public string Organization_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Identification_Number.
        /// </summary>
        [Column("Site Identification Number")] 
        public int? Site_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Name.
        /// </summary>
        [Column("Site Name")] 
        public string Site_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Short_Name.
        /// </summary>
        [Column("Site Short Name")] 
        public string Site_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Reference_Number.
        /// </summary>
        [Column("Site Reference Number")] 
        public string Site_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Line_1.
        /// </summary>
        [Column("Site Mailing Address Line 1")] 
        public string Site_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Line_2.
        /// </summary>
        [Column("Site Mailing Address Line 2")] 
        public string Site_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_City.
        /// </summary>
        [Column("Site Mailing Address City")] 
        public string Site_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_State.
        /// </summary>
        [Column("Site Mailing Address State")] 
        public string Site_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Site_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Site Mailing Address Zip Code")] 
        public string Site_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Last_Name.
        /// </summary>
        [Column("Site Contact Last Name")] 
        public string Site_Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_First_Name.
        /// </summary>
        [Column("Site Contact First Name")] 
        public string Site_Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Phone_Number.
        /// </summary>
        [Column("Site Contact Phone Number")] 
        public string Site_Contact_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Fax_Number.
        /// </summary>
        [Column("Site Contact Fax Number")] 
        public string Site_Contact_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Mobile_Number.
        /// </summary>
        [Column("Site Contact Mobile Number")] 
        public string Site_Contact_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Pager_Number.
        /// </summary>
        [Column("Site Contact Pager Number")] 
        public string Site_Contact_Pager_Number { get; set; }

        /// <summary>
        /// Gets or sets the Site_Contact_Email_Address.
        /// </summary>
        [Column("Site Contact Email Address")] 
        public string Site_Contact_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Name.
        /// </summary>
        [Column("Vendor Name")] 
        public string Vendor_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Identification_Number.
        /// </summary>
        [Column("Vendor Identification Number")] 
        public int? Vendor_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Reference_Number.
        /// </summary>
        [Column("Vendor Reference Number")] 
        public string Vendor_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Last_Name.
        /// </summary>
        [Column("Vendor Contact Last Name")] 
        public string Vendor_Contact_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_First_Name.
        /// </summary>
        [Column("Vendor Contact First Name")] 
        public string Vendor_Contact_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Phone_Number.
        /// </summary>
        [Column("Vendor Contact Phone Number")] 
        public string Vendor_Contact_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Fax_Number.
        /// </summary>
        [Column("Vendor Contact Fax Number")] 
        public string Vendor_Contact_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Email_Address.
        /// </summary>
        [Column("Vendor Contact Email Address")] 
        public string Vendor_Contact_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Mobile_Number.
        /// </summary>
        [Column("Vendor Contact Mobile Number")] 
        public string Vendor_Contact_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Contact_Pager_Number.
        /// </summary>
        [Column("Vendor Contact Pager Number")] 
        public string Vendor_Contact_Pager_Number { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Line_1.
        /// </summary>
        [Column("Vendor Mailing Address Line 1")] 
        public string Vendor_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Line_2.
        /// </summary>
        [Column("Vendor Mailing Address Line 2")] 
        public string Vendor_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_City.
        /// </summary>
        [Column("Vendor Mailing Address City")] 
        public string Vendor_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_State.
        /// </summary>
        [Column("Vendor Mailing Address State")] 
        public string Vendor_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Vendor Mailing Address Zip Code")] 
        public string Vendor_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Identification_Number.
        /// </summary>
        [Column("Document Originator Identification Number")] 
        public int? Document_Originator_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_User_Name.
        /// </summary>
        [Column("Document Originator User Name")] 
        public string Document_Originator_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Email_Address.
        /// </summary>
        [Column("Document Originator Email Address")] 
        public string Document_Originator_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Last_Name.
        /// </summary>
        [Column("Document Originator Last Name")] 
        public string Document_Originator_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_First_Name.
        /// </summary>
        [Column("Document Originator First Name")] 
        public string Document_Originator_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Middle_Name.
        /// </summary>
        [Column("Document Originator Middle Name")] 
        public string Document_Originator_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Phone_Number.
        /// </summary>
        [Column("Document Originator Phone Number")] 
        public string Document_Originator_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Fax_Number.
        /// </summary>
        [Column("Document Originator Fax Number")] 
        public string Document_Originator_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mobile_Number.
        /// </summary>
        [Column("Document Originator Mobile Number")] 
        public string Document_Originator_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Line_1.
        /// </summary>
        [Column("Document Originator Mailing Address Line 1")] 
        public string Document_Originator_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Line_2.
        /// </summary>
        [Column("Document Originator Mailing Address Line 2")] 
        public string Document_Originator_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_City.
        /// </summary>
        [Column("Document Originator Mailing Address City")] 
        public string Document_Originator_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_State.
        /// </summary>
        [Column("Document Originator Mailing Address State")] 
        public string Document_Originator_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Document_Originator_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Document Originator Mailing Address Zip Code")] 
        public string Document_Originator_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Origination_Date.
        /// </summary>
        [Column("Document Origination Date")] 
        public DateTime? Document_Origination_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Status.
        /// </summary>
        [Column("Document Status")] 
        public string Document_Status { get; set; }

        /// <summary>
        /// Gets or sets the Document_Status_Date.
        /// </summary>
        [Column("Document Status Date")] 
        public DateTime? Document_Status_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Style.
        /// </summary>
        [Column("Document Review Style")] 
        public string Document_Review_Style { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Type.
        /// </summary>
        [Column("Document Review Type")] 
        public string Document_Review_Type { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Time_Type.
        /// </summary>
        [Column("Document Review Time Type")] 
        public string Document_Review_Time_Type { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Time_Delay.
        /// </summary>
        [Column("Document Review Time Delay")] 
        public int? Document_Review_Time_Delay { get; set; }

        /// <summary>
        /// Gets or sets the Document_Path.
        /// </summary>
        [Column("Document Path")] 
        public string Document_Path { get; set; }

        /// <summary>
        /// Gets or sets the Document_Comments.
        /// </summary>
        [Column("Document Comments")] 
        public string Document_Comments { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Identification_Number.
        /// </summary>
        [Column("Document Reviewer Identification Number")] 
        public int? Document_Reviewer_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_User_Name.
        /// </summary>
        [Column("Document Reviewer User Name")] 
        public string Document_Reviewer_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Email_Address.
        /// </summary>
        [Column("Document Reviewer Email Address")] 
        public string Document_Reviewer_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Last_Name.
        /// </summary>
        [Column("Document Reviewer Last Name")] 
        public string Document_Reviewer_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_First_Name.
        /// </summary>
        [Column("Document Reviewer First Name")] 
        public string Document_Reviewer_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Middle_Name.
        /// </summary>
        [Column("Document Reviewer Middle Name")] 
        public string Document_Reviewer_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Phone_Number.
        /// </summary>
        [Column("Document Reviewer Phone Number")] 
        public string Document_Reviewer_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Fax_Number.
        /// </summary>
        [Column("Document Reviewer Fax Number")] 
        public string Document_Reviewer_Fax_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mobile_Number.
        /// </summary>
        [Column("Document Reviewer Mobile Number")] 
        public string Document_Reviewer_Mobile_Number { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Line_1.
        /// </summary>
        [Column("Document Reviewer Mailing Address Line 1")] 
        public string Document_Reviewer_Mailing_Address_Line_1 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Line_2.
        /// </summary>
        [Column("Document Reviewer Mailing Address Line 2")] 
        public string Document_Reviewer_Mailing_Address_Line_2 { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_City.
        /// </summary>
        [Column("Document Reviewer Mailing Address City")] 
        public string Document_Reviewer_Mailing_Address_City { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_State.
        /// </summary>
        [Column("Document Reviewer Mailing Address State")] 
        public string Document_Reviewer_Mailing_Address_State { get; set; }

        /// <summary>
        /// Gets or sets the Document_Reviewer_Mailing_Address_Zip_Code.
        /// </summary>
        [Column("Document Reviewer Mailing Address Zip Code")] 
        public string Document_Reviewer_Mailing_Address_Zip_Code { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Status.
        /// </summary>
        [Column("Document Review Status")] 
        public string Document_Review_Status { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Comment.
        /// </summary>
        [Column("Document Review Comment")] 
        public string Document_Review_Comment { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_Start_Date.
        /// </summary>
        [Column("Document Review Start Date")] 
        public DateTime? Document_Review_Start_Date { get; set; }

        /// <summary>
        /// Gets or sets the Document_Review_End_Date.
        /// </summary>
        [Column("Document Review End Date")] 
        public DateTime? Document_Review_End_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Effective_Date.
        /// </summary>
        [Column("Contract Effective Date")] 
        public DateTime? Contract_Effective_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Expiration_Date.
        /// </summary>
        [Column("Contract Expiration Date")] 
        public DateTime? Contract_Expiration_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal.
        /// </summary>
        [Column("Contract Automatic Renewal")] 
        public string Contract_Automatic_Renewal { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal_Term.
        /// </summary>
        [Column("Contract Automatic Renewal Term")] 
        public int? Contract_Automatic_Renewal_Term { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Automatic_Renewal_Time.
        /// </summary>
        [Column("Contract Automatic Renewal Time")] 
        public int? Contract_Automatic_Renewal_Time { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Action_List.
        /// </summary>
        [Column("Contract Action List")] 
        public string Contract_Action_List { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Group.
        /// </summary>
        [Column("Contract Group")] 
        public string Contract_Group { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Signatory_Name.
        /// </summary>
        [Column("Contract Signatory Name")] 
        public string Contract_Signatory_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Signatory_Title.
        /// </summary>
        [Column("Contract Signatory Title")] 
        public string Contract_Signatory_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Primary_Responsible_Party.
        /// </summary>
        [Column("Contract Primary Responsible Party")] 
        public int? Contract_Primary_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Primary_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Primary Responsible Party Title")] 
        public string Contract_Primary_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Secondary_Responsible_Party.
        /// </summary>
        [Column("Contract Secondary Responsible Party")] 
        public int? Contract_Secondary_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Secondary_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Secondary Responsible Party Title")] 
        public string Contract_Secondary_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Third_Responsible_Party.
        /// </summary>
        [Column("Contract Third Responsible Party")] 
        public int? Contract_Third_Responsible_Party { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Third_Responsible_Party_Title.
        /// </summary>
        [Column("Contract Third Responsible Party Title")] 
        public string Contract_Third_Responsible_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_PO_Number.
        /// </summary>
        [Column("Contract PO Number")] 
        public string Contract_PO_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Monthly_Value.
        /// </summary>
        [Column("Contract Monthly Value")] 
        public decimal? Contract_Monthly_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Annual_Value.
        /// </summary>
        [Column("Contract Annual Value")] 
        public decimal? Contract_Annual_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Total_Value.
        /// </summary>
        [Column("Contract Total Value")] 
        public decimal? Contract_Total_Value { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Value_Escalates.
        /// </summary>
        [Column("Contract Value Escalates")] 
        public int? Contract_Value_Escalates { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Partial_Year.
        /// </summary>
        [Column("Contract Partial Year")] 
        public int? Contract_Partial_Year { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Other_Party_Signatory_Name.
        /// </summary>
        [Column("Contract Other Party Signatory Name")] 
        public string Contract_Other_Party_Signatory_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Other_Party_Signatory_Title.
        /// </summary>
        [Column("Contract Other Party Signatory Title")] 
        public string Contract_Other_Party_Signatory_Title { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Product.
        /// </summary>
        [Column("Contract Product")] 
        public string Contract_Product { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Description.
        /// </summary>
        [Column("Contract Description")] 
        public string Contract_Description { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Term_Undefined.
        /// </summary>
        [Column("Contract Term Undefined")] 
        public string Contract_Term_Undefined { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Term.
        /// </summary>
        [Column("Contract Term")] 
        public string Contract_Term { get; set; }

        /// <summary>
        /// Gets or sets the Document_Pending_Signature.
        /// </summary>
        [Column("Document Pending Signature")] 
        public string Document_Pending_Signature { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_User_Name.
        /// </summary>
        [Column("Document Requestor User Name")] 
        public string Document_Requestor_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Email.
        /// </summary>
        [Column("Document Requestor Email")] 
        public string Document_Requestor_Email { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Last_Name.
        /// </summary>
        [Column("Document Requestor Last Name")] 
        public string Document_Requestor_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_First_Name.
        /// </summary>
        [Column("Document Requestor First Name")] 
        public string Document_Requestor_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Middle_Name.
        /// </summary>
        [Column("Document Requestor Middle Name")] 
        public string Document_Requestor_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Document_Requestor_Phone_Number.
        /// </summary>
        [Column("Document Requestor Phone Number")] 
        public string Document_Requestor_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the CFLDCID.
        /// </summary>
        [Column]
        public int? CFLDCID { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_1.
        /// </summary>
        [Column("Sample Field 1")] 
        public string Sample_Field_1 { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_2.
        /// </summary>
        [Column("Sample Field 2")] 
        public string Sample_Field_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_bundle] table.
    /// </summary>
    [TableName("[dbo].[ccv_bundle]")]
    [PrimaryKey("b_bundle_id")]
    [ExplicitColumns]
    public partial class ccv_bundleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the b_bundle_id.
        /// </summary>
        [Column]
        public int b_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the b_display.
        /// </summary>
        [Column]
        public string b_display { get; set; }

        /// <summary>
        /// Gets or sets the b_type.
        /// </summary>
        [Column]
        public int? b_type { get; set; }

        /// <summary>
        /// Gets or sets the b_status.
        /// </summary>
        [Column]
        public int b_status { get; set; }

        /// <summary>
        /// Gets or sets the b_expiration_date.
        /// </summary>
        [Column]
        public DateTime? b_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the b_reviewed_date.
        /// </summary>
        [Column]
        public DateTime? b_reviewed_date { get; set; }

        /// <summary>
        /// Gets or sets the b_created_date.
        /// </summary>
        [Column]
        public DateTime b_created_date { get; set; }

        /// <summary>
        /// Gets or sets the b_created_by_uid.
        /// </summary>
        [Column]
        public int b_created_by_uid { get; set; }

        /// <summary>
        /// Gets or sets the b_model_bundle_id.
        /// </summary>
        [Column]
        public int? b_model_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the b_deleted.
        /// </summary>
        [Column]
        public bool b_deleted { get; set; }

        /// <summary>
        /// Gets or sets the b_last_reviewed_date.
        /// </summary>
        [Column]
        public DateTime? b_last_reviewed_date { get; set; }

        /// <summary>
        /// Gets or sets the b_last_reviewed_by_uid.
        /// </summary>
        [Column]
        public int? b_last_reviewed_by_uid { get; set; }

        /// <summary>
        /// Gets or sets the b_contract_cost_type.
        /// </summary>
        [Column]
        public int? b_contract_cost_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_bundle_category] table.
    /// </summary>
    [TableName("[dbo].[ccv_bundle_category]")]
    [PrimaryKey("bc_bundle_category_id")]
    [ExplicitColumns]
    public partial class ccv_bundle_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the bc_bundle_category_id.
        /// </summary>
        [Column]
        public int bc_bundle_category_id { get; set; }

        /// <summary>
        /// Gets or sets the bc_bundle_id.
        /// </summary>
        [Column]
        public int bc_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the bc_category_id.
        /// </summary>
        [Column]
        public int bc_category_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_bundle_criteria_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_bundle_criteria_value]")]
    [PrimaryKey("bcv_bundle_criteria_value_id")]
    [ExplicitColumns]
    public partial class ccv_bundle_criteria_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the bcv_bundle_criteria_value_id.
        /// </summary>
        [Column]
        public int bcv_bundle_criteria_value_id { get; set; }

        /// <summary>
        /// Gets or sets the bcv_criteria_id.
        /// </summary>
        [Column]
        public int bcv_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the bcv_bundle_id.
        /// </summary>
        [Column]
        public int bcv_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the bcv_expiration_date.
        /// </summary>
        [Column]
        public DateTime? bcv_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the bcv_string_value.
        /// </summary>
        [Column]
        public string bcv_string_value { get; set; }

        /// <summary>
        /// Gets or sets the bcv_integer_value.
        /// </summary>
        [Column]
        public int? bcv_integer_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_bundle_field] table.
    /// </summary>
    [TableName("[dbo].[ccv_bundle_field]")]
    [PrimaryKey("bf_bundle_field_id")]
    [ExplicitColumns]
    public partial class ccv_bundle_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the bf_bundle_field_id.
        /// </summary>
        [Column]
        public int bf_bundle_field_id { get; set; }

        /// <summary>
        /// Gets or sets the bf_bundle_id.
        /// </summary>
        [Column]
        public int bf_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the bf_field_id.
        /// </summary>
        [Column]
        public int bf_field_id { get; set; }

        /// <summary>
        /// Gets or sets the bf_column.
        /// </summary>
        [Column]
        public int bf_column { get; set; }

        /// <summary>
        /// Gets or sets the bf_sequence.
        /// </summary>
        [Column]
        public int bf_sequence { get; set; }

        /// <summary>
        /// Gets or sets the bf_required.
        /// </summary>
        [Column]
        public bool bf_required { get; set; }

        /// <summary>
        /// Gets or sets the bf_prompted.
        /// </summary>
        [Column]
        public bool bf_prompted { get; set; }

        /// <summary>
        /// Gets or sets the bf_custom_prompt.
        /// </summary>
        [Column]
        public string bf_custom_prompt { get; set; }

        /// <summary>
        /// Gets or sets the bf_default_value_string.
        /// </summary>
        [Column]
        public string bf_default_value_string { get; set; }

        /// <summary>
        /// Gets or sets the bf_default_value_integer.
        /// </summary>
        [Column]
        public int? bf_default_value_integer { get; set; }

        /// <summary>
        /// Gets or sets the bf_default_value_datetime.
        /// </summary>
        [Column]
        public DateTime? bf_default_value_datetime { get; set; }

        /// <summary>
        /// Gets or sets the bf_default_value_currency.
        /// </summary>
        [Column]
        public decimal? bf_default_value_currency { get; set; }

        /// <summary>
        /// Gets or sets the bf_default_currency_code.
        /// </summary>
        [Column]
        public string bf_default_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the bf_data_driven.
        /// </summary>
        [Column]
        public bool bf_data_driven { get; set; }

        /// <summary>
        /// Gets or sets the bf_data_driven_operator.
        /// </summary>
        [Column]
        public int? bf_data_driven_operator { get; set; }

        /// <summary>
        /// Gets or sets the bf_data_driven_date_value.
        /// </summary>
        [Column]
        public DateTime? bf_data_driven_date_value { get; set; }

        /// <summary>
        /// Gets or sets the bf_data_driven_string_value.
        /// </summary>
        [Column]
        public string bf_data_driven_string_value { get; set; }

        /// <summary>
        /// Gets or sets the bf_data_driven_field_id.
        /// </summary>
        [Column]
        public int? bf_data_driven_field_id { get; set; }

        /// <summary>
        /// Gets or sets the bf_display_behavior.
        /// </summary>
        [Column]
        public int? bf_display_behavior { get; set; }

        /// <summary>
        /// Gets or sets the bf_compliance.
        /// </summary>
        [Column]
        public bool bf_compliance { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_bundle_literal] table.
    /// </summary>
    [TableName("[dbo].[ccv_bundle_literal]")]
    [PrimaryKey("bl_bundle_literal_id")]
    [ExplicitColumns]
    public partial class ccv_bundle_literalRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the bl_bundle_literal_id.
        /// </summary>
        [Column]
        public int bl_bundle_literal_id { get; set; }

        /// <summary>
        /// Gets or sets the bl_bundle_id.
        /// </summary>
        [Column]
        public int bl_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the bl_literal_type.
        /// </summary>
        [Column]
        public int bl_literal_type { get; set; }

        /// <summary>
        /// Gets or sets the bl_body.
        /// </summary>
        [Column]
        public string bl_body { get; set; }

        /// <summary>
        /// Gets or sets the bl_column.
        /// </summary>
        [Column]
        public int bl_column { get; set; }

        /// <summary>
        /// Gets or sets the bl_sequence.
        /// </summary>
        [Column]
        public int bl_sequence { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_bundle_sub_category] table.
    /// </summary>
    [TableName("[dbo].[ccv_bundle_sub_category]")]
    [PrimaryKey("bsc_bundle_sub_category_id")]
    [ExplicitColumns]
    public partial class ccv_bundle_sub_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the bsc_bundle_sub_category_id.
        /// </summary>
        [Column]
        public int bsc_bundle_sub_category_id { get; set; }

        /// <summary>
        /// Gets or sets the bsc_bundle_id.
        /// </summary>
        [Column]
        public int bsc_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the bsc_sub_category_id.
        /// </summary>
        [Column]
        public int bsc_sub_category_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_bundle_template] table.
    /// </summary>
    [TableName("[dbo].[ccv_bundle_template]")]
    [PrimaryKey("bt_bundle_template_id")]
    [ExplicitColumns]
    public partial class ccv_bundle_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the bt_bundle_template_id.
        /// </summary>
        [Column]
        public int bt_bundle_template_id { get; set; }

        /// <summary>
        /// Gets or sets the bt_bundle_id.
        /// </summary>
        [Column]
        public int bt_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the bt_template_id.
        /// </summary>
        [Column]
        public int bt_template_id { get; set; }

        /// <summary>
        /// Gets or sets the bt_sequence.
        /// </summary>
        [Column]
        public int bt_sequence { get; set; }

        /// <summary>
        /// Gets or sets the bt_parent_id.
        /// </summary>
        [Column]
        public int? bt_parent_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_category] table.
    /// </summary>
    [TableName("[dbo].[ccv_category]")]
    [PrimaryKey("c_category_id")]
    [ExplicitColumns]
    public partial class ccv_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the c_category_id.
        /// </summary>
        [Column]
        public int c_category_id { get; set; }

        /// <summary>
        /// Gets or sets the c_display.
        /// </summary>
        [Column]
        public string c_display { get; set; }

        /// <summary>
        /// Gets or sets the c_system.
        /// </summary>
        [Column]
        public bool c_system { get; set; }

        /// <summary>
        /// Gets or sets the c_enabled.
        /// </summary>
        [Column]
        public bool c_enabled { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_ccd_workflow_reviewer_comments] table.
    /// </summary>
    [TableName("[dbo].[ccv_ccd_workflow_reviewer_comments]")]
    [ExplicitColumns]
    public partial class ccv_ccd_workflow_reviewer_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cwrc_id.
        /// </summary>
        [Column]
        public int cwrc_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrc_cwrs_workflow_reviewer_schedule_id.
        /// </summary>
        [Column]
        public int cwrc_cwrs_workflow_reviewer_schedule_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrc_date.
        /// </summary>
        [Column]
        public DateTime cwrc_date { get; set; }

        /// <summary>
        /// Gets or sets the cwrc_comments.
        /// </summary>
        [Column]
        public string cwrc_comments { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_ccd_workflow_reviewer_schedule] table.
    /// </summary>
    [TableName("[dbo].[ccv_ccd_workflow_reviewer_schedule]")]
    [PrimaryKey("cwrs_workflow_reviewer_schedule_id")]
    [ExplicitColumns]
    public partial class ccv_ccd_workflow_reviewer_scheduleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cwrs_workflow_reviewer_schedule_id.
        /// </summary>
        [Column]
        public int cwrs_workflow_reviewer_schedule_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_ccd_id.
        /// </summary>
        [Column]
        public int cwrs_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_workflow_step_user_id.
        /// </summary>
        [Column]
        public int cwrs_workflow_step_user_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_workflow_step_id.
        /// </summary>
        [Column]
        public int cwrs_workflow_step_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_order.
        /// </summary>
        [Column]
        public int cwrs_order { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_review_started.
        /// </summary>
        [Column]
        public DateTime? cwrs_review_started { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_reviewed.
        /// </summary>
        [Column]
        public bool? cwrs_reviewed { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_reviewed_by_u_id.
        /// </summary>
        [Column]
        public int? cwrs_reviewed_by_u_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_reviewed_date.
        /// </summary>
        [Column]
        public DateTime? cwrs_reviewed_date { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_reviewed_comments.
        /// </summary>
        [Column]
        public string cwrs_reviewed_comments { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_deleted.
        /// </summary>
        [Column]
        public int? cwrs_deleted { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_deleted_on.
        /// </summary>
        [Column]
        public int? cwrs_deleted_on { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_deleted_by_u_id.
        /// </summary>
        [Column]
        public int? cwrs_deleted_by_u_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_signed_by_u_id.
        /// </summary>
        [Column]
        public int? cwrs_signed_by_u_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_signed_date.
        /// </summary>
        [Column]
        public DateTime? cwrs_signed_date { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_status_id.
        /// </summary>
        [Column]
        public int? cwrs_status_id { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_status_date.
        /// </summary>
        [Column]
        public DateTime? cwrs_status_date { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_review_ended.
        /// </summary>
        [Column]
        public DateTime? cwrs_review_ended { get; set; }

        /// <summary>
        /// Gets or sets the cwrs_workflow_step_type.
        /// </summary>
        [Column]
        public int? cwrs_workflow_step_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_ccd_workflow_step] table.
    /// </summary>
    [TableName("[dbo].[ccv_ccd_workflow_step]")]
    [PrimaryKey("cws_workflow_step_id")]
    [ExplicitColumns]
    public partial class ccv_ccd_workflow_stepRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cws_workflow_step_id.
        /// </summary>
        [Column]
        public int cws_workflow_step_id { get; set; }

        /// <summary>
        /// Gets or sets the cws_workflow_id.
        /// </summary>
        [Column]
        public int? cws_workflow_id { get; set; }

        /// <summary>
        /// Gets or sets the cws_name.
        /// </summary>
        [Column]
        public string cws_name { get; set; }

        /// <summary>
        /// Gets or sets the cws_position.
        /// </summary>
        [Column]
        public int cws_position { get; set; }

        /// <summary>
        /// Gets or sets the cws_type.
        /// </summary>
        [Column]
        public int cws_type { get; set; }

        /// <summary>
        /// Gets or sets the cws_signature_required.
        /// </summary>
        [Column]
        public bool cws_signature_required { get; set; }

        /// <summary>
        /// Gets or sets the cws_number_required_to_complete.
        /// </summary>
        [Column]
        public int? cws_number_required_to_complete { get; set; }

        /// <summary>
        /// Gets or sets the cws_complete.
        /// </summary>
        [Column]
        public int? cws_complete { get; set; }

        /// <summary>
        /// Gets or sets the cws_user_id.
        /// </summary>
        [Column]
        public int? cws_user_id { get; set; }

        /// <summary>
        /// Gets or sets the cws_group_id.
        /// </summary>
        [Column]
        public int? cws_group_id { get; set; }

        /// <summary>
        /// Gets or sets the cws_role_id.
        /// </summary>
        [Column]
        public int? cws_role_id { get; set; }

        /// <summary>
        /// Gets or sets the cws_ccd_id.
        /// </summary>
        [Column]
        public int? cws_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the cws_workflow_type.
        /// </summary>
        [Column]
        public int cws_workflow_type { get; set; }

        /// <summary>
        /// Gets or sets the cws_dependencies.
        /// </summary>
        [Column]
        public string cws_dependencies { get; set; }

        /// <summary>
        /// Gets or sets the cws_conditional.
        /// </summary>
        [Column]
        public bool? cws_conditional { get; set; }

        /// <summary>
        /// Gets or sets the cws_signature_step.
        /// </summary>
        [Column]
        public bool? cws_signature_step { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_clause] table.
    /// </summary>
    [TableName("[dbo].[ccv_clause]")]
    [PrimaryKey("c_clause_id")]
    [ExplicitColumns]
    public partial class ccv_clauseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the c_clause_id.
        /// </summary>
        [Column]
        public int c_clause_id { get; set; }

        /// <summary>
        /// Gets or sets the c_name.
        /// </summary>
        [Column]
        public string c_name { get; set; }

        /// <summary>
        /// Gets or sets the c_body.
        /// </summary>
        [Column]
        public string c_body { get; set; }

        /// <summary>
        /// Gets or sets the c_url.
        /// </summary>
        [Column]
        public string c_url { get; set; }

        /// <summary>
        /// Gets or sets the c_expiration_date.
        /// </summary>
        [Column]
        public DateTime? c_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the c_deleted.
        /// </summary>
        [Column]
        public bool c_deleted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_clause_criteria] table.
    /// </summary>
    [TableName("[dbo].[ccv_clause_criteria]")]
    [PrimaryKey("cc_clause_criteria_id")]
    [ExplicitColumns]
    public partial class ccv_clause_criteriumRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cc_clause_criteria_id.
        /// </summary>
        [Column]
        public int cc_clause_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_clause_id.
        /// </summary>
        [Column]
        public int cc_clause_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_field_id.
        /// </summary>
        [Column]
        public int cc_field_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_operator.
        /// </summary>
        [Column]
        public string cc_operator { get; set; }

        /// <summary>
        /// Gets or sets the cc_value.
        /// </summary>
        [Column]
        public string cc_value { get; set; }

        /// <summary>
        /// Gets or sets the cc_predicate.
        /// </summary>
        [Column]
        public int? cc_predicate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_clause_field] table.
    /// </summary>
    [TableName("[dbo].[ccv_clause_field]")]
    [PrimaryKey("cf_clause_field_id")]
    [ExplicitColumns]
    public partial class ccv_clause_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cf_clause_field_id.
        /// </summary>
        [Column]
        public int cf_clause_field_id { get; set; }

        /// <summary>
        /// Gets or sets the cf_clause_id.
        /// </summary>
        [Column]
        public int cf_clause_id { get; set; }

        /// <summary>
        /// Gets or sets the cf_field_id.
        /// </summary>
        [Column]
        public int cf_field_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_country] table.
    /// </summary>
    [TableName("[dbo].[ccv_country]")]
    [PrimaryKey("c_country_id")]
    [ExplicitColumns]
    public partial class ccv_countryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the c_country_id.
        /// </summary>
        [Column]
        public int c_country_id { get; set; }

        /// <summary>
        /// Gets or sets the c_code.
        /// </summary>
        [Column]
        public string c_code { get; set; }

        /// <summary>
        /// Gets or sets the c_display.
        /// </summary>
        [Column]
        public string c_display { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_county] table.
    /// </summary>
    [TableName("[dbo].[ccv_county]")]
    [PrimaryKey("cn_county_id")]
    [ExplicitColumns]
    public partial class ccv_countyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cn_county_id.
        /// </summary>
        [Column]
        public int cn_county_id { get; set; }

        /// <summary>
        /// Gets or sets the cn_state_id.
        /// </summary>
        [Column]
        public int cn_state_id { get; set; }

        /// <summary>
        /// Gets or sets the cn_display.
        /// </summary>
        [Column]
        public string cn_display { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_criteria] table.
    /// </summary>
    [TableName("[dbo].[ccv_criteria]")]
    [PrimaryKey("c_criteria_id")]
    [ExplicitColumns]
    public partial class ccv_criteriumRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the c_criteria_id.
        /// </summary>
        [Column]
        public int c_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the c_display.
        /// </summary>
        [Column]
        public string c_display { get; set; }

        /// <summary>
        /// Gets or sets the c_behavior.
        /// </summary>
        [Column]
        public string c_behavior { get; set; }

        /// <summary>
        /// Gets or sets the c_datatype.
        /// </summary>
        [Column]
        public int c_datatype { get; set; }

        /// <summary>
        /// Gets or sets the c_enabled.
        /// </summary>
        [Column]
        public bool c_enabled { get; set; }

        /// <summary>
        /// Gets or sets the c_parent_id.
        /// </summary>
        [Column]
        public int? c_parent_id { get; set; }

        /// <summary>
        /// Gets or sets the c_sequence.
        /// </summary>
        [Column]
        public int c_sequence { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_criteria_category] table.
    /// </summary>
    [TableName("[dbo].[ccv_criteria_category]")]
    [PrimaryKey("cc_criteria_category_id")]
    [ExplicitColumns]
    public partial class ccv_criteria_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cc_criteria_category_id.
        /// </summary>
        [Column]
        public int cc_criteria_category_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_criteria_id.
        /// </summary>
        [Column]
        public int cc_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_category_id.
        /// </summary>
        [Column]
        public int cc_category_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_criteria_sub_category] table.
    /// </summary>
    [TableName("[dbo].[ccv_criteria_sub_category]")]
    [PrimaryKey("csc_criteria_sub_category_id")]
    [ExplicitColumns]
    public partial class ccv_criteria_sub_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the csc_criteria_sub_category_id.
        /// </summary>
        [Column]
        public int csc_criteria_sub_category_id { get; set; }

        /// <summary>
        /// Gets or sets the csc_criteria_id.
        /// </summary>
        [Column]
        public int csc_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the csc_sub_category_id.
        /// </summary>
        [Column]
        public int csc_sub_category_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_data_driven_criteria] table.
    /// </summary>
    [TableName("[dbo].[ccv_data_driven_criteria]")]
    [PrimaryKey("ddc_criteria_id")]
    [ExplicitColumns]
    public partial class ccv_data_driven_criteriumRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ddc_criteria_id.
        /// </summary>
        [Column]
        public int ddc_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the ddc_object_id.
        /// </summary>
        [Column]
        public int ddc_object_id { get; set; }

        /// <summary>
        /// Gets or sets the ddc_object_type.
        /// </summary>
        [Column]
        public int ddc_object_type { get; set; }

        /// <summary>
        /// Gets or sets the ddc_field_id.
        /// </summary>
        [Column]
        public int ddc_field_id { get; set; }

        /// <summary>
        /// Gets or sets the ddc_operator.
        /// </summary>
        [Column]
        public string ddc_operator { get; set; }

        /// <summary>
        /// Gets or sets the ddc_value.
        /// </summary>
        [Column]
        public string ddc_value { get; set; }

        /// <summary>
        /// Gets or sets the ddc_predicate.
        /// </summary>
        [Column]
        public int? ddc_predicate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_document_draft] table.
    /// </summary>
    [TableName("[dbo].[ccv_document_draft]")]
    [PrimaryKey("dd_id")]
    [ExplicitColumns]
    public partial class ccv_document_draftRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the dd_id.
        /// </summary>
        [Column]
        public int dd_id { get; set; }

        /// <summary>
        /// Gets or sets the dd_name.
        /// </summary>
        [Column]
        public string dd_name { get; set; }

        /// <summary>
        /// Gets or sets the dd_user_id.
        /// </summary>
        [Column]
        public int dd_user_id { get; set; }

        /// <summary>
        /// Gets or sets the dd_bundle_id.
        /// </summary>
        [Column]
        public int dd_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the dd_create_date.
        /// </summary>
        [Column]
        public DateTime? dd_create_date { get; set; }

        /// <summary>
        /// Gets or sets the dd_deleted.
        /// </summary>
        [Column]
        public bool dd_deleted { get; set; }

        /// <summary>
        /// Gets or sets the dd_type.
        /// </summary>
        [Column]
        public int? dd_type { get; set; }

        /// <summary>
        /// Gets or sets the dd_department.
        /// </summary>
        [Column]
        public int? dd_department { get; set; }

        /// <summary>
        /// Gets or sets the dd_entity.
        /// </summary>
        [Column]
        public int? dd_entity { get; set; }

        /// <summary>
        /// Gets or sets the dd_vendor.
        /// </summary>
        [Column]
        public int? dd_vendor { get; set; }

        /// <summary>
        /// Gets or sets the dd_c_id.
        /// </summary>
        [Column]
        public int? dd_c_id { get; set; }

        /// <summary>
        /// Gets or sets the dd_quick_bundle.
        /// </summary>
        [Column]
        public bool dd_quick_bundle { get; set; }

        /// <summary>
        /// Gets or sets the dd_if_id.
        /// </summary>
        [Column]
        public int? dd_if_id { get; set; }

        /// <summary>
        /// Gets or sets the dd_state.
        /// </summary>
        [Column]
        public int? dd_state { get; set; }

        /// <summary>
        /// Gets or sets the dd_sites.
        /// </summary>
        [Column]
        public string dd_sites { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_document_draft_clause] table.
    /// </summary>
    [TableName("[dbo].[ccv_document_draft_clause]")]
    [PrimaryKey("ddc_id")]
    [ExplicitColumns]
    public partial class ccv_document_draft_clauseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ddc_id.
        /// </summary>
        [Column]
        public int ddc_id { get; set; }

        /// <summary>
        /// Gets or sets the ddc_draft_id.
        /// </summary>
        [Column]
        public int ddc_draft_id { get; set; }

        /// <summary>
        /// Gets or sets the ddc_clause_id.
        /// </summary>
        [Column]
        public int ddc_clause_id { get; set; }

        /// <summary>
        /// Gets or sets the ddc_group_id.
        /// </summary>
        [Column]
        public string ddc_group_id { get; set; }

        /// <summary>
        /// Gets or sets the ddc_display.
        /// </summary>
        [Column]
        public bool ddc_display { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_document_draft_cost_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_document_draft_cost_value]")]
    [PrimaryKey("cddcv_id")]
    [ExplicitColumns]
    public partial class ccv_document_draft_cost_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cddcv_id.
        /// </summary>
        [Column]
        public int cddcv_id { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_dd_id.
        /// </summary>
        [Column]
        public int cddcv_dd_id { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_ccf_id.
        /// </summary>
        [Column]
        public int cddcv_ccf_id { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_details.
        /// </summary>
        [Column]
        public string cddcv_details { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_unit.
        /// </summary>
        [Column]
        public double? cddcv_unit { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_ccu_id.
        /// </summary>
        [Column]
        public int? cddcv_ccu_id { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_year.
        /// </summary>
        [Column]
        public int? cddcv_year { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_period.
        /// </summary>
        [Column]
        public int? cddcv_period { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_total.
        /// </summary>
        [Column]
        public double cddcv_total { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_fixed.
        /// </summary>
        [Column]
        public bool cddcv_fixed { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_total_currency_code.
        /// </summary>
        [Column]
        public string cddcv_total_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the cddcv_cct_id.
        /// </summary>
        [Column]
        public int? cddcv_cct_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_document_draft_fields] table.
    /// </summary>
    [TableName("[dbo].[ccv_document_draft_fields]")]
    [PrimaryKey("ddf_id")]
    [ExplicitColumns]
    public partial class ccv_document_draft_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ddf_id.
        /// </summary>
        [Column]
        public int ddf_id { get; set; }

        /// <summary>
        /// Gets or sets the ddf_draft_id.
        /// </summary>
        [Column]
        public int ddf_draft_id { get; set; }

        /// <summary>
        /// Gets or sets the ddf_field_id.
        /// </summary>
        [Column]
        public int ddf_field_id { get; set; }

        /// <summary>
        /// Gets or sets the ddf_string_value.
        /// </summary>
        [Column]
        public string ddf_string_value { get; set; }

        /// <summary>
        /// Gets or sets the ddf_date_value.
        /// </summary>
        [Column]
        public DateTime? ddf_date_value { get; set; }

        /// <summary>
        /// Gets or sets the ddf_display.
        /// </summary>
        [Column]
        public string ddf_display { get; set; }

        /// <summary>
        /// Gets or sets the ddf_data_driven.
        /// </summary>
        [Column]
        public bool ddf_data_driven { get; set; }

        /// <summary>
        /// Gets or sets the ddf_data_driven_operator.
        /// </summary>
        [Column]
        public int? ddf_data_driven_operator { get; set; }

        /// <summary>
        /// Gets or sets the ddf_data_driven_date_value.
        /// </summary>
        [Column]
        public DateTime? ddf_data_driven_date_value { get; set; }

        /// <summary>
        /// Gets or sets the ddf_data_driven_string_value.
        /// </summary>
        [Column]
        public string ddf_data_driven_string_value { get; set; }

        /// <summary>
        /// Gets or sets the ddf_data_driven_field_id.
        /// </summary>
        [Column]
        public int? ddf_data_driven_field_id { get; set; }

        /// <summary>
        /// Gets or sets the ddf_column.
        /// </summary>
        [Column]
        public int? ddf_column { get; set; }

        /// <summary>
        /// Gets or sets the ddf_sequence.
        /// </summary>
        [Column]
        public int? ddf_sequence { get; set; }

        /// <summary>
        /// Gets or sets the ddf_type.
        /// </summary>
        [Column]
        public int ddf_type { get; set; }

        /// <summary>
        /// Gets or sets the ddf_required.
        /// </summary>
        [Column]
        public bool ddf_required { get; set; }

        /// <summary>
        /// Gets or sets the ddf_display_behavior.
        /// </summary>
        [Column]
        public int? ddf_display_behavior { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_document_draft_templates] table.
    /// </summary>
    [TableName("[dbo].[ccv_document_draft_templates]")]
    [PrimaryKey("ddt_id")]
    [ExplicitColumns]
    public partial class ccv_document_draft_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ddt_id.
        /// </summary>
        [Column]
        public int ddt_id { get; set; }

        /// <summary>
        /// Gets or sets the ddt_draft_id.
        /// </summary>
        [Column]
        public int ddt_draft_id { get; set; }

        /// <summary>
        /// Gets or sets the ddt_template_id.
        /// </summary>
        [Column]
        public int ddt_template_id { get; set; }

        /// <summary>
        /// Gets or sets the ddt_sequence.
        /// </summary>
        [Column]
        public int? ddt_sequence { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_document_field_value_mapping] table.
    /// </summary>
    [TableName("[dbo].[ccv_document_field_value_mapping]")]
    [ExplicitColumns]
    public partial class ccv_document_field_value_mappingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the field_id.
        /// </summary>
        [Column]
        public int field_id { get; set; }

        /// <summary>
        /// Gets or sets the document_id.
        /// </summary>
        [Column]
        public int document_id { get; set; }

        /// <summary>
        /// Gets or sets the field_value.
        /// </summary>
        [Column]
        public string field_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_docusign_anchor_tab_offset_unit] table.
    /// </summary>
    [TableName("[dbo].[ccv_docusign_anchor_tab_offset_unit]")]
    [PrimaryKey("cdatou_id")]
    [ExplicitColumns]
    public partial class ccv_docusign_anchor_tab_offset_unitRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cdatou_id.
        /// </summary>
        [Column]
        public int cdatou_id { get; set; }

        /// <summary>
        /// Gets or sets the cdatou_name.
        /// </summary>
        [Column]
        public string cdatou_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_docusign_custom_tab_type] table.
    /// </summary>
    [TableName("[dbo].[ccv_docusign_custom_tab_type]")]
    [PrimaryKey("cdctt_id")]
    [ExplicitColumns]
    public partial class ccv_docusign_custom_tab_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cdctt_id.
        /// </summary>
        [Column]
        public int cdctt_id { get; set; }

        /// <summary>
        /// Gets or sets the cdctt_name.
        /// </summary>
        [Column]
        public string cdctt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_docusign_tab] table.
    /// </summary>
    [TableName("[dbo].[ccv_docusign_tab]")]
    [PrimaryKey("cdt_id")]
    [ExplicitColumns]
    public partial class ccv_docusign_tabRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cdt_id.
        /// </summary>
        [Column]
        public int cdt_id { get; set; }

        /// <summary>
        /// Gets or sets the cdt_cwrs_workflow_reviewer_schedule_id.
        /// </summary>
        [Column]
        public int cdt_cwrs_workflow_reviewer_schedule_id { get; set; }

        /// <summary>
        /// Gets or sets the cdt_cdtt_id.
        /// </summary>
        [Column]
        public int cdt_cdtt_id { get; set; }

        /// <summary>
        /// Gets or sets the cdt_page_number.
        /// </summary>
        [Column]
        public string cdt_page_number { get; set; }

        /// <summary>
        /// Gets or sets the cdt_x_position.
        /// </summary>
        [Column]
        public string cdt_x_position { get; set; }

        /// <summary>
        /// Gets or sets the cdt_y_position.
        /// </summary>
        [Column]
        public string cdt_y_position { get; set; }

        /// <summary>
        /// Gets or sets the cdt_anchor_tab_string.
        /// </summary>
        [Column]
        public string cdt_anchor_tab_string { get; set; }

        /// <summary>
        /// Gets or sets the cdt_anchor_tab_x_offset.
        /// </summary>
        [Column]
        public int? cdt_anchor_tab_x_offset { get; set; }

        /// <summary>
        /// Gets or sets the cdt_anchor_tab_y_offset.
        /// </summary>
        [Column]
        public int? cdt_anchor_tab_y_offset { get; set; }

        /// <summary>
        /// Gets or sets the cdt_cdatou_id.
        /// </summary>
        [Column]
        public int? cdt_cdatou_id { get; set; }

        /// <summary>
        /// Gets or sets the cdt_anchor_tab_ignore_if_not_present.
        /// </summary>
        [Column]
        public bool? cdt_anchor_tab_ignore_if_not_present { get; set; }

        /// <summary>
        /// Gets or sets the cdt_anchor_tab_ignore_if_not_present_specified.
        /// </summary>
        [Column]
        public bool? cdt_anchor_tab_ignore_if_not_present_specified { get; set; }

        /// <summary>
        /// Gets or sets the cdt_scaled_tab_value.
        /// </summary>
        [Column]
        public int? cdt_scaled_tab_value { get; set; }

        /// <summary>
        /// Gets or sets the cdt_cdctt_id.
        /// </summary>
        [Column]
        public int? cdt_cdctt_id { get; set; }

        /// <summary>
        /// Gets or sets the cdt_custom_tab_radio_group_name.
        /// </summary>
        [Column]
        public string cdt_custom_tab_radio_group_name { get; set; }

        /// <summary>
        /// Gets or sets the cdt_custom_tab_label.
        /// </summary>
        [Column]
        public string cdt_custom_tab_label { get; set; }

        /// <summary>
        /// Gets or sets the cdt_custom_tab_name.
        /// </summary>
        [Column]
        public string cdt_custom_tab_name { get; set; }

        /// <summary>
        /// Gets or sets the cdt_custom_tab_value.
        /// </summary>
        [Column]
        public string cdt_custom_tab_value { get; set; }

        /// <summary>
        /// Gets or sets the cdt_custom_conditional_parent_label.
        /// </summary>
        [Column]
        public string cdt_custom_conditional_parent_label { get; set; }

        /// <summary>
        /// Gets or sets the cdt_custom_conditional_parent_value.
        /// </summary>
        [Column]
        public string cdt_custom_conditional_parent_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_docusign_tab_type] table.
    /// </summary>
    [TableName("[dbo].[ccv_docusign_tab_type]")]
    [PrimaryKey("cdtt_id")]
    [ExplicitColumns]
    public partial class ccv_docusign_tab_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cdtt_id.
        /// </summary>
        [Column]
        public int cdtt_id { get; set; }

        /// <summary>
        /// Gets or sets the cdtt_name.
        /// </summary>
        [Column]
        public string cdtt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_explicit_access_document] table.
    /// </summary>
    [TableName("[dbo].[ccv_explicit_access_document]")]
    [PrimaryKey("ead_d_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ccv_explicit_access_documentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ead_d_id.
        /// </summary>
        [Column]
        public int ead_d_id { get; set; }

        /// <summary>
        /// Gets or sets the ead_u_id.
        /// </summary>
        [Column]
        public int ead_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ead_allow.
        /// </summary>
        [Column]
        public short ead_allow { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_field] table.
    /// </summary>
    [TableName("[dbo].[ccv_field]")]
    [PrimaryKey("f_field_id")]
    [ExplicitColumns]
    public partial class ccv_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the f_field_id.
        /// </summary>
        [Column]
        public int f_field_id { get; set; }

        /// <summary>
        /// Gets or sets the f_adhoc_id.
        /// </summary>
        [Column]
        public string f_adhoc_id { get; set; }

        /// <summary>
        /// Gets or sets the f_required.
        /// </summary>
        [Column]
        public bool f_required { get; set; }

        /// <summary>
        /// Gets or sets the f_prompted.
        /// </summary>
        [Column]
        public bool f_prompted { get; set; }

        /// <summary>
        /// Gets or sets the f_compliance.
        /// </summary>
        [Column]
        public bool f_compliance { get; set; }

        /// <summary>
        /// Gets or sets the f_custom_prompt.
        /// </summary>
        [Column]
        public string f_custom_prompt { get; set; }

        /// <summary>
        /// Gets or sets the f_default_value_string.
        /// </summary>
        [Column]
        public string f_default_value_string { get; set; }

        /// <summary>
        /// Gets or sets the f_default_value_integer.
        /// </summary>
        [Column]
        public int? f_default_value_integer { get; set; }

        /// <summary>
        /// Gets or sets the f_default_value_datetime.
        /// </summary>
        [Column]
        public DateTime? f_default_value_datetime { get; set; }

        /// <summary>
        /// Gets or sets the f_default_value_currency.
        /// </summary>
        [Column]
        public decimal? f_default_value_currency { get; set; }

        /// <summary>
        /// Gets or sets the f_default_currency_code.
        /// </summary>
        [Column]
        public string f_default_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the f_control_type.
        /// </summary>
        [Column]
        public int? f_control_type { get; set; }

        /// <summary>
        /// Gets or sets the f_display_field.
        /// </summary>
        [Column]
        public string f_display_field { get; set; }

        /// <summary>
        /// Gets or sets the f_value_field.
        /// </summary>
        [Column]
        public string f_value_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_field_block] table.
    /// </summary>
    [TableName("[dbo].[ccv_field_block]")]
    [PrimaryKey("fb_field_block_id")]
    [ExplicitColumns]
    public partial class ccv_field_blockRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fb_field_block_id.
        /// </summary>
        [Column]
        public int fb_field_block_id { get; set; }

        /// <summary>
        /// Gets or sets the fb_display.
        /// </summary>
        [Column]
        public string fb_display { get; set; }

        /// <summary>
        /// Gets or sets the fb_description.
        /// </summary>
        [Column]
        public string fb_description { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_field_block_criteria_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_field_block_criteria_value]")]
    [PrimaryKey("fbcv_field_block_criteria_value_id")]
    [ExplicitColumns]
    public partial class ccv_field_block_criteria_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fbcv_field_block_criteria_value_id.
        /// </summary>
        [Column]
        public int fbcv_field_block_criteria_value_id { get; set; }

        /// <summary>
        /// Gets or sets the fbcv_criteria_id.
        /// </summary>
        [Column]
        public int fbcv_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the fbcv_field_block_id.
        /// </summary>
        [Column]
        public int fbcv_field_block_id { get; set; }

        /// <summary>
        /// Gets or sets the fbcv_expiration_date.
        /// </summary>
        [Column]
        public DateTime? fbcv_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the fbcv_string_value.
        /// </summary>
        [Column]
        public string fbcv_string_value { get; set; }

        /// <summary>
        /// Gets or sets the fbcv_integer_value.
        /// </summary>
        [Column]
        public int? fbcv_integer_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_field_block_field] table.
    /// </summary>
    [TableName("[dbo].[ccv_field_block_field]")]
    [PrimaryKey("fbf_field_block_field_id")]
    [ExplicitColumns]
    public partial class ccv_field_block_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fbf_field_block_field_id.
        /// </summary>
        [Column]
        public int fbf_field_block_field_id { get; set; }

        /// <summary>
        /// Gets or sets the fbf_field_block_id.
        /// </summary>
        [Column]
        public int fbf_field_block_id { get; set; }

        /// <summary>
        /// Gets or sets the fbf_field_id.
        /// </summary>
        [Column]
        public int fbf_field_id { get; set; }

        /// <summary>
        /// Gets or sets the fbf_required.
        /// </summary>
        [Column]
        public bool fbf_required { get; set; }

        /// <summary>
        /// Gets or sets the fbf_prompted.
        /// </summary>
        [Column]
        public bool fbf_prompted { get; set; }

        /// <summary>
        /// Gets or sets the fbf_compliance.
        /// </summary>
        [Column]
        public bool fbf_compliance { get; set; }

        /// <summary>
        /// Gets or sets the fbf_default_value_string.
        /// </summary>
        [Column]
        public string fbf_default_value_string { get; set; }

        /// <summary>
        /// Gets or sets the fbf_default_value_integer.
        /// </summary>
        [Column]
        public int? fbf_default_value_integer { get; set; }

        /// <summary>
        /// Gets or sets the fbf_default_value_datetime.
        /// </summary>
        [Column]
        public DateTime? fbf_default_value_datetime { get; set; }

        /// <summary>
        /// Gets or sets the fbf_default_value_currency.
        /// </summary>
        [Column]
        public decimal? fbf_default_value_currency { get; set; }

        /// <summary>
        /// Gets or sets the fbf_default_currency_code.
        /// </summary>
        [Column]
        public string fbf_default_currency_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_field_set] table.
    /// </summary>
    [TableName("[dbo].[ccv_field_set]")]
    [PrimaryKey("fs_field_set_id")]
    [ExplicitColumns]
    public partial class ccv_field_setRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fs_field_set_id.
        /// </summary>
        [Column]
        public int fs_field_set_id { get; set; }

        /// <summary>
        /// Gets or sets the fs_display.
        /// </summary>
        [Column]
        public string fs_display { get; set; }

        /// <summary>
        /// Gets or sets the fs_description.
        /// </summary>
        [Column]
        public string fs_description { get; set; }

        /// <summary>
        /// Gets or sets the fs_organization_contract_type_id.
        /// </summary>
        [Column]
        public int? fs_organization_contract_type_id { get; set; }

        /// <summary>
        /// Gets or sets the fs_default.
        /// </summary>
        [Column]
        public bool fs_default { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_field_set_criteria_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_field_set_criteria_value]")]
    [PrimaryKey("fscv_field_set_criteria_value_id")]
    [ExplicitColumns]
    public partial class ccv_field_set_criteria_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fscv_field_set_criteria_value_id.
        /// </summary>
        [Column]
        public int fscv_field_set_criteria_value_id { get; set; }

        /// <summary>
        /// Gets or sets the fscv_criteria_id.
        /// </summary>
        [Column]
        public int fscv_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the fscv_field_set_id.
        /// </summary>
        [Column]
        public int fscv_field_set_id { get; set; }

        /// <summary>
        /// Gets or sets the fscv_expiration_date.
        /// </summary>
        [Column]
        public DateTime? fscv_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the fscv_string_value.
        /// </summary>
        [Column]
        public string fscv_string_value { get; set; }

        /// <summary>
        /// Gets or sets the fscv_integer_value.
        /// </summary>
        [Column]
        public int? fscv_integer_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_field_set_field] table.
    /// </summary>
    [TableName("[dbo].[ccv_field_set_field]")]
    [PrimaryKey("fsf_field_set_field_id")]
    [ExplicitColumns]
    public partial class ccv_field_set_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fsf_field_set_field_id.
        /// </summary>
        [Column]
        public int fsf_field_set_field_id { get; set; }

        /// <summary>
        /// Gets or sets the fsf_field_set_id.
        /// </summary>
        [Column]
        public int fsf_field_set_id { get; set; }

        /// <summary>
        /// Gets or sets the fsf_field_id.
        /// </summary>
        [Column]
        public int fsf_field_id { get; set; }

        /// <summary>
        /// Gets or sets the fsf_required.
        /// </summary>
        [Column]
        public bool fsf_required { get; set; }

        /// <summary>
        /// Gets or sets the fsf_prompted.
        /// </summary>
        [Column]
        public bool fsf_prompted { get; set; }

        /// <summary>
        /// Gets or sets the fsf_compliance.
        /// </summary>
        [Column]
        public bool fsf_compliance { get; set; }

        /// <summary>
        /// Gets or sets the fsf_default_value_string.
        /// </summary>
        [Column]
        public string fsf_default_value_string { get; set; }

        /// <summary>
        /// Gets or sets the fsf_default_value_integer.
        /// </summary>
        [Column]
        public int? fsf_default_value_integer { get; set; }

        /// <summary>
        /// Gets or sets the fsf_default_value_datetime.
        /// </summary>
        [Column]
        public DateTime? fsf_default_value_datetime { get; set; }

        /// <summary>
        /// Gets or sets the fsf_default_value_currency.
        /// </summary>
        [Column]
        public decimal? fsf_default_value_currency { get; set; }

        /// <summary>
        /// Gets or sets the fsf_default_currency_code.
        /// </summary>
        [Column]
        public string fsf_default_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the fsf_data_driven.
        /// </summary>
        [Column]
        public bool fsf_data_driven { get; set; }

        /// <summary>
        /// Gets or sets the fsf_data_driven_operator.
        /// </summary>
        [Column]
        public int? fsf_data_driven_operator { get; set; }

        /// <summary>
        /// Gets or sets the fsf_data_driven_date_value.
        /// </summary>
        [Column]
        public DateTime? fsf_data_driven_date_value { get; set; }

        /// <summary>
        /// Gets or sets the fsf_data_driven_string_value.
        /// </summary>
        [Column]
        public string fsf_data_driven_string_value { get; set; }

        /// <summary>
        /// Gets or sets the fsf_data_driven_fsf_id.
        /// </summary>
        [Column]
        public int? fsf_data_driven_fsf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_form] table.
    /// </summary>
    [TableName("[dbo].[ccv_form]")]
    [PrimaryKey("f_form_id")]
    [ExplicitColumns]
    public partial class ccv_formRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the f_form_id.
        /// </summary>
        [Column]
        public int f_form_id { get; set; }

        /// <summary>
        /// Gets or sets the f_display.
        /// </summary>
        [Column]
        public string f_display { get; set; }

        /// <summary>
        /// Gets or sets the f_columns.
        /// </summary>
        [Column]
        public int f_columns { get; set; }

        /// <summary>
        /// Gets or sets the f_created_date.
        /// </summary>
        [Column]
        public DateTime f_created_date { get; set; }

        /// <summary>
        /// Gets or sets the f_created_by_uid.
        /// </summary>
        [Column]
        public int f_created_by_uid { get; set; }

        /// <summary>
        /// Gets or sets the f_deleted.
        /// </summary>
        [Column]
        public bool f_deleted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_form_criteria_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_form_criteria_value]")]
    [PrimaryKey("fcv_form_criteria_value_id")]
    [ExplicitColumns]
    public partial class ccv_form_criteria_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fcv_form_criteria_value_id.
        /// </summary>
        [Column]
        public int fcv_form_criteria_value_id { get; set; }

        /// <summary>
        /// Gets or sets the fcv_criteria_id.
        /// </summary>
        [Column]
        public int fcv_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the fcv_form_id.
        /// </summary>
        [Column]
        public int fcv_form_id { get; set; }

        /// <summary>
        /// Gets or sets the fcv_expiration_date.
        /// </summary>
        [Column]
        public DateTime? fcv_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the fcv_string_value.
        /// </summary>
        [Column]
        public string fcv_string_value { get; set; }

        /// <summary>
        /// Gets or sets the fcv_integer_value.
        /// </summary>
        [Column]
        public int? fcv_integer_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_form_field] table.
    /// </summary>
    [TableName("[dbo].[ccv_form_field]")]
    [PrimaryKey("ff_form_field_id")]
    [ExplicitColumns]
    public partial class ccv_form_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ff_form_field_id.
        /// </summary>
        [Column]
        public int ff_form_field_id { get; set; }

        /// <summary>
        /// Gets or sets the ff_form_id.
        /// </summary>
        [Column]
        public int ff_form_id { get; set; }

        /// <summary>
        /// Gets or sets the ff_field_id.
        /// </summary>
        [Column]
        public int? ff_field_id { get; set; }

        /// <summary>
        /// Gets or sets the ff_column.
        /// </summary>
        [Column]
        public int ff_column { get; set; }

        /// <summary>
        /// Gets or sets the ff_sequence.
        /// </summary>
        [Column]
        public int ff_sequence { get; set; }

        /// <summary>
        /// Gets or sets the ff_required.
        /// </summary>
        [Column]
        public bool ff_required { get; set; }

        /// <summary>
        /// Gets or sets the ff_prompted.
        /// </summary>
        [Column]
        public bool ff_prompted { get; set; }

        /// <summary>
        /// Gets or sets the ff_custom_prompt.
        /// </summary>
        [Column]
        public string ff_custom_prompt { get; set; }

        /// <summary>
        /// Gets or sets the ff_type.
        /// </summary>
        [Column]
        public int ff_type { get; set; }

        /// <summary>
        /// Gets or sets the ff_default_value_string.
        /// </summary>
        [Column]
        public string ff_default_value_string { get; set; }

        /// <summary>
        /// Gets or sets the ff_default_value_integer.
        /// </summary>
        [Column]
        public int? ff_default_value_integer { get; set; }

        /// <summary>
        /// Gets or sets the ff_default_value_datetime.
        /// </summary>
        [Column]
        public DateTime? ff_default_value_datetime { get; set; }

        /// <summary>
        /// Gets or sets the ff_default_value_currency.
        /// </summary>
        [Column]
        public decimal? ff_default_value_currency { get; set; }

        /// <summary>
        /// Gets or sets the ff_default_currency_code.
        /// </summary>
        [Column]
        public string ff_default_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the ff_data_driven.
        /// </summary>
        [Column]
        public bool ff_data_driven { get; set; }

        /// <summary>
        /// Gets or sets the ff_data_driven_operator.
        /// </summary>
        [Column]
        public int? ff_data_driven_operator { get; set; }

        /// <summary>
        /// Gets or sets the ff_data_driven_date_value.
        /// </summary>
        [Column]
        public DateTime? ff_data_driven_date_value { get; set; }

        /// <summary>
        /// Gets or sets the ff_data_driven_string_value.
        /// </summary>
        [Column]
        public string ff_data_driven_string_value { get; set; }

        /// <summary>
        /// Gets or sets the ff_data_driven_field_id.
        /// </summary>
        [Column]
        public int? ff_data_driven_field_id { get; set; }

        /// <summary>
        /// Gets or sets the ff_display_behavior.
        /// </summary>
        [Column]
        public int? ff_display_behavior { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form]")]
    [PrimaryKey("if_intake_form_id")]
    [ExplicitColumns]
    public partial class ccv_intake_formRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the if_intake_form_id.
        /// </summary>
        [Column]
        public int if_intake_form_id { get; set; }

        /// <summary>
        /// Gets or sets the if_f_form_id.
        /// </summary>
        [Column]
        public int if_f_form_id { get; set; }

        /// <summary>
        /// Gets or sets the if_name.
        /// </summary>
        [Column]
        public string if_name { get; set; }

        /// <summary>
        /// Gets or sets the if_columns.
        /// </summary>
        [Column]
        public int if_columns { get; set; }

        /// <summary>
        /// Gets or sets the if_organization_id.
        /// </summary>
        [Column]
        public int? if_organization_id { get; set; }

        /// <summary>
        /// Gets or sets the if_contract_type_id.
        /// </summary>
        [Column]
        public int? if_contract_type_id { get; set; }

        /// <summary>
        /// Gets or sets the if_entity_id.
        /// </summary>
        [Column]
        public int? if_entity_id { get; set; }

        /// <summary>
        /// Gets or sets the if_department_id.
        /// </summary>
        [Column]
        public int? if_department_id { get; set; }

        /// <summary>
        /// Gets or sets the if_site_ids.
        /// </summary>
        [Column]
        public string if_site_ids { get; set; }

        /// <summary>
        /// Gets or sets the if_state_id.
        /// </summary>
        [Column]
        public int? if_state_id { get; set; }

        /// <summary>
        /// Gets or sets the if_vendor_id.
        /// </summary>
        [Column]
        public int? if_vendor_id { get; set; }

        /// <summary>
        /// Gets or sets the if_vendor_new.
        /// </summary>
        [Column]
        public int? if_vendor_new { get; set; }

        /// <summary>
        /// Gets or sets the if_workflow_id.
        /// </summary>
        [Column]
        public int? if_workflow_id { get; set; }

        /// <summary>
        /// Gets or sets the if_created_by_user_id.
        /// </summary>
        [Column]
        public int? if_created_by_user_id { get; set; }

        /// <summary>
        /// Gets or sets the if_created_date.
        /// </summary>
        [Column]
        public DateTime? if_created_date { get; set; }

        /// <summary>
        /// Gets or sets the if_modified_date.
        /// </summary>
        [Column]
        public DateTime? if_modified_date { get; set; }

        /// <summary>
        /// Gets or sets the if_deleted.
        /// </summary>
        [Column]
        public bool if_deleted { get; set; }

        /// <summary>
        /// Gets or sets the if_replacement_contract_id.
        /// </summary>
        [Column]
        public int? if_replacement_contract_id { get; set; }

        /// <summary>
        /// Gets or sets the if_suppliment_contract_id.
        /// </summary>
        [Column]
        public int? if_suppliment_contract_id { get; set; }

        /// <summary>
        /// Gets or sets the if_status_id.
        /// </summary>
        [Column]
        public int? if_status_id { get; set; }

        /// <summary>
        /// Gets or sets the if_pushed_date.
        /// </summary>
        [Column]
        public DateTime? if_pushed_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_attachment] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_attachment]")]
    [PrimaryKey("ccvifa_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ccv_intake_form_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccvifa_id.
        /// </summary>
        [Column]
        public int ccvifa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccvifa_ccvif_id.
        /// </summary>
        [Column]
        public int ccvifa_ccvif_id { get; set; }

        /// <summary>
        /// Gets or sets the ccvifat_id.
        /// </summary>
        [Column]
        public int ccvifat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccvifa_u_id.
        /// </summary>
        [Column]
        public int ccvifa_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccvifa_date.
        /// </summary>
        [Column]
        public DateTime ccvifa_date { get; set; }

        /// <summary>
        /// Gets or sets the ccvifa_subject.
        /// </summary>
        [Column]
        public string ccvifa_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccvifa_sort.
        /// </summary>
        [Column]
        public int ccvifa_sort { get; set; }

        /// <summary>
        /// Gets or sets the ccvifa_doc_path.
        /// </summary>
        [Column]
        public string ccvifa_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the ccvifa_body.
        /// </summary>
        [Column]
        public string ccvifa_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_attachment_type] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_attachment_type]")]
    [PrimaryKey("ccvifat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ccv_intake_form_attachment_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccvifat_id.
        /// </summary>
        [Column]
        public int ccvifat_id { get; set; }

        /// <summary>
        /// Gets or sets the ccvifat_name.
        /// </summary>
        [Column]
        public string ccvifat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_comments] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_comments]")]
    [PrimaryKey("ifc_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ifc_id.
        /// </summary>
        [Column]
        public int ifc_id { get; set; }

        /// <summary>
        /// Gets or sets the ifc_u_id.
        /// </summary>
        [Column]
        public int ifc_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ifc_if_id.
        /// </summary>
        [Column]
        public int ifc_if_id { get; set; }

        /// <summary>
        /// Gets or sets the ifc_timestamp.
        /// </summary>
        [Column]
        public DateTime ifc_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ifc_comment.
        /// </summary>
        [Column]
        public string ifc_comment { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_critical_dates] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_critical_dates]")]
    [PrimaryKey("ifcd_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_critical_dateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ifcd_id.
        /// </summary>
        [Column]
        public int ifcd_id { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_if_id.
        /// </summary>
        [Column]
        public int ifcd_if_id { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_u_id_author.
        /// </summary>
        [Column]
        public int ifcd_u_id_author { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_subject.
        /// </summary>
        [Column]
        public string ifcd_subject { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_date.
        /// </summary>
        [Column]
        public DateTime ifcd_date { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_comment.
        /// </summary>
        [Column]
        public string ifcd_comment { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_cdes_id.
        /// </summary>
        [Column]
        public int? ifcd_cdes_id { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_email_stop_date.
        /// </summary>
        [Column]
        public DateTime? ifcd_email_stop_date { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_email_interval.
        /// </summary>
        [Column]
        public int? ifcd_email_interval { get; set; }

        /// <summary>
        /// Gets or sets the ifcd_email_after_date.
        /// </summary>
        [Column]
        public int? ifcd_email_after_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_field] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_field]")]
    [PrimaryKey("iff_intake_form_field_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the iff_intake_form_field_id.
        /// </summary>
        [Column]
        public int iff_intake_form_field_id { get; set; }

        /// <summary>
        /// Gets or sets the iff_intake_form_id.
        /// </summary>
        [Column]
        public int iff_intake_form_id { get; set; }

        /// <summary>
        /// Gets or sets the iff_field_id.
        /// </summary>
        [Column]
        public int? iff_field_id { get; set; }

        /// <summary>
        /// Gets or sets the iff_column.
        /// </summary>
        [Column]
        public int iff_column { get; set; }

        /// <summary>
        /// Gets or sets the iff_sequence.
        /// </summary>
        [Column]
        public int iff_sequence { get; set; }

        /// <summary>
        /// Gets or sets the iff_required.
        /// </summary>
        [Column]
        public bool iff_required { get; set; }

        /// <summary>
        /// Gets or sets the iff_prompted.
        /// </summary>
        [Column]
        public bool iff_prompted { get; set; }

        /// <summary>
        /// Gets or sets the iff_custom_prompt.
        /// </summary>
        [Column]
        public string iff_custom_prompt { get; set; }

        /// <summary>
        /// Gets or sets the iff_type.
        /// </summary>
        [Column]
        public int iff_type { get; set; }

        /// <summary>
        /// Gets or sets the iff_default_value_string.
        /// </summary>
        [Column]
        public string iff_default_value_string { get; set; }

        /// <summary>
        /// Gets or sets the iff_default_value_integer.
        /// </summary>
        [Column]
        public int? iff_default_value_integer { get; set; }

        /// <summary>
        /// Gets or sets the iff_default_value_datetime.
        /// </summary>
        [Column]
        public DateTime? iff_default_value_datetime { get; set; }

        /// <summary>
        /// Gets or sets the iff_default_value_currency.
        /// </summary>
        [Column]
        public decimal? iff_default_value_currency { get; set; }

        /// <summary>
        /// Gets or sets the iff_default_currency_code.
        /// </summary>
        [Column]
        public string iff_default_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the iff_data_driven.
        /// </summary>
        [Column]
        public bool iff_data_driven { get; set; }

        /// <summary>
        /// Gets or sets the iff_data_driven_operator.
        /// </summary>
        [Column]
        public int? iff_data_driven_operator { get; set; }

        /// <summary>
        /// Gets or sets the iff_data_driven_date_value.
        /// </summary>
        [Column]
        public DateTime? iff_data_driven_date_value { get; set; }

        /// <summary>
        /// Gets or sets the iff_data_driven_string_value.
        /// </summary>
        [Column]
        public string iff_data_driven_string_value { get; set; }

        /// <summary>
        /// Gets or sets the iff_data_driven_field_id.
        /// </summary>
        [Column]
        public int? iff_data_driven_field_id { get; set; }

        /// <summary>
        /// Gets or sets the iff_display_behavior.
        /// </summary>
        [Column]
        public int? iff_display_behavior { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_notes] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_notes]")]
    [PrimaryKey("ifn_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_noteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ifn_id.
        /// </summary>
        [Column]
        public int ifn_id { get; set; }

        /// <summary>
        /// Gets or sets the ifn_if_id.
        /// </summary>
        [Column]
        public int ifn_if_id { get; set; }

        /// <summary>
        /// Gets or sets the ifn_cnt_id.
        /// </summary>
        [Column]
        public int ifn_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the ifn_subject.
        /// </summary>
        [Column]
        public string ifn_subject { get; set; }

        /// <summary>
        /// Gets or sets the ifn_add_user.
        /// </summary>
        [Column]
        public string ifn_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ifn_add_date.
        /// </summary>
        [Column]
        public DateTime ifn_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ifn_mod_user.
        /// </summary>
        [Column]
        public string ifn_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ifn_mod_date.
        /// </summary>
        [Column]
        public DateTime ifn_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the ifn_sort.
        /// </summary>
        [Column]
        public int ifn_sort { get; set; }

        /// <summary>
        /// Gets or sets the ifn_att_url.
        /// </summary>
        [Column]
        public string ifn_att_url { get; set; }

        /// <summary>
        /// Gets or sets the ifn_body.
        /// </summary>
        [Column]
        public string ifn_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_workflow] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_workflow]")]
    [PrimaryKey("ifw_intake_form_workflow_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ifw_intake_form_workflow_id.
        /// </summary>
        [Column]
        public int ifw_intake_form_workflow_id { get; set; }

        /// <summary>
        /// Gets or sets the ifw_name.
        /// </summary>
        [Column]
        public string ifw_name { get; set; }

        /// <summary>
        /// Gets or sets the ifw_default.
        /// </summary>
        [Column]
        public bool ifw_default { get; set; }

        /// <summary>
        /// Gets or sets the ifw_type.
        /// </summary>
        [Column]
        public int ifw_type { get; set; }

        /// <summary>
        /// Gets or sets the ifw_o_id.
        /// </summary>
        [Column]
        public int ifw_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ifw_deleted.
        /// </summary>
        [Column]
        public bool ifw_deleted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_workflow_criteria_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_workflow_criteria_value]")]
    [PrimaryKey("wscv_intake_form_workflow_criteria_value_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_workflow_criteria_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the wscv_intake_form_workflow_criteria_value_id.
        /// </summary>
        [Column]
        public int wscv_intake_form_workflow_criteria_value_id { get; set; }

        /// <summary>
        /// Gets or sets the wscv_intake_form_criteria_id.
        /// </summary>
        [Column]
        public int wscv_intake_form_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the wscv_intake_form_workflow_id.
        /// </summary>
        [Column]
        public int wscv_intake_form_workflow_id { get; set; }

        /// <summary>
        /// Gets or sets the wscv_intake_form_workflow_expiration_date.
        /// </summary>
        [Column]
        public DateTime? wscv_intake_form_workflow_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the wscv_intake_form_string_value.
        /// </summary>
        [Column]
        public string wscv_intake_form_string_value { get; set; }

        /// <summary>
        /// Gets or sets the wscv_intake_form_integer_value.
        /// </summary>
        [Column]
        public int? wscv_intake_form_integer_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_workflow_reviewer_comments] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_workflow_reviewer_comments]")]
    [PrimaryKey("cifwrc_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_workflow_reviewer_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cifwrc_id.
        /// </summary>
        [Column]
        public int cifwrc_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_cifwrc_intake_form_workflow_reviewer_schedule_id.
        /// </summary>
        [Column]
        public int cifwrc_cifwrc_intake_form_workflow_reviewer_schedule_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_date.
        /// </summary>
        [Column]
        public DateTime cifwrc_date { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_comments.
        /// </summary>
        [Column]
        public string cifwrc_comments { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_workflow_reviewer_schedule] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_workflow_reviewer_schedule]")]
    [PrimaryKey("cifwrs_intake_form_workflow_reviewer_schedule_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_workflow_reviewer_scheduleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cifwrs_intake_form_workflow_reviewer_schedule_id.
        /// </summary>
        [Column]
        public int cifwrs_intake_form_workflow_reviewer_schedule_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrs_id.
        /// </summary>
        [Column]
        public int cifwrs_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_intake_form_workflow_step_user_id.
        /// </summary>
        [Column]
        public int cifwrc_intake_form_workflow_step_user_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_intake_form_workflow_step_id.
        /// </summary>
        [Column]
        public int cifwrc_intake_form_workflow_step_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_order.
        /// </summary>
        [Column]
        public int cifwrc_order { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_review_started.
        /// </summary>
        [Column]
        public DateTime? cifwrc_review_started { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_reviewed.
        /// </summary>
        [Column]
        public bool? cifwrc_reviewed { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_reviewed_by_u_id.
        /// </summary>
        [Column]
        public int? cifwrc_reviewed_by_u_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_reviewed_date.
        /// </summary>
        [Column]
        public DateTime? cifwrc_reviewed_date { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_reviewed_comments.
        /// </summary>
        [Column]
        public string cifwrc_reviewed_comments { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_deleted.
        /// </summary>
        [Column]
        public int? cifwrc_deleted { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_deleted_on.
        /// </summary>
        [Column]
        public int? cifwrc_deleted_on { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_deleted_by_u_id.
        /// </summary>
        [Column]
        public int? cifwrc_deleted_by_u_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_signed_by_u_id.
        /// </summary>
        [Column]
        public int? cifwrc_signed_by_u_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_signed_date.
        /// </summary>
        [Column]
        public DateTime? cifwrc_signed_date { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_status_id.
        /// </summary>
        [Column]
        public int? cifwrc_status_id { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_status_date.
        /// </summary>
        [Column]
        public DateTime? cifwrc_status_date { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_review_ended.
        /// </summary>
        [Column]
        public DateTime? cifwrc_review_ended { get; set; }

        /// <summary>
        /// Gets or sets the cifwrc_intake_form_workflow_step_type.
        /// </summary>
        [Column]
        public int? cifwrc_intake_form_workflow_step_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_intake_form_workflow_step] table.
    /// </summary>
    [TableName("[dbo].[ccv_intake_form_workflow_step]")]
    [PrimaryKey("ifws_intake_form_workflow_step_id")]
    [ExplicitColumns]
    public partial class ccv_intake_form_workflow_stepRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ifws_intake_form_workflow_step_id.
        /// </summary>
        [Column]
        public int ifws_intake_form_workflow_step_id { get; set; }

        /// <summary>
        /// Gets or sets the ifws_intake_form_workflow_id.
        /// </summary>
        [Column]
        public int? ifws_intake_form_workflow_id { get; set; }

        /// <summary>
        /// Gets or sets the ifws_if_form_id.
        /// </summary>
        [Column]
        public int ifws_if_form_id { get; set; }

        /// <summary>
        /// Gets or sets the ifws_name.
        /// </summary>
        [Column]
        public string ifws_name { get; set; }

        /// <summary>
        /// Gets or sets the ifws_position.
        /// </summary>
        [Column]
        public int ifws_position { get; set; }

        /// <summary>
        /// Gets or sets the ifws_type.
        /// </summary>
        [Column]
        public int ifws_type { get; set; }

        /// <summary>
        /// Gets or sets the ifws_signature_required.
        /// </summary>
        [Column]
        public bool ifws_signature_required { get; set; }

        /// <summary>
        /// Gets or sets the ifws_number_required_to_complete.
        /// </summary>
        [Column]
        public int? ifws_number_required_to_complete { get; set; }

        /// <summary>
        /// Gets or sets the ifws_user_id.
        /// </summary>
        [Column]
        public int? ifws_user_id { get; set; }

        /// <summary>
        /// Gets or sets the ifws_group_id.
        /// </summary>
        [Column]
        public int? ifws_group_id { get; set; }

        /// <summary>
        /// Gets or sets the ifws_role_id.
        /// </summary>
        [Column]
        public int? ifws_role_id { get; set; }

        /// <summary>
        /// Gets or sets the ifws_dependencies.
        /// </summary>
        [Column]
        public string ifws_dependencies { get; set; }

        /// <summary>
        /// Gets or sets the ifws_conditional.
        /// </summary>
        [Column]
        public bool? ifws_conditional { get; set; }

        /// <summary>
        /// Gets or sets the ifws_complete.
        /// </summary>
        [Column]
        public int? ifws_complete { get; set; }

        /// <summary>
        /// Gets or sets the ifws_workflow_type.
        /// </summary>
        [Column]
        public int? ifws_workflow_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_organization_entity_user] table.
    /// </summary>
    [TableName("[dbo].[ccv_organization_entity_user]")]
    [PrimaryKey("oeu_organization_entity_user_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ccv_organization_entity_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oeu_organization_entity_user_id.
        /// </summary>
        [Column]
        public int oeu_organization_entity_user_id { get; set; }

        /// <summary>
        /// Gets or sets the oeu_e_id.
        /// </summary>
        [Column]
        public int oeu_e_id { get; set; }

        /// <summary>
        /// Gets or sets the oeu_default_u_id.
        /// </summary>
        [Column]
        public int oeu_default_u_id { get; set; }

        /// <summary>
        /// Gets or sets the oeu_backup_u_id.
        /// </summary>
        [Column]
        public int oeu_backup_u_id { get; set; }

        /// <summary>
        /// Gets or sets the oeu_use_backup.
        /// </summary>
        [Column]
        public bool oeu_use_backup { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_organization_entity_user_role] table.
    /// </summary>
    [TableName("[dbo].[ccv_organization_entity_user_role]")]
    [PrimaryKey("oeur_organization_entity_user_role_id")]
    [ExplicitColumns]
    public partial class ccv_organization_entity_user_roleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oeur_organization_entity_user_role_id.
        /// </summary>
        [Column]
        public int oeur_organization_entity_user_role_id { get; set; }

        /// <summary>
        /// Gets or sets the oeur_user_role_id.
        /// </summary>
        [Column]
        public int oeur_user_role_id { get; set; }

        /// <summary>
        /// Gets or sets the oeur_e_id.
        /// </summary>
        [Column]
        public int oeur_e_id { get; set; }

        /// <summary>
        /// Gets or sets the oeur_default_u_id.
        /// </summary>
        [Column]
        public int oeur_default_u_id { get; set; }

        /// <summary>
        /// Gets or sets the oeur_backup_u_id.
        /// </summary>
        [Column]
        public int oeur_backup_u_id { get; set; }

        /// <summary>
        /// Gets or sets the oeur_use_backup.
        /// </summary>
        [Column]
        public bool? oeur_use_backup { get; set; }

        /// <summary>
        /// Gets or sets the oeur_use_backup_expiration_date.
        /// </summary>
        [Column]
        public DateTime? oeur_use_backup_expiration_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_permissions_mapping] table.
    /// </summary>
    [TableName("[dbo].[ccv_permissions_mapping]")]
    [PrimaryKey("cpm_id")]
    [ExplicitColumns]
    public partial class ccv_permissions_mappingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cpm_id.
        /// </summary>
        [Column]
        public int cpm_id { get; set; }

        /// <summary>
        /// Gets or sets the cpm_role_id.
        /// </summary>
        [Column]
        public int cpm_role_id { get; set; }

        /// <summary>
        /// Gets or sets the cpm_bit.
        /// </summary>
        [Column]
        public int cpm_bit { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_state] table.
    /// </summary>
    [TableName("[dbo].[ccv_state]")]
    [PrimaryKey("s_state_id")]
    [ExplicitColumns]
    public partial class ccv_stateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the s_state_id.
        /// </summary>
        [Column]
        public int s_state_id { get; set; }

        /// <summary>
        /// Gets or sets the s_country_id.
        /// </summary>
        [Column]
        public int s_country_id { get; set; }

        /// <summary>
        /// Gets or sets the s_code.
        /// </summary>
        [Column]
        public string s_code { get; set; }

        /// <summary>
        /// Gets or sets the s_display.
        /// </summary>
        [Column]
        public string s_display { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_sub_category] table.
    /// </summary>
    [TableName("[dbo].[ccv_sub_category]")]
    [PrimaryKey("sc_sub_category_id")]
    [ExplicitColumns]
    public partial class ccv_sub_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the sc_sub_category_id.
        /// </summary>
        [Column]
        public int sc_sub_category_id { get; set; }

        /// <summary>
        /// Gets or sets the sc_parent_category_id.
        /// </summary>
        [Column]
        public int sc_parent_category_id { get; set; }

        /// <summary>
        /// Gets or sets the sc_display.
        /// </summary>
        [Column]
        public string sc_display { get; set; }

        /// <summary>
        /// Gets or sets the sc_system.
        /// </summary>
        [Column]
        public bool sc_system { get; set; }

        /// <summary>
        /// Gets or sets the sc_enabled.
        /// </summary>
        [Column]
        public bool sc_enabled { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_template] table.
    /// </summary>
    [TableName("[dbo].[ccv_template]")]
    [PrimaryKey("t_template_id")]
    [ExplicitColumns]
    public partial class ccv_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the t_template_id.
        /// </summary>
        [Column]
        public int t_template_id { get; set; }

        /// <summary>
        /// Gets or sets the t_display.
        /// </summary>
        [Column]
        public string t_display { get; set; }

        /// <summary>
        /// Gets or sets the t_body.
        /// </summary>
        [Column]
        public string t_body { get; set; }

        /// <summary>
        /// Gets or sets the t_url.
        /// </summary>
        [Column]
        public string t_url { get; set; }

        /// <summary>
        /// Gets or sets the t_placeholder.
        /// </summary>
        [Column]
        public bool t_placeholder { get; set; }

        /// <summary>
        /// Gets or sets the t_type.
        /// </summary>
        [Column]
        public int? t_type { get; set; }

        /// <summary>
        /// Gets or sets the t_status.
        /// </summary>
        [Column]
        public int t_status { get; set; }

        /// <summary>
        /// Gets or sets the t_expiration_date.
        /// </summary>
        [Column]
        public DateTime? t_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the t_review_date.
        /// </summary>
        [Column]
        public DateTime? t_review_date { get; set; }

        /// <summary>
        /// Gets or sets the t_created_date.
        /// </summary>
        [Column]
        public DateTime t_created_date { get; set; }

        /// <summary>
        /// Gets or sets the t_created_by_uid.
        /// </summary>
        [Column]
        public int t_created_by_uid { get; set; }

        /// <summary>
        /// Gets or sets the t_model_template_id.
        /// </summary>
        [Column]
        public int? t_model_template_id { get; set; }

        /// <summary>
        /// Gets or sets the t_deleted.
        /// </summary>
        [Column]
        public bool t_deleted { get; set; }

        /// <summary>
        /// Gets or sets the t_last_reviewed_date.
        /// </summary>
        [Column]
        public DateTime? t_last_reviewed_date { get; set; }

        /// <summary>
        /// Gets or sets the t_last_reviewed_by_uid.
        /// </summary>
        [Column]
        public int? t_last_reviewed_by_uid { get; set; }

        /// <summary>
        /// Gets or sets the t_page_break.
        /// </summary>
        [Column]
        public bool t_page_break { get; set; }

        /// <summary>
        /// Gets or sets the t_external_data.
        /// </summary>
        [Column]
        public bool t_external_data { get; set; }

        /// <summary>
        /// Gets or sets the t_external_data_url.
        /// </summary>
        [Column]
        public string t_external_data_url { get; set; }

        /// <summary>
        /// Gets or sets the t_conditional.
        /// </summary>
        [Column]
        public bool t_conditional { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_template_category] table.
    /// </summary>
    [TableName("[dbo].[ccv_template_category]")]
    [PrimaryKey("tc_template_category_id")]
    [ExplicitColumns]
    public partial class ccv_template_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tc_template_category_id.
        /// </summary>
        [Column]
        public int tc_template_category_id { get; set; }

        /// <summary>
        /// Gets or sets the tc_template_id.
        /// </summary>
        [Column]
        public int tc_template_id { get; set; }

        /// <summary>
        /// Gets or sets the tc_category_id.
        /// </summary>
        [Column]
        public int tc_category_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_template_clause] table.
    /// </summary>
    [TableName("[dbo].[ccv_template_clause]")]
    [PrimaryKey("tc_template_clause_id")]
    [ExplicitColumns]
    public partial class ccv_template_clauseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tc_template_clause_id.
        /// </summary>
        [Column]
        public int tc_template_clause_id { get; set; }

        /// <summary>
        /// Gets or sets the tc_template_id.
        /// </summary>
        [Column]
        public int tc_template_id { get; set; }

        /// <summary>
        /// Gets or sets the tc_clause_id.
        /// </summary>
        [Column]
        public int tc_clause_id { get; set; }

        /// <summary>
        /// Gets or sets the tc_group_id.
        /// </summary>
        [Column]
        public string tc_group_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_template_criteria_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_template_criteria_value]")]
    [PrimaryKey("tcv_template_criteria_value_id")]
    [ExplicitColumns]
    public partial class ccv_template_criteria_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tcv_template_criteria_value_id.
        /// </summary>
        [Column]
        public int tcv_template_criteria_value_id { get; set; }

        /// <summary>
        /// Gets or sets the tcv_criteria_id.
        /// </summary>
        [Column]
        public int tcv_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the tcv_template_id.
        /// </summary>
        [Column]
        public int tcv_template_id { get; set; }

        /// <summary>
        /// Gets or sets the tcv_expiration_date.
        /// </summary>
        [Column]
        public DateTime? tcv_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the tcv_string_value.
        /// </summary>
        [Column]
        public string tcv_string_value { get; set; }

        /// <summary>
        /// Gets or sets the tcv_integer_value.
        /// </summary>
        [Column]
        public int? tcv_integer_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_template_field] table.
    /// </summary>
    [TableName("[dbo].[ccv_template_field]")]
    [PrimaryKey("tf_template_field_id")]
    [ExplicitColumns]
    public partial class ccv_template_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tf_template_field_id.
        /// </summary>
        [Column]
        public int tf_template_field_id { get; set; }

        /// <summary>
        /// Gets or sets the tf_template_id.
        /// </summary>
        [Column]
        public int tf_template_id { get; set; }

        /// <summary>
        /// Gets or sets the tf_field_id.
        /// </summary>
        [Column]
        public int tf_field_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_template_sub_category] table.
    /// </summary>
    [TableName("[dbo].[ccv_template_sub_category]")]
    [PrimaryKey("tsc_template_sub_category_id")]
    [ExplicitColumns]
    public partial class ccv_template_sub_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsc_template_sub_category_id.
        /// </summary>
        [Column]
        public int tsc_template_sub_category_id { get; set; }

        /// <summary>
        /// Gets or sets the tsc_template_id.
        /// </summary>
        [Column]
        public int tsc_template_id { get; set; }

        /// <summary>
        /// Gets or sets the tsc_sub_category_id.
        /// </summary>
        [Column]
        public int tsc_sub_category_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_user_criteria_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_user_criteria_value]")]
    [PrimaryKey("ucv_user_criteria_value_id")]
    [ExplicitColumns]
    public partial class ccv_user_criteria_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ucv_user_criteria_value_id.
        /// </summary>
        [Column]
        public int ucv_user_criteria_value_id { get; set; }

        /// <summary>
        /// Gets or sets the ucv_criteria_id.
        /// </summary>
        [Column]
        public int ucv_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the ucv_user_id.
        /// </summary>
        [Column]
        public int ucv_user_id { get; set; }

        /// <summary>
        /// Gets or sets the ucv_expiration_date.
        /// </summary>
        [Column]
        public DateTime? ucv_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the ucv_hidden.
        /// </summary>
        [Column]
        public bool ucv_hidden { get; set; }

        /// <summary>
        /// Gets or sets the ucv_string_value.
        /// </summary>
        [Column]
        public string ucv_string_value { get; set; }

        /// <summary>
        /// Gets or sets the ucv_integer_value.
        /// </summary>
        [Column]
        public int? ucv_integer_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_user_role] table.
    /// </summary>
    [TableName("[dbo].[ccv_user_role]")]
    [PrimaryKey("ur_user_role_id")]
    [ExplicitColumns]
    public partial class ccv_user_roleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ur_user_role_id.
        /// </summary>
        [Column]
        public int ur_user_role_id { get; set; }

        /// <summary>
        /// Gets or sets the ur_name.
        /// </summary>
        [Column]
        public string ur_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_workflow] table.
    /// </summary>
    [TableName("[dbo].[ccv_workflow]")]
    [PrimaryKey("w_workflow_id")]
    [ExplicitColumns]
    public partial class ccv_workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the w_workflow_id.
        /// </summary>
        [Column]
        public int w_workflow_id { get; set; }

        /// <summary>
        /// Gets or sets the w_name.
        /// </summary>
        [Column]
        public string w_name { get; set; }

        /// <summary>
        /// Gets or sets the w_default.
        /// </summary>
        [Column]
        public bool w_default { get; set; }

        /// <summary>
        /// Gets or sets the w_type.
        /// </summary>
        [Column]
        public int w_type { get; set; }

        /// <summary>
        /// Gets or sets the w_o_id.
        /// </summary>
        [Column]
        public int w_o_id { get; set; }

        /// <summary>
        /// Gets or sets the w_deleted.
        /// </summary>
        [Column]
        public bool w_deleted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_workflow_criteria_value] table.
    /// </summary>
    [TableName("[dbo].[ccv_workflow_criteria_value]")]
    [PrimaryKey("wscv_workflow_criteria_value_id")]
    [ExplicitColumns]
    public partial class ccv_workflow_criteria_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the wscv_workflow_criteria_value_id.
        /// </summary>
        [Column]
        public int wscv_workflow_criteria_value_id { get; set; }

        /// <summary>
        /// Gets or sets the wscv_criteria_id.
        /// </summary>
        [Column]
        public int wscv_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the wscv_workflow_id.
        /// </summary>
        [Column]
        public int wscv_workflow_id { get; set; }

        /// <summary>
        /// Gets or sets the wscv_expiration_date.
        /// </summary>
        [Column]
        public DateTime? wscv_expiration_date { get; set; }

        /// <summary>
        /// Gets or sets the wscv_string_value.
        /// </summary>
        [Column]
        public string wscv_string_value { get; set; }

        /// <summary>
        /// Gets or sets the wscv_integer_value.
        /// </summary>
        [Column]
        public int? wscv_integer_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_workflow_group] table.
    /// </summary>
    [TableName("[dbo].[ccv_workflow_group]")]
    [PrimaryKey("wg_id")]
    [ExplicitColumns]
    public partial class ccv_workflow_groupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the wg_id.
        /// </summary>
        [Column]
        public int wg_id { get; set; }

        /// <summary>
        /// Gets or sets the wg_name.
        /// </summary>
        [Column]
        public string wg_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_workflow_group_user] table.
    /// </summary>
    [TableName("[dbo].[ccv_workflow_group_user]")]
    [PrimaryKey("wgu_id")]
    [ExplicitColumns]
    public partial class ccv_workflow_group_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the wgu_id.
        /// </summary>
        [Column]
        public int wgu_id { get; set; }

        /// <summary>
        /// Gets or sets the wgu_user_id.
        /// </summary>
        [Column]
        public int? wgu_user_id { get; set; }

        /// <summary>
        /// Gets or sets the wgu_wg_id.
        /// </summary>
        [Column]
        public int? wgu_wg_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ccv_workflow_step] table.
    /// </summary>
    [TableName("[dbo].[ccv_workflow_step]")]
    [PrimaryKey("ws_workflow_step_id")]
    [ExplicitColumns]
    public partial class ccv_workflow_stepRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ws_workflow_step_id.
        /// </summary>
        [Column]
        public int ws_workflow_step_id { get; set; }

        /// <summary>
        /// Gets or sets the ws_workflow_id.
        /// </summary>
        [Column]
        public int ws_workflow_id { get; set; }

        /// <summary>
        /// Gets or sets the ws_name.
        /// </summary>
        [Column]
        public string ws_name { get; set; }

        /// <summary>
        /// Gets or sets the ws_position.
        /// </summary>
        [Column]
        public int ws_position { get; set; }

        /// <summary>
        /// Gets or sets the ws_type.
        /// </summary>
        [Column]
        public int ws_type { get; set; }

        /// <summary>
        /// Gets or sets the ws_signature_required.
        /// </summary>
        [Column]
        public bool ws_signature_required { get; set; }

        /// <summary>
        /// Gets or sets the ws_number_required_to_complete.
        /// </summary>
        [Column]
        public int? ws_number_required_to_complete { get; set; }

        /// <summary>
        /// Gets or sets the ws_user_id.
        /// </summary>
        [Column]
        public int? ws_user_id { get; set; }

        /// <summary>
        /// Gets or sets the ws_group_id.
        /// </summary>
        [Column]
        public int? ws_group_id { get; set; }

        /// <summary>
        /// Gets or sets the ws_role_id.
        /// </summary>
        [Column]
        public int? ws_role_id { get; set; }

        /// <summary>
        /// Gets or sets the ws_dependencies.
        /// </summary>
        [Column]
        public string ws_dependencies { get; set; }

        /// <summary>
        /// Gets or sets the ws_conditional.
        /// </summary>
        [Column]
        public bool? ws_conditional { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cemail_terms] table.
    /// </summary>
    [TableName("[dbo].[cemail_terms]")]
    [ExplicitColumns]
    public partial class cemail_termRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EMAIL.
        /// </summary>
        [Column]
        public string EMAIL { get; set; }

        /// <summary>
        /// Gets or sets the PARTY.
        /// </summary>
        [Column]
        public string PARTY { get; set; }

        /// <summary>
        /// Gets or sets the YEAR.
        /// </summary>
        [Column]
        public string YEAR { get; set; }

        /// <summary>
        /// Gets or sets the EFFECTIVE.
        /// </summary>
        [Column]
        public DateTime EFFECTIVE { get; set; }

        /// <summary>
        /// Gets or sets the EXPIRATION.
        /// </summary>
        [Column]
        public DateTime EXPIRATION { get; set; }

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[client_captions] table.
    /// </summary>
    [TableName("[dbo].[client_captions]")]
    [PrimaryKey("cc_id")]
    [ExplicitColumns]
    public partial class client_captionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cc_id.
        /// </summary>
        [Column]
        public int cc_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_name.
        /// </summary>
        [Column]
        public string cc_name { get; set; }

        /// <summary>
        /// Gets or sets the cc_o_id.
        /// </summary>
        [Column]
        public int cc_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_product_line.
        /// </summary>
        [Column]
        public int cc_product_line { get; set; }

        /// <summary>
        /// Gets or sets the cc_mll_code.
        /// </summary>
        [Column]
        public string cc_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the cc_value.
        /// </summary>
        [Column]
        public string cc_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[client_setting] table.
    /// </summary>
    [TableName("[dbo].[client_setting]")]
    [PrimaryKey("cs_co_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class client_settingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cs_co_id.
        /// </summary>
        [Column]
        public int cs_co_id { get; set; }

        /// <summary>
        /// Gets or sets the cs_value.
        /// </summary>
        [Column]
        public int cs_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[cnt_attachment_types] table.
    /// </summary>
    [TableName("[dbo].[cnt_attachment_types]")]
    [PrimaryKey("cntat_id")]
    [ExplicitColumns]
    public partial class cnt_attachment_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cntat_id.
        /// </summary>
        [Column]
        public int cntat_id { get; set; }

        /// <summary>
        /// Gets or sets the cntat_org_id.
        /// </summary>
        [Column]
        public int cntat_org_id { get; set; }

        /// <summary>
        /// Gets or sets the cntat_cnt_id.
        /// </summary>
        [Column]
        public int cntat_cnt_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[COIDS Statement Lookup] table.
    /// </summary>
    [TableName("[dbo].[COIDS Statement Lookup]")]
    [ExplicitColumns]
    public partial class COIDS_Statement_LookupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the u_account.
        /// </summary>
        [Column]
        public string u_account { get; set; }

        /// <summary>
        /// Gets or sets the u_lname.
        /// </summary>
        [Column]
        public string u_lname { get; set; }

        /// <summary>
        /// Gets or sets the u_fname.
        /// </summary>
        [Column]
        public string u_fname { get; set; }

        /// <summary>
        /// Gets or sets the ch_id.
        /// </summary>
        [Column]
        public int ch_id { get; set; }

        /// <summary>
        /// Gets or sets the ch_date_eff.
        /// </summary>
        [Column]
        public DateTime ch_date_eff { get; set; }

        /// <summary>
        /// Gets or sets the ch_date_exp.
        /// </summary>
        [Column]
        public DateTime ch_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the u_id.
        /// </summary>
        [Column]
        public int u_id { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack.
        /// </summary>
        [Column]
        public int ch_ack { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack_date.
        /// </summary>
        [Column]
        public DateTime ch_ack_date { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack_user.
        /// </summary>
        [Column]
        public string ch_ack_user { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[COIDS Statement Lookup By Reporting Party ID] table.
    /// </summary>
    [TableName("[dbo].[COIDS Statement Lookup By Reporting Party ID]")]
    [ExplicitColumns]
    public partial class COIDS_Statement_Lookup_By_Reporting_Party_IDRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the u_id.
        /// </summary>
        [Column]
        public int u_id { get; set; }

        /// <summary>
        /// Gets or sets the u_lname.
        /// </summary>
        [Column]
        public string u_lname { get; set; }

        /// <summary>
        /// Gets or sets the u_fname.
        /// </summary>
        [Column]
        public string u_fname { get; set; }

        /// <summary>
        /// Gets or sets the u_mname.
        /// </summary>
        [Column]
        public string u_mname { get; set; }

        /// <summary>
        /// Gets or sets the ch_id.
        /// </summary>
        [Column]
        public int ch_id { get; set; }

        /// <summary>
        /// Gets or sets the ch_date_exp.
        /// </summary>
        [Column]
        public DateTime ch_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack.
        /// </summary>
        [Column]
        public int ch_ack { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack_date.
        /// </summary>
        [Column]
        public DateTime ch_ack_date { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack_user.
        /// </summary>
        [Column]
        public string ch_ack_user { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc]")]
    [ExplicitColumns]
    public partial class coids_adhocRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the Attachment_Type.
        /// </summary>
        [Column("Attachment Type")] 
        public string Attachment_Type { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Subject.
        /// </summary>
        [Column("Attachment Subject")] 
        public string Attachment_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Comments.
        /// </summary>
        [Column("Attachment Comments")] 
        public string Attachment_Comments { get; set; }

        /// <summary>
        /// Gets or sets the Category.
        /// </summary>
        [Column]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Name.
        /// </summary>
        [Column("Contracting Entity Name")] 
        public string Contracting_Entity_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Short_Name.
        /// </summary>
        [Column("Contracting Entity Short Name")] 
        public string Contracting_Entity_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Department_Name___Practice.
        /// </summary>
        [Column("Department Name - Practice")] 
        public string Department_Name___Practice { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Identification_Number.
        /// </summary>
        [Column("Organization Identification Number")] 
        public int Organization_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Name.
        /// </summary>
        [Column("Organization Name")] 
        public string Organization_Name { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Short_Name.
        /// </summary>
        [Column("Organization Short Name")] 
        public string Organization_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Question.
        /// </summary>
        [Column]
        public string Question { get; set; }

        /// <summary>
        /// Gets or sets the Question_ID.
        /// </summary>
        [Column("Question ID")] 
        public int? Question_ID { get; set; }

        /// <summary>
        /// Gets or sets the Question_Addendum.
        /// </summary>
        [Column("Question Addendum")] 
        public string Question_Addendum { get; set; }

        /// <summary>
        /// Gets or sets the Question_Response.
        /// </summary>
        [Column("Question Response")] 
        public string Question_Response { get; set; }

        /// <summary>
        /// Gets or sets the Question_Response_Comments.
        /// </summary>
        [Column("Question Response Comments")] 
        public string Question_Response_Comments { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Full_Name.
        /// </summary>
        [Column("Reporting Party Full Name")] 
        public string Reporting_Party_Full_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Email_Address.
        /// </summary>
        [Column("Reporting Party Email Address")] 
        public string Reporting_Party_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_DOP_Number.
        /// </summary>
        [Column("Reporting Party DOP Number")] 
        public int Reporting_Party_DOP_Number { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Login.
        /// </summary>
        [Column("Reporting Party Login")] 
        public string Reporting_Party_Login { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_First_Name.
        /// </summary>
        [Column("Reporting Party First Name")] 
        public string Reporting_Party_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Last_Name.
        /// </summary>
        [Column("Reporting Party Last Name")] 
        public string Reporting_Party_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Middle_Name.
        /// </summary>
        [Column("Reporting Party Middle Name")] 
        public string Reporting_Party_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Phone_Number.
        /// </summary>
        [Column("Reporting Party Phone Number")] 
        public string Reporting_Party_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_PIN.
        /// </summary>
        [Column("Reporting Party PIN")] 
        public string Reporting_Party_PIN { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_SSN___EID.
        /// </summary>
        [Column("Reporting Party SSN - EID")] 
        public string Reporting_Party_SSN___EID { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Primary_Relationship.
        /// </summary>
        [Column("Reporting Party Primary Relationship")] 
        public string Reporting_Party_Primary_Relationship { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Title.
        /// </summary>
        [Column("Reporting Party Title")] 
        public string Reporting_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Vendor_Name.
        /// </summary>
        [Column("Vendor Name")] 
        public string Vendor_Name { get; set; }

        /// <summary>
        /// Gets or sets the Resolution_Acknowledged.
        /// </summary>
        [Column("Resolution Acknowledged")] 
        public string Resolution_Acknowledged { get; set; }

        /// <summary>
        /// Gets or sets the Resolution_Acknowledged_By.
        /// </summary>
        [Column("Resolution Acknowledged By")] 
        public string Resolution_Acknowledged_By { get; set; }

        /// <summary>
        /// Gets or sets the Resolution_Acknowledged_Date.
        /// </summary>
        [Column("Resolution Acknowledged Date")] 
        public DateTime Resolution_Acknowledged_Date { get; set; }

        /// <summary>
        /// Gets or sets the Resolution_Body.
        /// </summary>
        [Column("Resolution Body")] 
        public string Resolution_Body { get; set; }

        /// <summary>
        /// Gets or sets the Resolution_Comments.
        /// </summary>
        [Column("Resolution Comments")] 
        public string Resolution_Comments { get; set; }

        /// <summary>
        /// Gets or sets the Resolution_Subject.
        /// </summary>
        [Column("Resolution Subject")] 
        public string Resolution_Subject { get; set; }

        /// <summary>
        /// Gets or sets the COIDS_Note_Type.
        /// </summary>
        [Column("COIDS Note Type")] 
        public string COIDS_Note_Type { get; set; }

        /// <summary>
        /// Gets or sets the COIDS_Note_Subject.
        /// </summary>
        [Column("COIDS Note Subject")] 
        public string COIDS_Note_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Full_Name.
        /// </summary>
        [Column("Viewing Party Full Name")] 
        public string Viewing_Party_Full_Name { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Email_Address.
        /// </summary>
        [Column("Viewing Party Email Address")] 
        public string Viewing_Party_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_DOP_Number.
        /// </summary>
        [Column("Viewing Party DOP Number")] 
        public int Viewing_Party_DOP_Number { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_First_Name.
        /// </summary>
        [Column("Viewing Party First Name")] 
        public string Viewing_Party_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Last_Name.
        /// </summary>
        [Column("Viewing Party Last Name")] 
        public string Viewing_Party_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Middle_Name.
        /// </summary>
        [Column("Viewing Party Middle Name")] 
        public string Viewing_Party_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Phone_Number.
        /// </summary>
        [Column("Viewing Party Phone Number")] 
        public string Viewing_Party_Phone_Number { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_PIN.
        /// </summary>
        [Column("Viewing Party PIN")] 
        public string Viewing_Party_PIN { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_SSN___EID.
        /// </summary>
        [Column("Viewing Party SSN - EID")] 
        public string Viewing_Party_SSN___EID { get; set; }

        /// <summary>
        /// Gets or sets the Statement_Completed.
        /// </summary>
        [Column("Statement Completed")] 
        public string Statement_Completed { get; set; }

        /// <summary>
        /// Gets or sets the Statement_Completed_By.
        /// </summary>
        [Column("Statement Completed By")] 
        public string Statement_Completed_By { get; set; }

        /// <summary>
        /// Gets or sets the Statement_Completed_Date.
        /// </summary>
        [Column("Statement Completed Date")] 
        public DateTime Statement_Completed_Date { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Number.
        /// </summary>
        [Column("Contract Number")] 
        public int Contract_Number { get; set; }

        /// <summary>
        /// Gets or sets the Submission_Emails.
        /// </summary>
        [Column("Submission Emails")] 
        public string Submission_Emails { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Email_Address_Override.
        /// </summary>
        [Column("Reporting Party Email Address Override")] 
        public string Reporting_Party_Email_Address_Override { get; set; }

        /// <summary>
        /// Gets or sets the Statement_ID.
        /// </summary>
        [Column("Statement ID")] 
        public int Statement_ID { get; set; }

        /// <summary>
        /// Gets or sets the Effective_Date.
        /// </summary>
        [Column("Effective Date")] 
        public DateTime Effective_Date { get; set; }

        /// <summary>
        /// Gets or sets the Expiration_Date.
        /// </summary>
        [Column("Expiration Date")] 
        public DateTime Expiration_Date { get; set; }

        /// <summary>
        /// Gets or sets the Status.
        /// </summary>
        [Column]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the Fiscal_Year.
        /// </summary>
        [Column("Fiscal Year")] 
        public int? Fiscal_Year { get; set; }

        /// <summary>
        /// Gets or sets the Combine_Email_Notifications.
        /// </summary>
        [Column("Combine Email Notifications")] 
        public string Combine_Email_Notifications { get; set; }

        /// <summary>
        /// Gets or sets the Priority.
        /// </summary>
        [Column]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or sets the Launch_Name.
        /// </summary>
        [Column("Launch Name")] 
        public string Launch_Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc_column]")]
    [PrimaryKey("cac_id")]
    [ExplicitColumns]
    public partial class coids_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cac_id.
        /// </summary>
        [Column]
        public int cac_id { get; set; }

        /// <summary>
        /// Gets or sets the cac_name.
        /// </summary>
        [Column]
        public string cac_name { get; set; }

        /// <summary>
        /// Gets or sets the cac_format.
        /// </summary>
        [Column]
        public int cac_format { get; set; }

        /// <summary>
        /// Gets or sets the cac_fieldtype.
        /// </summary>
        [Column]
        public int cac_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the cac_select_expression.
        /// </summary>
        [Column]
        public string cac_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the cac_source.
        /// </summary>
        [Column]
        public string cac_source { get; set; }

        /// <summary>
        /// Gets or sets the cac_use_custom_expression.
        /// </summary>
        [Column]
        public bool cac_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the cac_extra_select_expression.
        /// </summary>
        [Column]
        public string cac_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc_field_source] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc_field_source]")]
    [PrimaryKey("cafs_id")]
    [ExplicitColumns]
    public partial class coids_adhoc_field_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cafs_id.
        /// </summary>
        [Column]
        public int cafs_id { get; set; }

        /// <summary>
        /// Gets or sets the cafs_source.
        /// </summary>
        [Column]
        public string cafs_source { get; set; }

        /// <summary>
        /// Gets or sets the cafs_preload_expression.
        /// </summary>
        [Column]
        public string cafs_preload_expression { get; set; }

        /// <summary>
        /// Gets or sets the cafs_subquery_expression.
        /// </summary>
        [Column]
        public string cafs_subquery_expression { get; set; }

        /// <summary>
        /// Gets or sets the cafs_table_name.
        /// </summary>
        [Column]
        public string cafs_table_name { get; set; }

        /// <summary>
        /// Gets or sets the cafs_parent_alias.
        /// </summary>
        [Column]
        public string cafs_parent_alias { get; set; }

        /// <summary>
        /// Gets or sets the cafs_join_type.
        /// </summary>
        [Column]
        public string cafs_join_type { get; set; }

        /// <summary>
        /// Gets or sets the cafs_left_column.
        /// </summary>
        [Column]
        public string cafs_left_column { get; set; }

        /// <summary>
        /// Gets or sets the cafs_right_column.
        /// </summary>
        [Column]
        public string cafs_right_column { get; set; }

        /// <summary>
        /// Gets or sets the cafs_organization_key.
        /// </summary>
        [Column]
        public string cafs_organization_key { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc_report] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc_report]")]
    [PrimaryKey("car_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_adhoc_reportRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the car_rpt_id.
        /// </summary>
        [Column]
        public int car_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the car_rpt_date.
        /// </summary>
        [Column]
        public DateTime car_rpt_date { get; set; }

        /// <summary>
        /// Gets or sets the car_rpt_u_id.
        /// </summary>
        [Column]
        public int car_rpt_u_id { get; set; }

        /// <summary>
        /// Gets or sets the car_rpt_title.
        /// </summary>
        [Column]
        public string car_rpt_title { get; set; }

        /// <summary>
        /// Gets or sets the car_rpt_desc.
        /// </summary>
        [Column]
        public string car_rpt_desc { get; set; }

        /// <summary>
        /// Gets or sets the car_rpt_sql.
        /// </summary>
        [Column]
        public string car_rpt_sql { get; set; }

        /// <summary>
        /// Gets or sets the car_rpt_public.
        /// </summary>
        [Column]
        public bool car_rpt_public { get; set; }

        /// <summary>
        /// Gets or sets the car_rpt_template.
        /// </summary>
        [Column]
        public string car_rpt_template { get; set; }

        /// <summary>
        /// Gets or sets the car_rpt_o_id.
        /// </summary>
        [Column]
        public int? car_rpt_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc_report_fields] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc_report_fields]")]
    [PrimaryKey("arf_id")]
    [ExplicitColumns]
    public partial class coids_adhoc_report_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arf_id.
        /// </summary>
        [Column]
        public int arf_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_car_rpt_id.
        /// </summary>
        [Column]
        public int arf_car_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_field.
        /// </summary>
        [Column]
        public string arf_field { get; set; }

        /// <summary>
        /// Gets or sets the arf_name.
        /// </summary>
        [Column]
        public string arf_name { get; set; }

        /// <summary>
        /// Gets or sets the arf_fieldtype.
        /// </summary>
        [Column]
        public int arf_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the arf_select_expression.
        /// </summary>
        [Column]
        public string arf_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_source.
        /// </summary>
        [Column]
        public string arf_source { get; set; }

        /// <summary>
        /// Gets or sets the arf_use_custom_expression.
        /// </summary>
        [Column]
        public bool arf_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_extra_select_expression.
        /// </summary>
        [Column]
        public string arf_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc_report_query] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc_report_query]")]
    [PrimaryKey("arq_id")]
    [ExplicitColumns]
    public partial class coids_adhoc_report_queryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arq_id.
        /// </summary>
        [Column]
        public int arq_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_car_rpt_id.
        /// </summary>
        [Column]
        public int arq_car_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_type.
        /// </summary>
        [Column]
        public int arq_type { get; set; }

        /// <summary>
        /// Gets or sets the arq_value.
        /// </summary>
        [Column]
        public string arq_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc_report_query_source] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc_report_query_source]")]
    [PrimaryKey("carqs_id")]
    [ExplicitColumns]
    public partial class coids_adhoc_report_query_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the carqs_id.
        /// </summary>
        [Column]
        public int carqs_id { get; set; }

        /// <summary>
        /// Gets or sets the carqs_arq_id.
        /// </summary>
        [Column]
        public int carqs_arq_id { get; set; }

        /// <summary>
        /// Gets or sets the carqs_column_name.
        /// </summary>
        [Column]
        public string carqs_column_name { get; set; }

        /// <summary>
        /// Gets or sets the carqs_select_expression.
        /// </summary>
        [Column]
        public string carqs_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the carqs_source.
        /// </summary>
        [Column]
        public string carqs_source { get; set; }

        /// <summary>
        /// Gets or sets the carqs_use_custom_expression.
        /// </summary>
        [Column]
        public bool carqs_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the carqs_fieldtype.
        /// </summary>
        [Column]
        public int? carqs_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the carqs_extra_select_expression.
        /// </summary>
        [Column]
        public string carqs_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc_report_renamed_columns] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc_report_renamed_columns]")]
    [PrimaryKey("coids_arrc_id")]
    [ExplicitColumns]
    public partial class coids_adhoc_report_renamed_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the coids_arrc_id.
        /// </summary>
        [Column]
        public int coids_arrc_id { get; set; }

        /// <summary>
        /// Gets or sets the coids_arrc_rpt_id.
        /// </summary>
        [Column]
        public int coids_arrc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the coids_arrc_column_name.
        /// </summary>
        [Column]
        public string coids_arrc_column_name { get; set; }

        /// <summary>
        /// Gets or sets the coids_arrc_display_name.
        /// </summary>
        [Column]
        public string coids_arrc_display_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_adhoc_report_users] table.
    /// </summary>
    [TableName("[dbo].[coids_adhoc_report_users]")]
    [PrimaryKey("aru_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_adhoc_report_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the aru_rpt_id.
        /// </summary>
        [Column]
        public int aru_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the aru_u_id.
        /// </summary>
        [Column]
        public int aru_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_cemail_control] table.
    /// </summary>
    [TableName("[dbo].[coids_cemail_control]")]
    [PrimaryKey("ccc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_cemail_controlRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccc_id.
        /// </summary>
        [Column]
        public int ccc_id { get; set; }

        /// <summary>
        /// Gets or sets the ccc_series.
        /// </summary>
        [Column]
        public int ccc_series { get; set; }

        /// <summary>
        /// Gets or sets the ccc_state.
        /// </summary>
        [Column]
        public int ccc_state { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_default_password] table.
    /// </summary>
    [TableName("[dbo].[coids_default_password]")]
    [PrimaryKey("cdp_id")]
    [ExplicitColumns]
    public partial class coids_default_passwordRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cdp_id.
        /// </summary>
        [Column]
        public int cdp_id { get; set; }

        /// <summary>
        /// Gets or sets the cdp_u_id.
        /// </summary>
        [Column]
        public int cdp_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_email] table.
    /// </summary>
    [TableName("[dbo].[coids_email]")]
    [PrimaryKey("ce_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ce_id.
        /// </summary>
        [Column]
        public int ce_id { get; set; }

        /// <summary>
        /// Gets or sets the ce_cl_id.
        /// </summary>
        [Column]
        public int ce_cl_id { get; set; }

        /// <summary>
        /// Gets or sets the ce_cp_id.
        /// </summary>
        [Column]
        public int ce_cp_id { get; set; }

        /// <summary>
        /// Gets or sets the ce_cet_id.
        /// </summary>
        [Column]
        public int ce_cet_id { get; set; }

        /// <summary>
        /// Gets or sets the ce_from.
        /// </summary>
        [Column]
        public string ce_from { get; set; }

        /// <summary>
        /// Gets or sets the ce_subject_request.
        /// </summary>
        [Column]
        public string ce_subject_request { get; set; }

        /// <summary>
        /// Gets or sets the ce_body_request_1.
        /// </summary>
        [Column]
        public string ce_body_request_1 { get; set; }

        /// <summary>
        /// Gets or sets the ce_body_request_2.
        /// </summary>
        [Column]
        public string ce_body_request_2 { get; set; }

        /// <summary>
        /// Gets or sets the ce_subject_password.
        /// </summary>
        [Column]
        public string ce_subject_password { get; set; }

        /// <summary>
        /// Gets or sets the ce_body_password_1.
        /// </summary>
        [Column]
        public string ce_body_password_1 { get; set; }

        /// <summary>
        /// Gets or sets the ce_body_password_2.
        /// </summary>
        [Column]
        public string ce_body_password_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_email_type] table.
    /// </summary>
    [TableName("[dbo].[coids_email_type]")]
    [PrimaryKey("cet_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_email_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cet_id.
        /// </summary>
        [Column]
        public int cet_id { get; set; }

        /// <summary>
        /// Gets or sets the cet_name.
        /// </summary>
        [Column]
        public string cet_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_header] table.
    /// </summary>
    [TableName("[dbo].[coids_header]")]
    [PrimaryKey("ch_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_headerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ch_id.
        /// </summary>
        [Column]
        public int ch_id { get; set; }

        /// <summary>
        /// Gets or sets the ch_u_id_rpt.
        /// </summary>
        [Column]
        public int ch_u_id_rpt { get; set; }

        /// <summary>
        /// Gets or sets the ch_date_eff.
        /// </summary>
        [Column]
        public DateTime? ch_date_eff { get; set; }

        /// <summary>
        /// Gets or sets the ch_date_exp.
        /// </summary>
        [Column]
        public DateTime? ch_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack.
        /// </summary>
        [Column]
        public int ch_ack { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack_date.
        /// </summary>
        [Column]
        public DateTime ch_ack_date { get; set; }

        /// <summary>
        /// Gets or sets the ch_ack_user.
        /// </summary>
        [Column]
        public string ch_ack_user { get; set; }

        /// <summary>
        /// Gets or sets the ch_c_id.
        /// </summary>
        [Column]
        public int? ch_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ch_status.
        /// </summary>
        [Column]
        public int? ch_status { get; set; }

        /// <summary>
        /// Gets or sets the ch_email.
        /// </summary>
        [Column]
        public int? ch_email { get; set; }

        /// <summary>
        /// Gets or sets the ch_email_cc.
        /// </summary>
        [Column]
        public string ch_email_cc { get; set; }

        /// <summary>
        /// Gets or sets the ch_cl_id.
        /// </summary>
        [Column]
        public int? ch_cl_id { get; set; }

        /// <summary>
        /// Gets or sets the ch_priority.
        /// </summary>
        [Column]
        public int ch_priority { get; set; }

        /// <summary>
        /// Gets or sets the ch_pushed.
        /// </summary>
        [Column]
        public int ch_pushed { get; set; }

        /// <summary>
        /// Gets or sets the ch_launched.
        /// </summary>
        [Column]
        public int ch_launched { get; set; }

        /// <summary>
        /// Gets or sets the ch_vp_approval.
        /// </summary>
        [Column]
        public int? ch_vp_approval { get; set; }

        /// <summary>
        /// Gets or sets the ch_vp_approval_by.
        /// </summary>
        [Column]
        public string ch_vp_approval_by { get; set; }

        /// <summary>
        /// Gets or sets the ch_vp_approval_date.
        /// </summary>
        [Column]
        public DateTime? ch_vp_approval_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_header_relationship] table.
    /// </summary>
    [TableName("[dbo].[coids_header_relationship]")]
    [PrimaryKey("chr_id")]
    [ExplicitColumns]
    public partial class coids_header_relationshipRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the chr_id.
        /// </summary>
        [Column]
        public int chr_id { get; set; }

        /// <summary>
        /// Gets or sets the chr_ch_id.
        /// </summary>
        [Column]
        public int chr_ch_id { get; set; }

        /// <summary>
        /// Gets or sets the chr_o_id.
        /// </summary>
        [Column]
        public int chr_o_id { get; set; }

        /// <summary>
        /// Gets or sets the chr_e_id.
        /// </summary>
        [Column]
        public int chr_e_id { get; set; }

        /// <summary>
        /// Gets or sets the chr_od_id.
        /// </summary>
        [Column]
        public int chr_od_id { get; set; }

        /// <summary>
        /// Gets or sets the chr_cp_id.
        /// </summary>
        [Column]
        public int chr_cp_id { get; set; }

        /// <summary>
        /// Gets or sets the chr_primary.
        /// </summary>
        [Column]
        public bool chr_primary { get; set; }

        /// <summary>
        /// Gets or sets the chr_title.
        /// </summary>
        [Column]
        public string chr_title { get; set; }

        /// <summary>
        /// Gets or sets the chr_sequence.
        /// </summary>
        [Column]
        public int? chr_sequence { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_header_user] table.
    /// </summary>
    [TableName("[dbo].[coids_header_user]")]
    [PrimaryKey("chu_ch_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_header_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the chu_ch_id.
        /// </summary>
        [Column]
        public int chu_ch_id { get; set; }

        /// <summary>
        /// Gets or sets the chu_u_id.
        /// </summary>
        [Column]
        public int chu_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_individual_push] table.
    /// </summary>
    [TableName("[dbo].[coids_individual_push]")]
    [PrimaryKey("cip_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_individual_pushRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cip_id.
        /// </summary>
        [Column]
        public int cip_id { get; set; }

        /// <summary>
        /// Gets or sets the cip_name.
        /// </summary>
        [Column]
        public string cip_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_individual_push_email] table.
    /// </summary>
    [TableName("[dbo].[coids_individual_push_email]")]
    [PrimaryKey("cipe_id")]
    [ExplicitColumns]
    public partial class coids_individual_push_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cipe_id.
        /// </summary>
        [Column]
        public int cipe_id { get; set; }

        /// <summary>
        /// Gets or sets the cipe_cip_id.
        /// </summary>
        [Column]
        public int cipe_cip_id { get; set; }

        /// <summary>
        /// Gets or sets the cipe_cp_id.
        /// </summary>
        [Column]
        public int? cipe_cp_id { get; set; }

        /// <summary>
        /// Gets or sets the cipe_from.
        /// </summary>
        [Column]
        public string cipe_from { get; set; }

        /// <summary>
        /// Gets or sets the cipe_subject_request.
        /// </summary>
        [Column]
        public string cipe_subject_request { get; set; }

        /// <summary>
        /// Gets or sets the cipe_body_request_1.
        /// </summary>
        [Column]
        public string cipe_body_request_1 { get; set; }

        /// <summary>
        /// Gets or sets the cipe_body_request_2.
        /// </summary>
        [Column]
        public string cipe_body_request_2 { get; set; }

        /// <summary>
        /// Gets or sets the cipe_subject_password.
        /// </summary>
        [Column]
        public string cipe_subject_password { get; set; }

        /// <summary>
        /// Gets or sets the cipe_body_password_1.
        /// </summary>
        [Column]
        public string cipe_body_password_1 { get; set; }

        /// <summary>
        /// Gets or sets the cipe_body_password_2.
        /// </summary>
        [Column]
        public string cipe_body_password_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_launch] table.
    /// </summary>
    [TableName("[dbo].[coids_launch]")]
    [PrimaryKey("cl_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_launchRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cl_id.
        /// </summary>
        [Column]
        public int cl_id { get; set; }

        /// <summary>
        /// Gets or sets the cl_name.
        /// </summary>
        [Column]
        public string cl_name { get; set; }

        /// <summary>
        /// Gets or sets the cl_resolution.
        /// </summary>
        [Column]
        public int cl_resolution { get; set; }

        /// <summary>
        /// Gets or sets the cl_o_id.
        /// </summary>
        [Column]
        public int cl_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cl_date_eff.
        /// </summary>
        [Column]
        public DateTime? cl_date_eff { get; set; }

        /// <summary>
        /// Gets or sets the cl_date_exp.
        /// </summary>
        [Column]
        public DateTime? cl_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the cl_trigger_type.
        /// </summary>
        [Column]
        public int? cl_trigger_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_launch_archive] table.
    /// </summary>
    [TableName("[dbo].[coids_launch_archive]")]
    [PrimaryKey("cla_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_launch_archiveRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cla_id.
        /// </summary>
        [Column]
        public int cla_id { get; set; }

        /// <summary>
        /// Gets or sets the cla_cl_id.
        /// </summary>
        [Column]
        public int cla_cl_id { get; set; }

        /// <summary>
        /// Gets or sets the cla_cp_id.
        /// </summary>
        [Column]
        public int cla_cp_id { get; set; }

        /// <summary>
        /// Gets or sets the cla_name.
        /// </summary>
        [Column]
        public string cla_name { get; set; }

        /// <summary>
        /// Gets or sets the cla_data.
        /// </summary>
        [Column]
        public string cla_data { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_launch_date] table.
    /// </summary>
    [TableName("[dbo].[coids_launch_date]")]
    [PrimaryKey("cld_id")]
    [ExplicitColumns]
    public partial class coids_launch_dateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cld_id.
        /// </summary>
        [Column]
        public int cld_id { get; set; }

        /// <summary>
        /// Gets or sets the cld_ce_id.
        /// </summary>
        [Column]
        public int cld_ce_id { get; set; }

        /// <summary>
        /// Gets or sets the cld_date.
        /// </summary>
        [Column]
        public DateTime cld_date { get; set; }

        /// <summary>
        /// Gets or sets the cld_test.
        /// </summary>
        [Column]
        public int cld_test { get; set; }

        /// <summary>
        /// Gets or sets the cld_test_all.
        /// </summary>
        [Column]
        public int cld_test_all { get; set; }

        /// <summary>
        /// Gets or sets the cld_test_email.
        /// </summary>
        [Column]
        public string cld_test_email { get; set; }

        /// <summary>
        /// Gets or sets the cld_days.
        /// </summary>
        [Column]
        public int? cld_days { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_launch_import] table.
    /// </summary>
    [TableName("[dbo].[coids_launch_import]")]
    [PrimaryKey("cli_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_launch_importRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cli_id.
        /// </summary>
        [Column]
        public int cli_id { get; set; }

        /// <summary>
        /// Gets or sets the cli_timestamp.
        /// </summary>
        [Column]
        public DateTime cli_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the cli_cl_id.
        /// </summary>
        [Column]
        public int cli_cl_id { get; set; }

        /// <summary>
        /// Gets or sets the cli_it_id.
        /// </summary>
        [Column]
        public int cli_it_id { get; set; }

        /// <summary>
        /// Gets or sets the cli_username.
        /// </summary>
        [Column]
        public string cli_username { get; set; }

        /// <summary>
        /// Gets or sets the cli_status.
        /// </summary>
        [Column]
        public string cli_status { get; set; }

        /// <summary>
        /// Gets or sets the cli_dataset.
        /// </summary>
        [Column]
        public string cli_dataset { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_launch_import_add] table.
    /// </summary>
    [TableName("[dbo].[coids_launch_import_add]")]
    [PrimaryKey("clia_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_launch_import_addRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the clia_id.
        /// </summary>
        [Column]
        public int clia_id { get; set; }

        /// <summary>
        /// Gets or sets the clia_timestamp.
        /// </summary>
        [Column]
        public DateTime clia_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the clia_cl_id.
        /// </summary>
        [Column]
        public int clia_cl_id { get; set; }

        /// <summary>
        /// Gets or sets the clia_cliat_id.
        /// </summary>
        [Column]
        public int clia_cliat_id { get; set; }

        /// <summary>
        /// Gets or sets the clia_dop_no.
        /// </summary>
        [Column]
        public int clia_dop_no { get; set; }

        /// <summary>
        /// Gets or sets the clia_dop_name.
        /// </summary>
        [Column]
        public string clia_dop_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_launch_import_add_type] table.
    /// </summary>
    [TableName("[dbo].[coids_launch_import_add_type]")]
    [PrimaryKey("cliat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_launch_import_add_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cliat_id.
        /// </summary>
        [Column]
        public int cliat_id { get; set; }

        /// <summary>
        /// Gets or sets the cliat_name.
        /// </summary>
        [Column]
        public string cliat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_note] table.
    /// </summary>
    [TableName("[dbo].[coids_note]")]
    [PrimaryKey("cn_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_noteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cn_id.
        /// </summary>
        [Column]
        public int cn_id { get; set; }

        /// <summary>
        /// Gets or sets the cn_ch_id.
        /// </summary>
        [Column]
        public int cn_ch_id { get; set; }

        /// <summary>
        /// Gets or sets the cn_cnt_id.
        /// </summary>
        [Column]
        public int cn_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the cn_subject.
        /// </summary>
        [Column]
        public string cn_subject { get; set; }

        /// <summary>
        /// Gets or sets the cn_add_user.
        /// </summary>
        [Column]
        public string cn_add_user { get; set; }

        /// <summary>
        /// Gets or sets the cn_add_date.
        /// </summary>
        [Column]
        public DateTime cn_add_date { get; set; }

        /// <summary>
        /// Gets or sets the cn_mod_user.
        /// </summary>
        [Column]
        public string cn_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the cn_mod_date.
        /// </summary>
        [Column]
        public DateTime cn_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the cn_sort.
        /// </summary>
        [Column]
        public int cn_sort { get; set; }

        /// <summary>
        /// Gets or sets the cn_att_url.
        /// </summary>
        [Column]
        public string cn_att_url { get; set; }

        /// <summary>
        /// Gets or sets the cn_body.
        /// </summary>
        [Column]
        public string cn_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_note_type] table.
    /// </summary>
    [TableName("[dbo].[coids_note_type]")]
    [PrimaryKey("cnt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_note_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cnt_id.
        /// </summary>
        [Column]
        public int cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the cnt_name.
        /// </summary>
        [Column]
        public string cnt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_policy] table.
    /// </summary>
    [TableName("[dbo].[coids_policy]")]
    [ExplicitColumns]
    public partial class coids_policyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cpoly_id.
        /// </summary>
        [Column]
        public int cpoly_id { get; set; }

        /// <summary>
        /// Gets or sets the cpoly_o_id.
        /// </summary>
        [Column]
        public int cpoly_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cpoly_title.
        /// </summary>
        [Column]
        public string cpoly_title { get; set; }

        /// <summary>
        /// Gets or sets the cpoly_path.
        /// </summary>
        [Column]
        public string cpoly_path { get; set; }

        /// <summary>
        /// Gets or sets the cpoly_show_cond.
        /// </summary>
        [Column]
        public int cpoly_show_cond { get; set; }

        /// <summary>
        /// Gets or sets the cpoly_cp_id.
        /// </summary>
        [Column]
        public int? cpoly_cp_id { get; set; }

        /// <summary>
        /// Gets or sets the cpoly_order.
        /// </summary>
        [Column]
        public int cpoly_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_position] table.
    /// </summary>
    [TableName("[dbo].[coids_position]")]
    [PrimaryKey("cp_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_positionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cp_id.
        /// </summary>
        [Column]
        public int cp_id { get; set; }

        /// <summary>
        /// Gets or sets the cp_name.
        /// </summary>
        [Column]
        public string cp_name { get; set; }

        /// <summary>
        /// Gets or sets the cp_question_style.
        /// </summary>
        [Column]
        public int cp_question_style { get; set; }

        /// <summary>
        /// Gets or sets the cp_combined_email.
        /// </summary>
        [Column]
        public int cp_combined_email { get; set; }

        /// <summary>
        /// Gets or sets the cp_o_id.
        /// </summary>
        [Column]
        public int cp_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cp_certification_text.
        /// </summary>
        [Column]
        public string cp_certification_text { get; set; }

        /// <summary>
        /// Gets or sets the cp_preamble.
        /// </summary>
        [Column]
        public string cp_preamble { get; set; }

        /// <summary>
        /// Gets or sets the cp_vp_1.
        /// </summary>
        [Column]
        public int? cp_vp_1 { get; set; }

        /// <summary>
        /// Gets or sets the cp_vp_2.
        /// </summary>
        [Column]
        public int? cp_vp_2 { get; set; }

        /// <summary>
        /// Gets or sets the cp_vp_3.
        /// </summary>
        [Column]
        public int? cp_vp_3 { get; set; }

        /// <summary>
        /// Gets or sets the cp_cl_id.
        /// </summary>
        [Column]
        public int cp_cl_id { get; set; }

        /// <summary>
        /// Gets or sets the cp_show_password.
        /// </summary>
        [Column]
        public int? cp_show_password { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_question] table.
    /// </summary>
    [TableName("[dbo].[coids_question]")]
    [PrimaryKey("cq_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_questionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cq_id.
        /// </summary>
        [Column]
        public int cq_id { get; set; }

        /// <summary>
        /// Gets or sets the cq_question.
        /// </summary>
        [Column]
        public string cq_question { get; set; }

        /// <summary>
        /// Gets or sets the cq_addendum.
        /// </summary>
        [Column]
        public int cq_addendum { get; set; }

        /// <summary>
        /// Gets or sets the cq_cp_id.
        /// </summary>
        [Column]
        public int? cq_cp_id { get; set; }

        /// <summary>
        /// Gets or sets the cq_parent_id.
        /// </summary>
        [Column]
        public int? cq_parent_id { get; set; }

        /// <summary>
        /// Gets or sets the cq_question_text.
        /// </summary>
        [Column]
        public string cq_question_text { get; set; }

        /// <summary>
        /// Gets or sets the cq_friendly_id.
        /// </summary>
        [Column]
        public int? cq_friendly_id { get; set; }

        /// <summary>
        /// Gets or sets the cq_required.
        /// </summary>
        [Column]
        public bool? cq_required { get; set; }

        /// <summary>
        /// Gets or sets the cq_addendum_validation_crt_value.
        /// </summary>
        [Column]
        public string cq_addendum_validation_crt_value { get; set; }

        /// <summary>
        /// Gets or sets the cq_comments_validation_crt_value.
        /// </summary>
        [Column]
        public string cq_comments_validation_crt_value { get; set; }

        /// <summary>
        /// Gets or sets the cq_question_short.
        /// </summary>
        [Column]
        public string cq_question_short { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_resolution] table.
    /// </summary>
    [TableName("[dbo].[coids_resolution]")]
    [PrimaryKey("cr_cn_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_resolutionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cr_cn_id.
        /// </summary>
        [Column]
        public int cr_cn_id { get; set; }

        /// <summary>
        /// Gets or sets the cr_ack.
        /// </summary>
        [Column]
        public int cr_ack { get; set; }

        /// <summary>
        /// Gets or sets the cr_ack_date.
        /// </summary>
        [Column]
        public DateTime cr_ack_date { get; set; }

        /// <summary>
        /// Gets or sets the cr_ack_user.
        /// </summary>
        [Column]
        public string cr_ack_user { get; set; }

        /// <summary>
        /// Gets or sets the cr_comment.
        /// </summary>
        [Column]
        public string cr_comment { get; set; }

        /// <summary>
        /// Gets or sets the cr_cl_id.
        /// </summary>
        [Column]
        public int? cr_cl_id { get; set; }

        /// <summary>
        /// Gets or sets the cr_send_email.
        /// </summary>
        [Column]
        public int cr_send_email { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_resolution_template] table.
    /// </summary>
    [TableName("[dbo].[coids_resolution_template]")]
    [PrimaryKey("crt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_resolution_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the crt_id.
        /// </summary>
        [Column]
        public int crt_id { get; set; }

        /// <summary>
        /// Gets or sets the crt_o_id.
        /// </summary>
        [Column]
        public int crt_o_id { get; set; }

        /// <summary>
        /// Gets or sets the crt_subject.
        /// </summary>
        [Column]
        public string crt_subject { get; set; }

        /// <summary>
        /// Gets or sets the crt_body.
        /// </summary>
        [Column]
        public string crt_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_response] table.
    /// </summary>
    [TableName("[dbo].[coids_response]")]
    [PrimaryKey("cr_id")]
    [ExplicitColumns]
    public partial class coids_responseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cr_id.
        /// </summary>
        [Column]
        public int cr_id { get; set; }

        /// <summary>
        /// Gets or sets the cr_ch_id.
        /// </summary>
        [Column]
        public int cr_ch_id { get; set; }

        /// <summary>
        /// Gets or sets the cr_cq_id.
        /// </summary>
        [Column]
        public int cr_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the cr_answer.
        /// </summary>
        [Column]
        public int cr_answer { get; set; }

        /// <summary>
        /// Gets or sets the cr_comment.
        /// </summary>
        [Column]
        public string cr_comment { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_response_type] table.
    /// </summary>
    [TableName("[dbo].[coids_response_type]")]
    [PrimaryKey("crt_type", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_response_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the crt_type.
        /// </summary>
        [Column]
        public int crt_type { get; set; }

        /// <summary>
        /// Gets or sets the crt_value.
        /// </summary>
        [Column]
        public int crt_value { get; set; }

        /// <summary>
        /// Gets or sets the crt_text.
        /// </summary>
        [Column]
        public string crt_text { get; set; }

        /// <summary>
        /// Gets or sets the crt_indicates_conflict.
        /// </summary>
        [Column]
        public int crt_indicates_conflict { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_tip] table.
    /// </summary>
    [TableName("[dbo].[coids_tip]")]
    [PrimaryKey("ct_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_tipRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ct_id.
        /// </summary>
        [Column]
        public int ct_id { get; set; }

        /// <summary>
        /// Gets or sets the ct_o_id.
        /// </summary>
        [Column]
        public int ct_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ct_ctt_id.
        /// </summary>
        [Column]
        public int ct_ctt_id { get; set; }

        /// <summary>
        /// Gets or sets the ct_name.
        /// </summary>
        [Column]
        public string ct_name { get; set; }

        /// <summary>
        /// Gets or sets the ct_body.
        /// </summary>
        [Column]
        public string ct_body { get; set; }

        /// <summary>
        /// Gets or sets the ct_priority.
        /// </summary>
        [Column]
        public int? ct_priority { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[coids_tip_type] table.
    /// </summary>
    [TableName("[dbo].[coids_tip_type]")]
    [PrimaryKey("ctt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class coids_tip_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ctt_id.
        /// </summary>
        [Column]
        public int ctt_id { get; set; }

        /// <summary>
        /// Gets or sets the ctt_name.
        /// </summary>
        [Column]
        public string ctt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[CoidsAttachment] table.
    /// </summary>
    [TableName("[dbo].[CoidsAttachment]")]
    [PrimaryKey("CoidsAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CoidsAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CoidsAttachmentId.
        /// </summary>
        [Column]
        public long CoidsAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the CoidsNoteId.
        /// </summary>
        [Column]
        public int CoidsNoteId { get; set; }

        /// <summary>
        /// Gets or sets the CoidsHeaderId.
        /// </summary>
        [Column]
        public int CoidsHeaderId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[compliance_answer] table.
    /// </summary>
    [TableName("[dbo].[compliance_answer]")]
    [ExplicitColumns]
    public partial class compliance_answerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ca_id.
        /// </summary>
        [Column]
        public int ca_id { get; set; }

        /// <summary>
        /// Gets or sets the ca_value.
        /// </summary>
        [Column]
        public int ca_value { get; set; }

        /// <summary>
        /// Gets or sets the ca_name.
        /// </summary>
        [Column]
        public string ca_name { get; set; }

        /// <summary>
        /// Gets or sets the ca_sort.
        /// </summary>
        [Column]
        public int ca_sort { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[compliance_question] table.
    /// </summary>
    [TableName("[dbo].[compliance_question]")]
    [PrimaryKey("cq_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class compliance_questionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cq_id.
        /// </summary>
        [Column]
        public int cq_id { get; set; }

        /// <summary>
        /// Gets or sets the cq_text.
        /// </summary>
        [Column]
        public string cq_text { get; set; }

        /// <summary>
        /// Gets or sets the cq_pair_set.
        /// </summary>
        [Column]
        public int? cq_pair_set { get; set; }

        /// <summary>
        /// Gets or sets the cq_pair_item.
        /// </summary>
        [Column]
        public int? cq_pair_item { get; set; }

        /// <summary>
        /// Gets or sets the cq_view_name.
        /// </summary>
        [Column]
        public string cq_view_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract] table.
    /// </summary>
    [TableName("[dbo].[contract]")]
    [PrimaryKey("c_id")]
    [ExplicitColumns]
    public partial class contractRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the c_id.
        /// </summary>
        [Column]
        public int c_id { get; set; }

        /// <summary>
        /// Gets or sets the c_con_no.
        /// </summary>
        [Column]
        public string c_con_no { get; set; }

        /// <summary>
        /// Gets or sets the c_v_id.
        /// </summary>
        [Column]
        public int c_v_id { get; set; }

        /// <summary>
        /// Gets or sets the c_o_id.
        /// </summary>
        [Column]
        public int c_o_id { get; set; }

        /// <summary>
        /// Gets or sets the c_e_id.
        /// </summary>
        [Column]
        public int c_e_id { get; set; }

        /// <summary>
        /// Gets or sets the c_od_id.
        /// </summary>
        [Column]
        public int c_od_id { get; set; }

        /// <summary>
        /// Gets or sets the c_ot_id.
        /// </summary>
        [Column]
        public int c_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the c_date_eff.
        /// </summary>
        [Column]
        public DateTime c_date_eff { get; set; }

        /// <summary>
        /// Gets or sets the c_date_exp.
        /// </summary>
        [Column]
        public DateTime c_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the c_auto_renew.
        /// </summary>
        [Column]
        public int c_auto_renew { get; set; }

        /// <summary>
        /// Gets or sets the c_u_id_primary.
        /// </summary>
        [Column]
        public int c_u_id_primary { get; set; }

        /// <summary>
        /// Gets or sets the c_u_id_secondary.
        /// </summary>
        [Column]
        public int c_u_id_secondary { get; set; }

        /// <summary>
        /// Gets or sets the c_value.
        /// </summary>
        [Column]
        public decimal c_value { get; set; }

        /// <summary>
        /// Gets or sets the c_value_esc.
        /// </summary>
        [Column]
        public int c_value_esc { get; set; }

        /// <summary>
        /// Gets or sets the c_value_sqf.
        /// </summary>
        [Column]
        public int c_value_sqf { get; set; }

        /// <summary>
        /// Gets or sets the c_value_psf.
        /// </summary>
        [Column]
        public decimal c_value_psf { get; set; }

        /// <summary>
        /// Gets or sets the c_action_list.
        /// </summary>
        [Column]
        public bool c_action_list { get; set; }

        /// <summary>
        /// Gets or sets the c_status.
        /// </summary>
        [Column]
        public int c_status { get; set; }

        /// <summary>
        /// Gets or sets the c_add_user.
        /// </summary>
        [Column]
        public string c_add_user { get; set; }

        /// <summary>
        /// Gets or sets the c_add_date.
        /// </summary>
        [Column]
        public DateTime c_add_date { get; set; }

        /// <summary>
        /// Gets or sets the c_mod_user.
        /// </summary>
        [Column]
        public string c_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the c_mod_date.
        /// </summary>
        [Column]
        public DateTime c_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the c_no_email.
        /// </summary>
        [Column]
        public int c_no_email { get; set; }

        /// <summary>
        /// Gets or sets the c_u_id_third.
        /// </summary>
        [Column]
        public int? c_u_id_third { get; set; }

        /// <summary>
        /// Gets or sets the c_auto_renew_term.
        /// </summary>
        [Column]
        public int? c_auto_renew_term { get; set; }

        /// <summary>
        /// Gets or sets the c_auto_renew_time.
        /// </summary>
        [Column]
        public int? c_auto_renew_time { get; set; }

        /// <summary>
        /// Gets or sets the c_sig_name.
        /// </summary>
        [Column]
        public string c_sig_name { get; set; }

        /// <summary>
        /// Gets or sets the c_sig_title.
        /// </summary>
        [Column]
        public string c_sig_title { get; set; }

        /// <summary>
        /// Gets or sets the c_u_id_primary_title.
        /// </summary>
        [Column]
        public string c_u_id_primary_title { get; set; }

        /// <summary>
        /// Gets or sets the c_u_id_secondary_title.
        /// </summary>
        [Column]
        public string c_u_id_secondary_title { get; set; }

        /// <summary>
        /// Gets or sets the c_u_id_third_title.
        /// </summary>
        [Column]
        public string c_u_id_third_title { get; set; }

        /// <summary>
        /// Gets or sets the c_group.
        /// </summary>
        [Column]
        public string c_group { get; set; }

        /// <summary>
        /// Gets or sets the c_po_no.
        /// </summary>
        [Column]
        public string c_po_no { get; set; }

        /// <summary>
        /// Gets or sets the c_sig_name_v.
        /// </summary>
        [Column]
        public string c_sig_name_v { get; set; }

        /// <summary>
        /// Gets or sets the c_sig_title_v.
        /// </summary>
        [Column]
        public string c_sig_title_v { get; set; }

        /// <summary>
        /// Gets or sets the c_product.
        /// </summary>
        [Column]
        public string c_product { get; set; }

        /// <summary>
        /// Gets or sets the c_desc.
        /// </summary>
        [Column]
        public string c_desc { get; set; }

        /// <summary>
        /// Gets or sets the c_date_destroy.
        /// </summary>
        [Column]
        public DateTime? c_date_destroy { get; set; }

        /// <summary>
        /// Gets or sets the c_date_exp_coi.
        /// </summary>
        [Column]
        public DateTime? c_date_exp_coi { get; set; }

        /// <summary>
        /// Gets or sets the c_url_con.
        /// </summary>
        [Column]
        public string c_url_con { get; set; }

        /// <summary>
        /// Gets or sets the c_url_coi.
        /// </summary>
        [Column]
        public string c_url_coi { get; set; }

        /// <summary>
        /// Gets or sets the c_term.
        /// </summary>
        [Column]
        public string c_term { get; set; }

        /// <summary>
        /// Gets or sets the c_key_terms.
        /// </summary>
        [Column]
        public string c_key_terms { get; set; }

        /// <summary>
        /// Gets or sets the c_date_exec.
        /// </summary>
        [Column]
        public DateTime? c_date_exec { get; set; }

        /// <summary>
        /// Gets or sets the c_parent_id.
        /// </summary>
        [Column]
        public int? c_parent_id { get; set; }

        /// <summary>
        /// Gets or sets the c_ref_no.
        /// </summary>
        [Column]
        public string c_ref_no { get; set; }

        /// <summary>
        /// Gets or sets the c_qa_hookup_by.
        /// </summary>
        [Column]
        public string c_qa_hookup_by { get; set; }

        /// <summary>
        /// Gets or sets the c_url_la.
        /// </summary>
        [Column]
        public string c_url_la { get; set; }

        /// <summary>
        /// Gets or sets the c_completion_security.
        /// </summary>
        [Column]
        public int? c_completion_security { get; set; }

        /// <summary>
        /// Gets or sets the c_date_exp_baa.
        /// </summary>
        [Column]
        public DateTime? c_date_exp_baa { get; set; }

        /// <summary>
        /// Gets or sets the c_url_baa.
        /// </summary>
        [Column]
        public string c_url_baa { get; set; }

        /// <summary>
        /// Gets or sets the c_term_undefined.
        /// </summary>
        [Column]
        public bool c_term_undefined { get; set; }

        /// <summary>
        /// Gets or sets the c_value_annual.
        /// </summary>
        [Column]
        public decimal c_value_annual { get; set; }

        /// <summary>
        /// Gets or sets the c_value_total.
        /// </summary>
        [Column]
        public decimal c_value_total { get; set; }

        /// <summary>
        /// Gets or sets the c_auto_renew_suppress_date.
        /// </summary>
        [Column]
        public DateTime? c_auto_renew_suppress_date { get; set; }

        /// <summary>
        /// Gets or sets the c_con_no_custom.
        /// </summary>
        [Column]
        public string c_con_no_custom { get; set; }

        /// <summary>
        /// Gets or sets the c_la_unique_id.
        /// </summary>
        [Column]
        public string c_la_unique_id { get; set; }

        /// <summary>
        /// Gets or sets the c_date_termination.
        /// </summary>
        [Column]
        public DateTime? c_date_termination { get; set; }

        /// <summary>
        /// Gets or sets the c_other_info_1.
        /// </summary>
        [Column]
        public string c_other_info_1 { get; set; }

        /// <summary>
        /// Gets or sets the c_other_info_2.
        /// </summary>
        [Column]
        public string c_other_info_2 { get; set; }

        /// <summary>
        /// Gets or sets the c_value_currency_code.
        /// </summary>
        [Column]
        public string c_value_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the c_value_psf_currency_code.
        /// </summary>
        [Column]
        public string c_value_psf_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the c_value_annual_currency_code.
        /// </summary>
        [Column]
        public string c_value_annual_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the c_value_total_currency_code.
        /// </summary>
        [Column]
        public string c_value_total_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the c_ccd_id.
        /// </summary>
        [Column]
        public int? c_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the c_state_id.
        /// </summary>
        [Column]
        public int? c_state_id { get; set; }

        /// <summary>
        /// Gets or sets the c_con_no_display.
        /// </summary>
        [Column]
        public string c_con_no_display { get; set; }

        /// <summary>
        /// Gets or sets the c_con_no_sort.
        /// </summary>
        [Column]
        public string c_con_no_sort { get; set; }

        /// <summary>
        /// Gets or sets the last_modified.
        /// </summary>
        [Column]
        public DateTime last_modified { get; set; }

        /// <summary>
        /// Gets or sets the c_not_signed.
        /// </summary>
        [Column]
        public int c_not_signed { get; set; }

        /// <summary>
        /// Gets or sets the c_date_eff_baa.
        /// </summary>
        [Column]
        public DateTime? c_date_eff_baa { get; set; }

        /// <summary>
        /// Gets or sets the c_date_eff_coi.
        /// </summary>
        [Column]
        public DateTime? c_date_eff_coi { get; set; }

        /// <summary>
        /// Gets or sets the c_suppress_email_coi.
        /// </summary>
        [Column]
        public bool c_suppress_email_coi { get; set; }

        /// <summary>
        /// Gets or sets the c_suppress_email_baa.
        /// </summary>
        [Column]
        public bool c_suppress_email_baa { get; set; }

        /// <summary>
        /// Gets or sets the c_max_compensation.
        /// </summary>
        [Column]
        public decimal c_max_compensation { get; set; }

        /// <summary>
        /// Gets or sets the c_max_compensation_months.
        /// </summary>
        [Column]
        public int c_max_compensation_months { get; set; }

        /// <summary>
        /// Gets or sets the c_archive_on.
        /// </summary>
        [Column]
        public DateTime? c_archive_on { get; set; }

        /// <summary>
        /// Gets or sets the c_archive_until.
        /// </summary>
        [Column]
        public DateTime? c_archive_until { get; set; }

        /// <summary>
        /// Gets or sets the c_display_termination.
        /// </summary>
        [Column]
        public bool? c_display_termination { get; set; }

        /// <summary>
        /// Gets or sets the c_termination_comment.
        /// </summary>
        [Column]
        public string c_termination_comment { get; set; }

        /// <summary>
        /// Gets or sets the c_mod_user_orig.
        /// </summary>
        [Column]
        public string c_mod_user_orig { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[contract_adhoc_field]")]
    [PrimaryKey("cfld_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cfld_id.
        /// </summary>
        [Column]
        public int cfld_id { get; set; }

        /// <summary>
        /// Gets or sets the cfld_c_id.
        /// </summary>
        [Column]
        public int cfld_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cfld_fld_id.
        /// </summary>
        [Column]
        public int cfld_fld_id { get; set; }

        /// <summary>
        /// Gets or sets the cfld_value.
        /// </summary>
        [Column]
        public string cfld_value { get; set; }

        /// <summary>
        /// Gets or sets the cfld_value_id.
        /// </summary>
        [Column]
        public int? cfld_value_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_asset] table.
    /// </summary>
    [TableName("[dbo].[contract_asset]")]
    [PrimaryKey("ca_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_assetRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ca_id.
        /// </summary>
        [Column]
        public int ca_id { get; set; }

        /// <summary>
        /// Gets or sets the ca_c_id.
        /// </summary>
        [Column]
        public int ca_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ca_od_id.
        /// </summary>
        [Column]
        public int ca_od_id { get; set; }

        /// <summary>
        /// Gets or sets the ca_item.
        /// </summary>
        [Column]
        public string ca_item { get; set; }

        /// <summary>
        /// Gets or sets the ca_desc.
        /// </summary>
        [Column]
        public string ca_desc { get; set; }

        /// <summary>
        /// Gets or sets the ca_serial_no.
        /// </summary>
        [Column]
        public string ca_serial_no { get; set; }

        /// <summary>
        /// Gets or sets the ca_contact.
        /// </summary>
        [Column]
        public string ca_contact { get; set; }

        /// <summary>
        /// Gets or sets the ca_location.
        /// </summary>
        [Column]
        public string ca_location { get; set; }

        /// <summary>
        /// Gets or sets the ca_address_1.
        /// </summary>
        [Column]
        public string ca_address_1 { get; set; }

        /// <summary>
        /// Gets or sets the ca_address_2.
        /// </summary>
        [Column]
        public string ca_address_2 { get; set; }

        /// <summary>
        /// Gets or sets the ca_city.
        /// </summary>
        [Column]
        public string ca_city { get; set; }

        /// <summary>
        /// Gets or sets the ca_state.
        /// </summary>
        [Column]
        public string ca_state { get; set; }

        /// <summary>
        /// Gets or sets the ca_zip.
        /// </summary>
        [Column]
        public string ca_zip { get; set; }

        /// <summary>
        /// Gets or sets the ca_comment.
        /// </summary>
        [Column]
        public string ca_comment { get; set; }

        /// <summary>
        /// Gets or sets the ca_cost.
        /// </summary>
        [Column]
        public decimal? ca_cost { get; set; }

        /// <summary>
        /// Gets or sets the ca_date.
        /// </summary>
        [Column]
        public DateTime? ca_date { get; set; }

        /// <summary>
        /// Gets or sets the ca_added_by_u_id.
        /// </summary>
        [Column]
        public int? ca_added_by_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ca_cost_currency_code.
        /// </summary>
        [Column]
        public string ca_cost_currency_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_baa_email] table.
    /// </summary>
    [TableName("[dbo].[contract_baa_email]")]
    [PrimaryKey("cbaa_e_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_baa_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cbaa_e_id.
        /// </summary>
        [Column]
        public int cbaa_e_id { get; set; }

        /// <summary>
        /// Gets or sets the cbaa_c_id.
        /// </summary>
        [Column]
        public int cbaa_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cbaa_e_u_no.
        /// </summary>
        [Column]
        public int cbaa_e_u_no { get; set; }

        /// <summary>
        /// Gets or sets the cbaa_e_u_id.
        /// </summary>
        [Column]
        public string cbaa_e_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_batch_upload] table.
    /// </summary>
    [TableName("[dbo].[contract_batch_upload]")]
    [PrimaryKey("cbu_id")]
    [ExplicitColumns]
    public partial class contract_batch_uploadRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cbu_id.
        /// </summary>
        [Column]
        public int cbu_id { get; set; }

        /// <summary>
        /// Gets or sets the cbu_created.
        /// </summary>
        [Column]
        public DateTime cbu_created { get; set; }

        /// <summary>
        /// Gets or sets the cbu_tag.
        /// </summary>
        [Column]
        public string cbu_tag { get; set; }

        /// <summary>
        /// Gets or sets the cbu_completed.
        /// </summary>
        [Column]
        public DateTime? cbu_completed { get; set; }

        /// <summary>
        /// Gets or sets the cbu_o_id.
        /// </summary>
        [Column]
        public int? cbu_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cbu_ot_id.
        /// </summary>
        [Column]
        public int? cbu_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the cbu_od_id.
        /// </summary>
        [Column]
        public int? cbu_od_id { get; set; }

        /// <summary>
        /// Gets or sets the cbu_e_id.
        /// </summary>
        [Column]
        public int? cbu_e_id { get; set; }

        /// <summary>
        /// Gets or sets the cbu_c_u_id_primary.
        /// </summary>
        [Column]
        public int? cbu_c_u_id_primary { get; set; }

        /// <summary>
        /// Gets or sets the cbu_c_u_id_secondary.
        /// </summary>
        [Column]
        public int? cbu_c_u_id_secondary { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_batch_upload_detail] table.
    /// </summary>
    [TableName("[dbo].[contract_batch_upload_detail]")]
    [PrimaryKey("cbud_id")]
    [ExplicitColumns]
    public partial class contract_batch_upload_detailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cbud_id.
        /// </summary>
        [Column]
        public int cbud_id { get; set; }

        /// <summary>
        /// Gets or sets the cbud_cbu_id.
        /// </summary>
        [Column]
        public int cbud_cbu_id { get; set; }

        /// <summary>
        /// Gets or sets the cbud_upload_id.
        /// </summary>
        [Column]
        public int cbud_upload_id { get; set; }

        /// <summary>
        /// Gets or sets the cbud_success.
        /// </summary>
        [Column]
        public int? cbud_success { get; set; }

        /// <summary>
        /// Gets or sets the cbud_filename.
        /// </summary>
        [Column]
        public string cbud_filename { get; set; }

        /// <summary>
        /// Gets or sets the cbud_filetype_id.
        /// </summary>
        [Column]
        public int cbud_filetype_id { get; set; }

        /// <summary>
        /// Gets or sets the cbud_filesize.
        /// </summary>
        [Column]
        public int cbud_filesize { get; set; }

        /// <summary>
        /// Gets or sets the cbud_c_id.
        /// </summary>
        [Column]
        public int? cbud_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cbud_succes_updated.
        /// </summary>
        [Column]
        public DateTime? cbud_succes_updated { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_batch_upload_site] table.
    /// </summary>
    [TableName("[dbo].[contract_batch_upload_site]")]
    [PrimaryKey("cbus_id")]
    [ExplicitColumns]
    public partial class contract_batch_upload_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cbus_id.
        /// </summary>
        [Column]
        public int cbus_id { get; set; }

        /// <summary>
        /// Gets or sets the cbus_cbu_id.
        /// </summary>
        [Column]
        public int cbus_cbu_id { get; set; }

        /// <summary>
        /// Gets or sets the cbus_s_id.
        /// </summary>
        [Column]
        public int cbus_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_batch_upload_type] table.
    /// </summary>
    [TableName("[dbo].[contract_batch_upload_type]")]
    [PrimaryKey("cbut_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_batch_upload_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cbut_id.
        /// </summary>
        [Column]
        public int cbut_id { get; set; }

        /// <summary>
        /// Gets or sets the cbut_name.
        /// </summary>
        [Column]
        public string cbut_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_coi_email] table.
    /// </summary>
    [TableName("[dbo].[contract_coi_email]")]
    [PrimaryKey("ccoi_e_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_coi_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccoi_e_id.
        /// </summary>
        [Column]
        public int ccoi_e_id { get; set; }

        /// <summary>
        /// Gets or sets the ccoi_c_id.
        /// </summary>
        [Column]
        public int ccoi_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ccoi_e_u_no.
        /// </summary>
        [Column]
        public int ccoi_e_u_no { get; set; }

        /// <summary>
        /// Gets or sets the ccoi_e_u_id.
        /// </summary>
        [Column]
        public string ccoi_e_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_compliance] table.
    /// </summary>
    [TableName("[dbo].[contract_compliance]")]
    [PrimaryKey("cc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_complianceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cc_id.
        /// </summary>
        [Column]
        public int cc_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_c_id.
        /// </summary>
        [Column]
        public int cc_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_cq_id.
        /// </summary>
        [Column]
        public int cc_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the cc_yes.
        /// </summary>
        [Column]
        public int cc_yes { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_cost_field] table.
    /// </summary>
    [TableName("[dbo].[contract_cost_field]")]
    [PrimaryKey("ccf_id")]
    [ExplicitColumns]
    public partial class contract_cost_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccf_id.
        /// </summary>
        [Column]
        public int ccf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccf_code.
        /// </summary>
        [Column]
        public string ccf_code { get; set; }

        /// <summary>
        /// Gets or sets the ccf_description.
        /// </summary>
        [Column]
        public string ccf_description { get; set; }

        /// <summary>
        /// Gets or sets the ccf_deleted.
        /// </summary>
        [Column]
        public bool ccf_deleted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_cost_type] table.
    /// </summary>
    [TableName("[dbo].[contract_cost_type]")]
    [PrimaryKey("cct_id")]
    [ExplicitColumns]
    public partial class contract_cost_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cct_id.
        /// </summary>
        [Column]
        public int cct_id { get; set; }

        /// <summary>
        /// Gets or sets the cct_ccf_id.
        /// </summary>
        [Column]
        public int cct_ccf_id { get; set; }

        /// <summary>
        /// Gets or sets the cct_t_id.
        /// </summary>
        [Column]
        public int cct_t_id { get; set; }

        /// <summary>
        /// Gets or sets the cct_unit_required.
        /// </summary>
        [Column]
        public bool cct_unit_required { get; set; }

        /// <summary>
        /// Gets or sets the cct_year_required.
        /// </summary>
        [Column]
        public bool cct_year_required { get; set; }

        /// <summary>
        /// Gets or sets the cct_period_required.
        /// </summary>
        [Column]
        public bool cct_period_required { get; set; }

        /// <summary>
        /// Gets or sets the cct_details_required.
        /// </summary>
        [Column]
        public bool cct_details_required { get; set; }

        /// <summary>
        /// Gets or sets the cct_deleted.
        /// </summary>
        [Column]
        public bool cct_deleted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_cost_unit_type] table.
    /// </summary>
    [TableName("[dbo].[contract_cost_unit_type]")]
    [PrimaryKey("ccu_id")]
    [ExplicitColumns]
    public partial class contract_cost_unit_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccu_id.
        /// </summary>
        [Column]
        public int ccu_id { get; set; }

        /// <summary>
        /// Gets or sets the ccu_name.
        /// </summary>
        [Column]
        public string ccu_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_cost_value] table.
    /// </summary>
    [TableName("[dbo].[contract_cost_value]")]
    [PrimaryKey("ccv_id")]
    [ExplicitColumns]
    public partial class contract_cost_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccv_id.
        /// </summary>
        [Column]
        public int ccv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccv_ccf_id.
        /// </summary>
        [Column]
        public int ccv_ccf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccv_c_id.
        /// </summary>
        [Column]
        public int ccv_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ccv_details.
        /// </summary>
        [Column]
        public string ccv_details { get; set; }

        /// <summary>
        /// Gets or sets the ccv_unit.
        /// </summary>
        [Column]
        public double? ccv_unit { get; set; }

        /// <summary>
        /// Gets or sets the ccv_ccu_id.
        /// </summary>
        [Column]
        public int? ccv_ccu_id { get; set; }

        /// <summary>
        /// Gets or sets the ccv_year.
        /// </summary>
        [Column]
        public int? ccv_year { get; set; }

        /// <summary>
        /// Gets or sets the ccv_period.
        /// </summary>
        [Column]
        public int? ccv_period { get; set; }

        /// <summary>
        /// Gets or sets the ccv_total.
        /// </summary>
        [Column]
        public double ccv_total { get; set; }

        /// <summary>
        /// Gets or sets the ccv_fixed.
        /// </summary>
        [Column]
        public bool ccv_fixed { get; set; }

        /// <summary>
        /// Gets or sets the ccv_total_currency_code.
        /// </summary>
        [Column]
        public string ccv_total_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the ccv_cct_id.
        /// </summary>
        [Column]
        public int? ccv_cct_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_critical_date] table.
    /// </summary>
    [TableName("[dbo].[contract_critical_date]")]
    [PrimaryKey("cd_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_critical_dateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cd_id.
        /// </summary>
        [Column]
        public int cd_id { get; set; }

        /// <summary>
        /// Gets or sets the cd_c_id.
        /// </summary>
        [Column]
        public int cd_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cd_u_id_author.
        /// </summary>
        [Column]
        public int cd_u_id_author { get; set; }

        /// <summary>
        /// Gets or sets the cd_subject.
        /// </summary>
        [Column]
        public string cd_subject { get; set; }

        /// <summary>
        /// Gets or sets the cd_date.
        /// </summary>
        [Column]
        public DateTime cd_date { get; set; }

        /// <summary>
        /// Gets or sets the cd_comment.
        /// </summary>
        [Column]
        public string cd_comment { get; set; }

        /// <summary>
        /// Gets or sets the cd_cdes_id.
        /// </summary>
        [Column]
        public int? cd_cdes_id { get; set; }

        /// <summary>
        /// Gets or sets the cd_email_stop_date.
        /// </summary>
        [Column]
        public DateTime? cd_email_stop_date { get; set; }

        /// <summary>
        /// Gets or sets the cd_email_interval.
        /// </summary>
        [Column]
        public int? cd_email_interval { get; set; }

        /// <summary>
        /// Gets or sets the cd_email_after_date.
        /// </summary>
        [Column]
        public int? cd_email_after_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_critical_date_email] table.
    /// </summary>
    [TableName("[dbo].[contract_critical_date_email]")]
    [PrimaryKey("ccd_e_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_critical_date_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccd_e_id.
        /// </summary>
        [Column]
        public int ccd_e_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_e_cd_id.
        /// </summary>
        [Column]
        public int ccd_e_cd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccd_e_u_no.
        /// </summary>
        [Column]
        public int ccd_e_u_no { get; set; }

        /// <summary>
        /// Gets or sets the ccd_e_u_id.
        /// </summary>
        [Column]
        public string ccd_e_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_custom_field_attachment] table.
    /// </summary>
    [TableName("[dbo].[contract_custom_field_attachment]")]
    [PrimaryKey("ccfa_id")]
    [ExplicitColumns]
    public partial class contract_custom_field_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccfa_id.
        /// </summary>
        [Column]
        public int ccfa_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_ocf_id.
        /// </summary>
        [Column]
        public int ccfa_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_c_id.
        /// </summary>
        [Column]
        public int ccfa_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_url.
        /// </summary>
        [Column]
        public string ccfa_url { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_name.
        /// </summary>
        [Column]
        public string ccfa_name { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_cn_id.
        /// </summary>
        [Column]
        public int? ccfa_cn_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_add_user.
        /// </summary>
        [Column]
        public string ccfa_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_add_date.
        /// </summary>
        [Column]
        public DateTime ccfa_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_mod_user.
        /// </summary>
        [Column]
        public string ccfa_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ccfa_mod_date.
        /// </summary>
        [Column]
        public DateTime ccfa_mod_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_custom_field_values] table.
    /// </summary>
    [TableName("[dbo].[contract_custom_field_values]")]
    [PrimaryKey("ccfv_id")]
    [ExplicitColumns]
    public partial class contract_custom_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccfv_id.
        /// </summary>
        [Column]
        public int ccfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfv_ocf_id.
        /// </summary>
        [Column]
        public int ccfv_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfv_mll_code.
        /// </summary>
        [Column]
        public string ccfv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the ccfv_c_id.
        /// </summary>
        [Column]
        public int ccfv_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfv_mlcfv_id.
        /// </summary>
        [Column]
        public int? ccfv_mlcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the ccfv_numeric.
        /// </summary>
        [Column]
        public decimal? ccfv_numeric { get; set; }

        /// <summary>
        /// Gets or sets the ccfv_date.
        /// </summary>
        [Column]
        public DateTime? ccfv_date { get; set; }

        /// <summary>
        /// Gets or sets the ccfv_string.
        /// </summary>
        [Column]
        public string ccfv_string { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_email] table.
    /// </summary>
    [TableName("[dbo].[contract_email]")]
    [PrimaryKey("ce_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ce_id.
        /// </summary>
        [Column]
        public int ce_id { get; set; }

        /// <summary>
        /// Gets or sets the ce_c_id.
        /// </summary>
        [Column]
        public int ce_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ce_u_id.
        /// </summary>
        [Column]
        public string ce_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_links] table.
    /// </summary>
    [TableName("[dbo].[contract_links]")]
    [PrimaryKey("cl_id")]
    [ExplicitColumns]
    public partial class contract_linkRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cl_id.
        /// </summary>
        [Column]
        public int cl_id { get; set; }

        /// <summary>
        /// Gets or sets the cl_c_id.
        /// </summary>
        [Column]
        public int cl_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cl_title.
        /// </summary>
        [Column]
        public string cl_title { get; set; }

        /// <summary>
        /// Gets or sets the cl_url.
        /// </summary>
        [Column]
        public string cl_url { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_note] table.
    /// </summary>
    [TableName("[dbo].[contract_note]")]
    [PrimaryKey("cn_id")]
    [ExplicitColumns]
    public partial class contract_noteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cn_id.
        /// </summary>
        [Column]
        public int cn_id { get; set; }

        /// <summary>
        /// Gets or sets the cn_c_id.
        /// </summary>
        [Column]
        public int cn_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cn_cnt_id.
        /// </summary>
        [Column]
        public int cn_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the cn_subject.
        /// </summary>
        [Column]
        public string cn_subject { get; set; }

        /// <summary>
        /// Gets or sets the cn_add_user.
        /// </summary>
        [Column]
        public string cn_add_user { get; set; }

        /// <summary>
        /// Gets or sets the cn_add_date.
        /// </summary>
        [Column]
        public DateTime cn_add_date { get; set; }

        /// <summary>
        /// Gets or sets the cn_mod_user.
        /// </summary>
        [Column]
        public string cn_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the cn_mod_date.
        /// </summary>
        [Column]
        public DateTime cn_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the cn_sort.
        /// </summary>
        [Column]
        public int cn_sort { get; set; }

        /// <summary>
        /// Gets or sets the cn_att_url.
        /// </summary>
        [Column]
        public string cn_att_url { get; set; }

        /// <summary>
        /// Gets or sets the cn_body.
        /// </summary>
        [Column]
        public string cn_body { get; set; }

        /// <summary>
        /// Gets or sets the last_modified.
        /// </summary>
        [Column]
        public DateTime last_modified { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_note_permission] table.
    /// </summary>
    [TableName("[dbo].[contract_note_permission]")]
    [PrimaryKey("cnp_cn_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_note_permissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cnp_cn_id.
        /// </summary>
        [Column]
        public int cnp_cn_id { get; set; }

        /// <summary>
        /// Gets or sets the cnp_u_id.
        /// </summary>
        [Column]
        public int cnp_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_note_type] table.
    /// </summary>
    [TableName("[dbo].[contract_note_type]")]
    [PrimaryKey("cnt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_note_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cnt_id.
        /// </summary>
        [Column]
        public int cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the cnt_name.
        /// </summary>
        [Column]
        public string cnt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_permission] table.
    /// </summary>
    [TableName("[dbo].[contract_permission]")]
    [PrimaryKey("cp_c_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_permissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cp_c_id.
        /// </summary>
        [Column]
        public int cp_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cp_u_id.
        /// </summary>
        [Column]
        public int cp_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Contract_Permission_Set_IDs] table.
    /// </summary>
    [TableName("[dbo].[Contract_Permission_Set_IDs]")]
    [ExplicitColumns]
    public partial class Contract_Permission_Set_IDRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the c_id.
        /// </summary>
        [Column]
        public int c_id { get; set; }

        /// <summary>
        /// Gets or sets the c_o_id.
        /// </summary>
        [Column]
        public int c_o_id { get; set; }

        /// <summary>
        /// Gets or sets the c_e_id.
        /// </summary>
        [Column]
        public int c_e_id { get; set; }

        /// <summary>
        /// Gets or sets the cs_s_id.
        /// </summary>
        [Column]
        public int cs_s_id { get; set; }

        /// <summary>
        /// Gets or sets the c_od_id.
        /// </summary>
        [Column]
        public int c_od_id { get; set; }

        /// <summary>
        /// Gets or sets the c_ot_id.
        /// </summary>
        [Column]
        public int c_ot_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Contract_Permission_Verify_IDs] table.
    /// </summary>
    [TableName("[dbo].[Contract_Permission_Verify_IDs]")]
    [ExplicitColumns]
    public partial class Contract_Permission_Verify_IDRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the c_id.
        /// </summary>
        [Column]
        public int c_id { get; set; }

        /// <summary>
        /// Gets or sets the c_o_id.
        /// </summary>
        [Column]
        public int c_o_id { get; set; }

        /// <summary>
        /// Gets or sets the c_e_id.
        /// </summary>
        [Column]
        public int c_e_id { get; set; }

        /// <summary>
        /// Gets or sets the cs_s_id.
        /// </summary>
        [Column]
        public int cs_s_id { get; set; }

        /// <summary>
        /// Gets or sets the c_od_id.
        /// </summary>
        [Column]
        public int c_od_id { get; set; }

        /// <summary>
        /// Gets or sets the c_ot_id.
        /// </summary>
        [Column]
        public int c_ot_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_rent] table.
    /// </summary>
    [TableName("[dbo].[contract_rent]")]
    [PrimaryKey("cr_id")]
    [ExplicitColumns]
    public partial class contract_rentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cr_id.
        /// </summary>
        [Column]
        public int cr_id { get; set; }

        /// <summary>
        /// Gets or sets the cr_c_id.
        /// </summary>
        [Column]
        public int cr_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cr_space.
        /// </summary>
        [Column]
        public string cr_space { get; set; }

        /// <summary>
        /// Gets or sets the cr_tenant.
        /// </summary>
        [Column]
        public string cr_tenant { get; set; }

        /// <summary>
        /// Gets or sets the cr_date_eff.
        /// </summary>
        [Column]
        public DateTime? cr_date_eff { get; set; }

        /// <summary>
        /// Gets or sets the cr_date_exp.
        /// </summary>
        [Column]
        public DateTime? cr_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the cr_gla_sqf.
        /// </summary>
        [Column]
        public int? cr_gla_sqf { get; set; }

        /// <summary>
        /// Gets or sets the cr_rent_mth.
        /// </summary>
        [Column]
        public decimal? cr_rent_mth { get; set; }

        /// <summary>
        /// Gets or sets the cr_psf_yr.
        /// </summary>
        [Column]
        public decimal? cr_psf_yr { get; set; }

        /// <summary>
        /// Gets or sets the cr_recovery_mth.
        /// </summary>
        [Column]
        public decimal? cr_recovery_mth { get; set; }

        /// <summary>
        /// Gets or sets the cr_rent_mth_currency_code.
        /// </summary>
        [Column]
        public string cr_rent_mth_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the cr_psf_yr_currency_code.
        /// </summary>
        [Column]
        public string cr_psf_yr_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the cr_recovery_mth_currency_code.
        /// </summary>
        [Column]
        public string cr_recovery_mth_currency_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_rent_increase] table.
    /// </summary>
    [TableName("[dbo].[contract_rent_increase]")]
    [PrimaryKey("cri_id")]
    [ExplicitColumns]
    public partial class contract_rent_increaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cri_id.
        /// </summary>
        [Column]
        public int cri_id { get; set; }

        /// <summary>
        /// Gets or sets the cri_cr_id.
        /// </summary>
        [Column]
        public int cri_cr_id { get; set; }

        /// <summary>
        /// Gets or sets the cri_category.
        /// </summary>
        [Column]
        public string cri_category { get; set; }

        /// <summary>
        /// Gets or sets the cri_date.
        /// </summary>
        [Column]
        public DateTime? cri_date { get; set; }

        /// <summary>
        /// Gets or sets the cri_rent_mth.
        /// </summary>
        [Column]
        public decimal? cri_rent_mth { get; set; }

        /// <summary>
        /// Gets or sets the cri_psf_yr.
        /// </summary>
        [Column]
        public decimal? cri_psf_yr { get; set; }

        /// <summary>
        /// Gets or sets the cri_rent_mth_currency_code.
        /// </summary>
        [Column]
        public string cri_rent_mth_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the cri_psf_yr_currency_code.
        /// </summary>
        [Column]
        public string cri_psf_yr_currency_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_site] table.
    /// </summary>
    [TableName("[dbo].[contract_site]")]
    [PrimaryKey("cs_id")]
    [ExplicitColumns]
    public partial class contract_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cs_id.
        /// </summary>
        [Column]
        public int cs_id { get; set; }

        /// <summary>
        /// Gets or sets the cs_c_id.
        /// </summary>
        [Column]
        public int cs_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cs_s_id.
        /// </summary>
        [Column]
        public int cs_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_sop] table.
    /// </summary>
    [TableName("[dbo].[contract_sop]")]
    [PrimaryKey("csop_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_sopRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the csop_id.
        /// </summary>
        [Column]
        public int csop_id { get; set; }

        /// <summary>
        /// Gets or sets the csop_c_id.
        /// </summary>
        [Column]
        public int csop_c_id { get; set; }

        /// <summary>
        /// Gets or sets the csop_v_id.
        /// </summary>
        [Column]
        public int csop_v_id { get; set; }

        /// <summary>
        /// Gets or sets the csop_vt_id.
        /// </summary>
        [Column]
        public int csop_vt_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_triggers] table.
    /// </summary>
    [TableName("[dbo].[contract_triggers]")]
    [PrimaryKey("cnt_c_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_triggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cnt_c_id.
        /// </summary>
        [Column]
        public int cnt_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cnt_nt_id.
        /// </summary>
        [Column]
        public int cnt_nt_id { get; set; }

        /// <summary>
        /// Gets or sets the cnt_active_date.
        /// </summary>
        [Column]
        public DateTime? cnt_active_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[contract_type] table.
    /// </summary>
    [TableName("[dbo].[contract_type]")]
    [PrimaryKey("t_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class contract_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the t_id.
        /// </summary>
        [Column]
        public int t_id { get; set; }

        /// <summary>
        /// Gets or sets the t_name.
        /// </summary>
        [Column]
        public string t_name { get; set; }

        /// <summary>
        /// Gets or sets the t_revenue.
        /// </summary>
        [Column]
        public bool t_revenue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ContractTypeCategory] table.
    /// </summary>
    [TableName("[dbo].[ContractTypeCategory]")]
    [PrimaryKey("t_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ContractTypeCategoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the t_id.
        /// </summary>
        [Column]
        public int t_id { get; set; }

        /// <summary>
        /// Gets or sets the CategoryID.
        /// </summary>
        [Column]
        public int CategoryID { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ConversationMessage] table.
    /// </summary>
    [TableName("[dbo].[ConversationMessage]")]
    [PrimaryKey("ConversationMessageId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ConversationMessageRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ConversationMessageId.
        /// </summary>
        [Column]
        public long ConversationMessageId { get; set; }

        /// <summary>
        /// Gets or sets the TrackedConversationId.
        /// </summary>
        [Column]
        public long TrackedConversationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[country] table.
    /// </summary>
    [TableName("[dbo].[country]")]
    [PrimaryKey("cty_id")]
    [ExplicitColumns]
    public partial class countryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cty_id.
        /// </summary>
        [Column]
        public int cty_id { get; set; }

        /// <summary>
        /// Gets or sets the cty_name.
        /// </summary>
        [Column]
        public string cty_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[critical_date_email_schedule] table.
    /// </summary>
    [TableName("[dbo].[critical_date_email_schedule]")]
    [PrimaryKey("cdes_id")]
    [ExplicitColumns]
    public partial class critical_date_email_scheduleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cdes_id.
        /// </summary>
        [Column]
        public int cdes_id { get; set; }

        /// <summary>
        /// Gets or sets the cdes_name.
        /// </summary>
        [Column]
        public string cdes_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[critical_date_email_schedule_trigger] table.
    /// </summary>
    [TableName("[dbo].[critical_date_email_schedule_trigger]")]
    [PrimaryKey("cdest_id")]
    [ExplicitColumns]
    public partial class critical_date_email_schedule_triggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cdest_id.
        /// </summary>
        [Column]
        public int cdest_id { get; set; }

        /// <summary>
        /// Gets or sets the cdest_cdes_id.
        /// </summary>
        [Column]
        public int cdest_cdes_id { get; set; }

        /// <summary>
        /// Gets or sets the cdest_day.
        /// </summary>
        [Column]
        public int cdest_day { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[CriticalDateAlert] table.
    /// </summary>
    [TableName("[dbo].[CriticalDateAlert]")]
    [PrimaryKey("CriticalDateAlertId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CriticalDateAlertRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CriticalDateAlertId.
        /// </summary>
        [Column]
        public long CriticalDateAlertId { get; set; }

        /// <summary>
        /// Gets or sets the CriticalDateId.
        /// </summary>
        [Column]
        public int CriticalDateId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[currency_exchange_rate_descriptions] table.
    /// </summary>
    [TableName("[dbo].[currency_exchange_rate_descriptions]")]
    [PrimaryKey("cerd_id")]
    [ExplicitColumns]
    public partial class currency_exchange_rate_descriptionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cerd_id.
        /// </summary>
        [Column]
        public int cerd_id { get; set; }

        /// <summary>
        /// Gets or sets the cerd_code.
        /// </summary>
        [Column]
        public string cerd_code { get; set; }

        /// <summary>
        /// Gets or sets the cerd_description.
        /// </summary>
        [Column]
        public string cerd_description { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[currency_format] table.
    /// </summary>
    [TableName("[dbo].[currency_format]")]
    [PrimaryKey("cf_id")]
    [ExplicitColumns]
    public partial class currency_formatRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cf_id.
        /// </summary>
        [Column]
        public int cf_id { get; set; }

        /// <summary>
        /// Gets or sets the cf_currency_code.
        /// </summary>
        [Column]
        public string cf_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the cf_culture_info.
        /// </summary>
        [Column]
        public string cf_culture_info { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field] table.
    /// </summary>
    [TableName("[dbo].[custom_field]")]
    [PrimaryKey("cf_id")]
    [ExplicitColumns]
    public partial class custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cf_id.
        /// </summary>
        [Column]
        public int cf_id { get; set; }

        /// <summary>
        /// Gets or sets the cf_sort.
        /// </summary>
        [Column]
        public int cf_sort { get; set; }

        /// <summary>
        /// Gets or sets the cf_data_type.
        /// </summary>
        [Column]
        public int cf_data_type { get; set; }

        /// <summary>
        /// Gets or sets the cf_rows_no.
        /// </summary>
        [Column]
        public int? cf_rows_no { get; set; }

        /// <summary>
        /// Gets or sets the cf_field_type.
        /// </summary>
        [Column]
        public int cf_field_type { get; set; }

        /// <summary>
        /// Gets or sets the cf_calculable.
        /// </summary>
        [Column]
        public bool cf_calculable { get; set; }

        /// <summary>
        /// Gets or sets the cf_system_fields_src.
        /// </summary>
        [Column]
        public int cf_system_fields_src { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field_attachment_category] table.
    /// </summary>
    [TableName("[dbo].[custom_field_attachment_category]")]
    [PrimaryKey("cfac_id")]
    [ExplicitColumns]
    public partial class custom_field_attachment_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cfac_id.
        /// </summary>
        [Column]
        public int cfac_id { get; set; }

        /// <summary>
        /// Gets or sets the cfac_cf_id.
        /// </summary>
        [Column]
        public int cfac_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the cfac_o_id.
        /// </summary>
        [Column]
        public int cfac_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cfac_cnt_id.
        /// </summary>
        [Column]
        public int? cfac_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the cfac_ccdat_id.
        /// </summary>
        [Column]
        public int? cfac_ccdat_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field_columns] table.
    /// </summary>
    [TableName("[dbo].[custom_field_columns]")]
    [PrimaryKey("cfc_id")]
    [ExplicitColumns]
    public partial class custom_field_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cfc_id.
        /// </summary>
        [Column]
        public int cfc_id { get; set; }

        /// <summary>
        /// Gets or sets the cfc_cft_id.
        /// </summary>
        [Column]
        public int cfc_cft_id { get; set; }

        /// <summary>
        /// Gets or sets the cfc_cfs_id.
        /// </summary>
        [Column]
        public int? cfc_cfs_id { get; set; }

        /// <summary>
        /// Gets or sets the cfc_sort.
        /// </summary>
        [Column]
        public int cfc_sort { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field_formula] table.
    /// </summary>
    [TableName("[dbo].[custom_field_formula]")]
    [PrimaryKey("cff_id")]
    [ExplicitColumns]
    public partial class custom_field_formulaRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cff_id.
        /// </summary>
        [Column]
        public int cff_id { get; set; }

        /// <summary>
        /// Gets or sets the cff_cf_id.
        /// </summary>
        [Column]
        public int cff_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the cff_index.
        /// </summary>
        [Column]
        public int cff_index { get; set; }

        /// <summary>
        /// Gets or sets the cff_group.
        /// </summary>
        [Column]
        public int? cff_group { get; set; }

        /// <summary>
        /// Gets or sets the cff_field_id.
        /// </summary>
        [Column]
        public int? cff_field_id { get; set; }

        /// <summary>
        /// Gets or sets the cff_operator.
        /// </summary>
        [Column]
        public string cff_operator { get; set; }

        /// <summary>
        /// Gets or sets the cff_field_value.
        /// </summary>
        [Column]
        public string cff_field_value { get; set; }

        /// <summary>
        /// Gets or sets the cff_field_type.
        /// </summary>
        [Column]
        public short cff_field_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field_formula_result_storage] table.
    /// </summary>
    [TableName("[dbo].[custom_field_formula_result_storage]")]
    [ExplicitColumns]
    public partial class custom_field_formula_result_storageRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cffrs_id.
        /// </summary>
        [Column]
        public int cffrs_id { get; set; }

        /// <summary>
        /// Gets or sets the cffrs_c_id.
        /// </summary>
        [Column]
        public int? cffrs_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cffrs_ccd_id.
        /// </summary>
        [Column]
        public int? cffrs_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the cffrs_ocf_id.
        /// </summary>
        [Column]
        public int cffrs_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the cffrs_value.
        /// </summary>
        [Column]
        public string cffrs_value { get; set; }

        /// <summary>
        /// Gets or sets the cffrs_data_type.
        /// </summary>
        [Column]
        public int cffrs_data_type { get; set; }

        /// <summary>
        /// Gets or sets the cffrs_mll_code.
        /// </summary>
        [Column]
        public string cffrs_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field_organizations] table.
    /// </summary>
    [TableName("[dbo].[custom_field_organizations]")]
    [PrimaryKey("cfo_cf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class custom_field_organizationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cfo_cf_id.
        /// </summary>
        [Column]
        public int cfo_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the cfo_o_id.
        /// </summary>
        [Column]
        public int cfo_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field_parameter] table.
    /// </summary>
    [TableName("[dbo].[custom_field_parameter]")]
    [PrimaryKey("cfp_id")]
    [ExplicitColumns]
    public partial class custom_field_parameterRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cfp_id.
        /// </summary>
        [Column]
        public int cfp_id { get; set; }

        /// <summary>
        /// Gets or sets the cfp_cf_id.
        /// </summary>
        [Column]
        public int cfp_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the cfp_o_id.
        /// </summary>
        [Column]
        public int? cfp_o_id { get; set; }

        /// <summary>
        /// Gets or sets the cfp_index.
        /// </summary>
        [Column]
        public int cfp_index { get; set; }

        /// <summary>
        /// Gets or sets the cfp_left_operator.
        /// </summary>
        [Column]
        public string cfp_left_operator { get; set; }

        /// <summary>
        /// Gets or sets the cfp_right_operator.
        /// </summary>
        [Column]
        public string cfp_right_operator { get; set; }

        /// <summary>
        /// Gets or sets the cfp_left_value.
        /// </summary>
        [Column]
        public string cfp_left_value { get; set; }

        /// <summary>
        /// Gets or sets the cfp_right_value.
        /// </summary>
        [Column]
        public string cfp_right_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field_sections] table.
    /// </summary>
    [TableName("[dbo].[custom_field_sections]")]
    [PrimaryKey("cfs_id")]
    [ExplicitColumns]
    public partial class custom_field_sectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cfs_id.
        /// </summary>
        [Column]
        public int cfs_id { get; set; }

        /// <summary>
        /// Gets or sets the cfs_cft_id.
        /// </summary>
        [Column]
        public int cfs_cft_id { get; set; }

        /// <summary>
        /// Gets or sets the cfs_cfc_id.
        /// </summary>
        [Column]
        public int? cfs_cfc_id { get; set; }

        /// <summary>
        /// Gets or sets the cfs_sort.
        /// </summary>
        [Column]
        public int cfs_sort { get; set; }

        /// <summary>
        /// Gets or sets the cfs_show_header.
        /// </summary>
        [Column]
        public bool cfs_show_header { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_field_tabs] table.
    /// </summary>
    [TableName("[dbo].[custom_field_tabs]")]
    [PrimaryKey("cft_id")]
    [ExplicitColumns]
    public partial class custom_field_tabRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cft_id.
        /// </summary>
        [Column]
        public int cft_id { get; set; }

        /// <summary>
        /// Gets or sets the cft_sort.
        /// </summary>
        [Column]
        public int cft_sort { get; set; }

        /// <summary>
        /// Gets or sets the cft_ot_id.
        /// </summary>
        [Column]
        public int? cft_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the cft_ccrf_id.
        /// </summary>
        [Column]
        public int? cft_ccrf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[custom_fields_value_store] table.
    /// </summary>
    [TableName("[dbo].[custom_fields_value_store]")]
    [ExplicitColumns]
    public partial class custom_fields_value_storeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cfvs_session_id.
        /// </summary>
        [Column]
        public Guid cfvs_session_id { get; set; }

        /// <summary>
        /// Gets or sets the cfvs_cf_id.
        /// </summary>
        [Column]
        public int cfvs_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the cfvs_c_id.
        /// </summary>
        [Column]
        public int cfvs_c_id { get; set; }

        /// <summary>
        /// Gets or sets the cfvs_ccd_id.
        /// </summary>
        [Column]
        public int cfvs_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the cfvs_value.
        /// </summary>
        [Column]
        public string cfvs_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[daily_users] table.
    /// </summary>
    [TableName("[dbo].[daily_users]")]
    [ExplicitColumns]
    public partial class daily_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the du_id.
        /// </summary>
        [Column]
        public int du_id { get; set; }

        /// <summary>
        /// Gets or sets the du_u_id.
        /// </summary>
        [Column]
        public int du_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[dashboard_master_setting] table.
    /// </summary>
    [TableName("[dbo].[dashboard_master_setting]")]
    [PrimaryKey("dms_id")]
    [ExplicitColumns]
    public partial class dashboard_master_settingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the dms_id.
        /// </summary>
        [Column]
        public int dms_id { get; set; }

        /// <summary>
        /// Gets or sets the dms_dwt_id.
        /// </summary>
        [Column]
        public int dms_dwt_id { get; set; }

        /// <summary>
        /// Gets or sets the dms_widget_visible.
        /// </summary>
        [Column]
        public bool dms_widget_visible { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[dashboard_report_setting] table.
    /// </summary>
    [TableName("[dbo].[dashboard_report_setting]")]
    [PrimaryKey("drs_id")]
    [ExplicitColumns]
    public partial class dashboard_report_settingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the drs_id.
        /// </summary>
        [Column]
        public int drs_id { get; set; }

        /// <summary>
        /// Gets or sets the drs_rpt_id.
        /// </summary>
        [Column]
        public int drs_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the drs_app_id.
        /// </summary>
        [Column]
        public int drs_app_id { get; set; }

        /// <summary>
        /// Gets or sets the drs_sort.
        /// </summary>
        [Column]
        public int drs_sort { get; set; }

        /// <summary>
        /// Gets or sets the drs_visible.
        /// </summary>
        [Column]
        public bool drs_visible { get; set; }

        /// <summary>
        /// Gets or sets the drs_executable.
        /// </summary>
        [Column]
        public bool drs_executable { get; set; }

        /// <summary>
        /// Gets or sets the drs_image_id.
        /// </summary>
        [Column]
        public int? drs_image_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[dashboard_widget_type] table.
    /// </summary>
    [TableName("[dbo].[dashboard_widget_type]")]
    [PrimaryKey("dwt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class dashboard_widget_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the dwt_id.
        /// </summary>
        [Column]
        public int dwt_id { get; set; }

        /// <summary>
        /// Gets or sets the dwt_title.
        /// </summary>
        [Column]
        public string dwt_title { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DataIntegrationAttributeMap] table.
    /// </summary>
    [TableName("[dbo].[DataIntegrationAttributeMap]")]
    [PrimaryKey("DataIntegrationAttributeMapId")]
    [ExplicitColumns]
    public partial class DataIntegrationAttributeMapRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DataIntegrationAttributeMapId.
        /// </summary>
        [Column]
        public int DataIntegrationAttributeMapId { get; set; }

        /// <summary>
        /// Gets or sets the DataIntegrationTypeId.
        /// </summary>
        [Column]
        public int DataIntegrationTypeId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalAttribute.
        /// </summary>
        [Column]
        public string ExternalAttribute { get; set; }

        /// <summary>
        /// Gets or sets the InternalType.
        /// </summary>
        [Column]
        public string InternalType { get; set; }

        /// <summary>
        /// Gets or sets the InternalProperty.
        /// </summary>
        [Column]
        public string InternalProperty { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DataIntegrationType] table.
    /// </summary>
    [TableName("[dbo].[DataIntegrationType]")]
    [PrimaryKey("DataIntegrationTypeId")]
    [ExplicitColumns]
    public partial class DataIntegrationTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DataIntegrationTypeId.
        /// </summary>
        [Column]
        public int DataIntegrationTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[department] table.
    /// </summary>
    [TableName("[dbo].[department]")]
    [PrimaryKey("d_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class departmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the d_id.
        /// </summary>
        [Column]
        public int d_id { get; set; }

        /// <summary>
        /// Gets or sets the d_name.
        /// </summary>
        [Column]
        public string d_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DistributionGroup] table.
    /// </summary>
    [TableName("[dbo].[DistributionGroup]")]
    [PrimaryKey("DistributionGroupId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DistributionGroupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DistributionGroupId.
        /// </summary>
        [Column]
        public long DistributionGroupId { get; set; }

        /// <summary>
        /// Gets or sets the GroupId.
        /// </summary>
        [Column]
        public int GroupId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DistributionOrganizationRole] table.
    /// </summary>
    [TableName("[dbo].[DistributionOrganizationRole]")]
    [PrimaryKey("OrganizationRoleTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DistributionOrganizationRoleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the OrganizationRoleTypeId.
        /// </summary>
        [Column]
        public int OrganizationRoleTypeId { get; set; }

        /// <summary>
        /// Gets or sets the DistributionRecipientId.
        /// </summary>
        [Column]
        public long DistributionRecipientId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DistributionPerson] table.
    /// </summary>
    [TableName("[dbo].[DistributionPerson]")]
    [PrimaryKey("DistributionPersonId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DistributionPersonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DistributionPersonId.
        /// </summary>
        [Column]
        public long DistributionPersonId { get; set; }

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DistributionPrivacyLevel] table.
    /// </summary>
    [TableName("[dbo].[DistributionPrivacyLevel]")]
    [PrimaryKey("DistributionPrivacyLevelId")]
    [ExplicitColumns]
    public partial class DistributionPrivacyLevelRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DistributionPrivacyLevelId.
        /// </summary>
        [Column]
        public int DistributionPrivacyLevelId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DistributionRecipient] table.
    /// </summary>
    [TableName("[dbo].[DistributionRecipient]")]
    [PrimaryKey("DistributionRecipientId")]
    [ExplicitColumns]
    public partial class DistributionRecipientRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DistributionRecipientId.
        /// </summary>
        [Column]
        public long DistributionRecipientId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionId.
        /// </summary>
        [Column]
        public int MessageDistributionId { get; set; }

        /// <summary>
        /// Gets or sets the DistributionPrivacyLevelId.
        /// </summary>
        [Column]
        public int DistributionPrivacyLevelId { get; set; }

        /// <summary>
        /// Gets or sets the SuppressNotifications.
        /// </summary>
        [Column]
        public bool SuppressNotifications { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Document] table.
    /// </summary>
    [TableName("[dbo].[Document]")]
    [PrimaryKey("DocumentId")]
    [ExplicitColumns]
    public partial class DocumentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentId.
        /// </summary>
        [Column]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or sets the Identifier.
        /// </summary>
        [Column]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[document_custom_field_attachment] table.
    /// </summary>
    [TableName("[dbo].[document_custom_field_attachment]")]
    [PrimaryKey("dcfa_id")]
    [ExplicitColumns]
    public partial class document_custom_field_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the dcfa_id.
        /// </summary>
        [Column]
        public int dcfa_id { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_ocf_id.
        /// </summary>
        [Column]
        public int dcfa_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_ccd_id.
        /// </summary>
        [Column]
        public int dcfa_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_url.
        /// </summary>
        [Column]
        public string dcfa_url { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_name.
        /// </summary>
        [Column]
        public string dcfa_name { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_ccda_id.
        /// </summary>
        [Column]
        public int? dcfa_ccda_id { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_add_user.
        /// </summary>
        [Column]
        public string dcfa_add_user { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_add_date.
        /// </summary>
        [Column]
        public DateTime dcfa_add_date { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_mod_user.
        /// </summary>
        [Column]
        public string dcfa_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the dcfa_mod_date.
        /// </summary>
        [Column]
        public DateTime dcfa_mod_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[document_custom_field_values] table.
    /// </summary>
    [TableName("[dbo].[document_custom_field_values]")]
    [PrimaryKey("dcfv_id")]
    [ExplicitColumns]
    public partial class document_custom_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the dcfv_id.
        /// </summary>
        [Column]
        public int dcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the dcfv_ocf_id.
        /// </summary>
        [Column]
        public int dcfv_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the dcfv_mll_code.
        /// </summary>
        [Column]
        public string dcfv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the dcfv_ccd_id.
        /// </summary>
        [Column]
        public int dcfv_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the dcfv_mlcfv_id.
        /// </summary>
        [Column]
        public int? dcfv_mlcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the dcfv_numeric.
        /// </summary>
        [Column]
        public decimal? dcfv_numeric { get; set; }

        /// <summary>
        /// Gets or sets the dcfv_date.
        /// </summary>
        [Column]
        public DateTime? dcfv_date { get; set; }

        /// <summary>
        /// Gets or sets the dcfv_string.
        /// </summary>
        [Column]
        public string dcfv_string { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[document_lock] table.
    /// </summary>
    [TableName("[dbo].[document_lock]")]
    [PrimaryKey("dl_id")]
    [ExplicitColumns]
    public partial class document_lockRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the dl_id.
        /// </summary>
        [Column]
        public int dl_id { get; set; }

        /// <summary>
        /// Gets or sets the dl_u_id.
        /// </summary>
        [Column]
        public int dl_u_id { get; set; }

        /// <summary>
        /// Gets or sets the dl_lock_acquired.
        /// </summary>
        [Column]
        public DateTime dl_lock_acquired { get; set; }

        /// <summary>
        /// Gets or sets the dl_doc_type.
        /// </summary>
        [Column]
        public int dl_doc_type { get; set; }

        /// <summary>
        /// Gets or sets the dl_file_name.
        /// </summary>
        [Column]
        public string dl_file_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[document_triggers] table.
    /// </summary>
    [TableName("[dbo].[document_triggers]")]
    [PrimaryKey("dnt_ccd_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class document_triggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the dnt_ccd_id.
        /// </summary>
        [Column]
        public int dnt_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the dnt_nt_id.
        /// </summary>
        [Column]
        public int dnt_nt_id { get; set; }

        /// <summary>
        /// Gets or sets the dnt_active_date.
        /// </summary>
        [Column]
        public DateTime? dnt_active_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[document_word_set] table.
    /// </summary>
    [TableName("[dbo].[document_word_set]")]
    [PrimaryKey("dws_id")]
    [ExplicitColumns]
    public partial class document_word_setRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the dws_id.
        /// </summary>
        [Column]
        public long dws_id { get; set; }

        /// <summary>
        /// Gets or sets the dws_c_id.
        /// </summary>
        [Column]
        public int dws_c_id { get; set; }

        /// <summary>
        /// Gets or sets the dws_document_type.
        /// </summary>
        [Column]
        public string dws_document_type { get; set; }

        /// <summary>
        /// Gets or sets the dws_document_url.
        /// </summary>
        [Column]
        public string dws_document_url { get; set; }

        /// <summary>
        /// Gets or sets the dws_word_set.
        /// </summary>
        [Column]
        public string dws_word_set { get; set; }

        /// <summary>
        /// Gets or sets the dws_source_modififed.
        /// </summary>
        [Column]
        public DateTimeOffset dws_source_modififed { get; set; }

        /// <summary>
        /// Gets or sets the dws_rowversion.
        /// </summary>
        [Column]
        public byte[] dws_rowversion { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DocumentTerm] table.
    /// </summary>
    [TableName("[dbo].[DocumentTerm]")]
    [PrimaryKey("DocumentTermId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DocumentTermRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentTermId.
        /// </summary>
        [Column]
        public int DocumentTermId { get; set; }

        /// <summary>
        /// Gets or sets the EffectiveDate.
        /// </summary>
        [Column]
        public DateTime EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets the ExpirationDate.
        /// </summary>
        [Column]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DocumentType] table.
    /// </summary>
    [TableName("[dbo].[DocumentType]")]
    [PrimaryKey("DocumentTypeId")]
    [ExplicitColumns]
    public partial class DocumentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentTypeId.
        /// </summary>
        [Column]
        public int DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the IsSystemType.
        /// </summary>
        [Column]
        public bool IsSystemType { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[DocumentVersion] table.
    /// </summary>
    [TableName("[dbo].[DocumentVersion]")]
    [PrimaryKey("DocumentVersionId")]
    [ExplicitColumns]
    public partial class DocumentVersionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentVersionId.
        /// </summary>
        [Column]
        public long DocumentVersionId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentId.
        /// </summary>
        [Column]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or sets the VersionNumber.
        /// </summary>
        [Column]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[email_merge_symbols] table.
    /// </summary>
    [TableName("[dbo].[email_merge_symbols]")]
    [ExplicitColumns]
    public partial class email_merge_symbolRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ems_product_id.
        /// </summary>
        [Column]
        public int ems_product_id { get; set; }

        /// <summary>
        /// Gets or sets the ems_merge_symbol.
        /// </summary>
        [Column]
        public string ems_merge_symbol { get; set; }

        /// <summary>
        /// Gets or sets the ems_data_field.
        /// </summary>
        [Column]
        public string ems_data_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[email_series] table.
    /// </summary>
    [TableName("[dbo].[email_series]")]
    [PrimaryKey("es_id")]
    [ExplicitColumns]
    public partial class email_seriesRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the es_id.
        /// </summary>
        [Column]
        public int es_id { get; set; }

        /// <summary>
        /// Gets or sets the es_series_id.
        /// </summary>
        [Column]
        public int es_series_id { get; set; }

        /// <summary>
        /// Gets or sets the es_product_id.
        /// </summary>
        [Column]
        public int es_product_id { get; set; }

        /// <summary>
        /// Gets or sets the es_name.
        /// </summary>
        [Column]
        public string es_name { get; set; }

        /// <summary>
        /// Gets or sets the es_from.
        /// </summary>
        [Column]
        public string es_from { get; set; }

        /// <summary>
        /// Gets or sets the es_subject.
        /// </summary>
        [Column]
        public string es_subject { get; set; }

        /// <summary>
        /// Gets or sets the es_body_header.
        /// </summary>
        [Column]
        public string es_body_header { get; set; }

        /// <summary>
        /// Gets or sets the es_body_contract.
        /// </summary>
        [Column]
        public string es_body_contract { get; set; }

        /// <summary>
        /// Gets or sets the es_body_count.
        /// </summary>
        [Column]
        public string es_body_count { get; set; }

        /// <summary>
        /// Gets or sets the es_body_footer.
        /// </summary>
        [Column]
        public string es_body_footer { get; set; }

        /// <summary>
        /// Gets or sets the es_email_interval.
        /// </summary>
        [Column]
        public int? es_email_interval { get; set; }

        /// <summary>
        /// Gets or sets the es_language_code.
        /// </summary>
        [Column]
        public string es_language_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[EmailNotification] table.
    /// </summary>
    [TableName("[dbo].[EmailNotification]")]
    [PrimaryKey("EmailNotificationId")]
    [ExplicitColumns]
    public partial class EmailNotificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the Body.
        /// </summary>
        [Column]
        public string Body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[EmailNotificationDistribution] table.
    /// </summary>
    [TableName("[dbo].[EmailNotificationDistribution]")]
    [PrimaryKey("EmailNotificationDistributionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class EmailNotificationDistributionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EmailNotificationDistributionId.
        /// </summary>
        [Column]
        public int EmailNotificationDistributionId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionId.
        /// </summary>
        [Column]
        public int MessageDistributionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[EmailNotificationPerson] table.
    /// </summary>
    [TableName("[dbo].[EmailNotificationPerson]")]
    [PrimaryKey("EmailNotificationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class EmailNotificationPersonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[EmailNotificationRole] table.
    /// </summary>
    [TableName("[dbo].[EmailNotificationRole]")]
    [PrimaryKey("EmailNotificationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class EmailNotificationRoleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationRoleTypeId.
        /// </summary>
        [Column]
        public int OrganizationRoleTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[EmployeeStatus] table.
    /// </summary>
    [TableName("[dbo].[EmployeeStatus]")]
    [PrimaryKey("EmployeeStatusId")]
    [ExplicitColumns]
    public partial class EmployeeStatusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EmployeeStatusId.
        /// </summary>
        [Column]
        public int EmployeeStatusId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the IsDefault.
        /// </summary>
        [Column]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or sets the IsTermination.
        /// </summary>
        [Column]
        public bool IsTermination { get; set; }

        /// <summary>
        /// Gets or sets the IsArchived.
        /// </summary>
        [Column]
        public bool IsArchived { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[error_log] table.
    /// </summary>
    [TableName("[dbo].[error_log]")]
    [ExplicitColumns]
    public partial class error_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the errl_id.
        /// </summary>
        [Column]
        public int errl_id { get; set; }

        /// <summary>
        /// Gets or sets the errl_u_id.
        /// </summary>
        [Column]
        public int errl_u_id { get; set; }

        /// <summary>
        /// Gets or sets the errl_up_id.
        /// </summary>
        [Column]
        public int errl_up_id { get; set; }

        /// <summary>
        /// Gets or sets the errl_error.
        /// </summary>
        [Column]
        public string errl_error { get; set; }

        /// <summary>
        /// Gets or sets the errl_timestamp.
        /// </summary>
        [Column]
        public DateTime errl_timestamp { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[event] table.
    /// </summary>
    [TableName("[dbo].[event]")]
    [PrimaryKey("e_id")]
    [ExplicitColumns]
    public partial class @eventRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the e_id.
        /// </summary>
        [Column]
        public int e_id { get; set; }

        /// <summary>
        /// Gets or sets the e_timestamp.
        /// </summary>
        [Column]
        public DateTime e_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the e_ec_id.
        /// </summary>
        [Column]
        public int e_ec_id { get; set; }

        /// <summary>
        /// Gets or sets the e_object.
        /// </summary>
        [Column]
        public string e_object { get; set; }

        /// <summary>
        /// Gets or sets the e_object_id.
        /// </summary>
        [Column]
        public int e_object_id { get; set; }

        /// <summary>
        /// Gets or sets the e_username.
        /// </summary>
        [Column]
        public string e_username { get; set; }

        /// <summary>
        /// Gets or sets the e_audit.
        /// </summary>
        [Column]
        public string e_audit { get; set; }

        /// <summary>
        /// Gets or sets the e_app_name.
        /// </summary>
        [Column]
        public string e_app_name { get; set; }

        /// <summary>
        /// Gets or sets the e_parent_object_id.
        /// </summary>
        [Column]
        public string e_parent_object_id { get; set; }

        /// <summary>
        /// Gets or sets the e_original_username.
        /// </summary>
        [Column]
        public string e_original_username { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[event_category] table.
    /// </summary>
    [TableName("[dbo].[event_category]")]
    [PrimaryKey("ec_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class event_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ec_id.
        /// </summary>
        [Column]
        public int ec_id { get; set; }

        /// <summary>
        /// Gets or sets the ec_name.
        /// </summary>
        [Column]
        public string ec_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[event_log] table.
    /// </summary>
    [TableName("[dbo].[event_log]")]
    [PrimaryKey("el_id")]
    [ExplicitColumns]
    public partial class event_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the el_id.
        /// </summary>
        [Column]
        public int el_id { get; set; }

        /// <summary>
        /// Gets or sets the el_ela_id.
        /// </summary>
        [Column]
        public int el_ela_id { get; set; }

        /// <summary>
        /// Gets or sets the el_timestamp.
        /// </summary>
        [Column]
        public DateTime el_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the el_username.
        /// </summary>
        [Column]
        public string el_username { get; set; }

        /// <summary>
        /// Gets or sets the el_cname.
        /// </summary>
        [Column]
        public string el_cname { get; set; }

        /// <summary>
        /// Gets or sets the el_before.
        /// </summary>
        [Column]
        public string el_before { get; set; }

        /// <summary>
        /// Gets or sets the el_after.
        /// </summary>
        [Column]
        public string el_after { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[event_log_action] table.
    /// </summary>
    [TableName("[dbo].[event_log_action]")]
    [PrimaryKey("ela_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class event_log_actionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ela_id.
        /// </summary>
        [Column]
        public int ela_id { get; set; }

        /// <summary>
        /// Gets or sets the ela_name.
        /// </summary>
        [Column]
        public string ela_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[exception_log] table.
    /// </summary>
    [TableName("[dbo].[exception_log]")]
    [PrimaryKey("el_id")]
    [ExplicitColumns]
    public partial class exception_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the el_id.
        /// </summary>
        [Column]
        public int el_id { get; set; }

        /// <summary>
        /// Gets or sets the el_type.
        /// </summary>
        [Column]
        public short el_type { get; set; }

        /// <summary>
        /// Gets or sets the el_db_id.
        /// </summary>
        [Column]
        public int el_db_id { get; set; }

        /// <summary>
        /// Gets or sets the el_db_name.
        /// </summary>
        [Column]
        public string el_db_name { get; set; }

        /// <summary>
        /// Gets or sets the el_o_id.
        /// </summary>
        [Column]
        public int el_o_id { get; set; }

        /// <summary>
        /// Gets or sets the el_o_name.
        /// </summary>
        [Column]
        public string el_o_name { get; set; }

        /// <summary>
        /// Gets or sets the el_timestamp.
        /// </summary>
        [Column]
        public DateTime el_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the el_current_u_id.
        /// </summary>
        [Column]
        public int el_current_u_id { get; set; }

        /// <summary>
        /// Gets or sets the el_current_u_account.
        /// </summary>
        [Column]
        public string el_current_u_account { get; set; }

        /// <summary>
        /// Gets or sets the el_original_u_id.
        /// </summary>
        [Column]
        public int el_original_u_id { get; set; }

        /// <summary>
        /// Gets or sets the el_original_u_account.
        /// </summary>
        [Column]
        public string el_original_u_account { get; set; }

        /// <summary>
        /// Gets or sets the el_exception_message.
        /// </summary>
        [Column]
        public string el_exception_message { get; set; }

        /// <summary>
        /// Gets or sets the el_exception_source.
        /// </summary>
        [Column]
        public string el_exception_source { get; set; }

        /// <summary>
        /// Gets or sets the el_exception_stack_trace.
        /// </summary>
        [Column]
        public string el_exception_stack_trace { get; set; }

        /// <summary>
        /// Gets or sets the el_method_name.
        /// </summary>
        [Column]
        public string el_method_name { get; set; }

        /// <summary>
        /// Gets or sets the el_url.
        /// </summary>
        [Column]
        public string el_url { get; set; }

        /// <summary>
        /// Gets or sets the el_query_string.
        /// </summary>
        [Column]
        public string el_query_string { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[executive_communication] table.
    /// </summary>
    [TableName("[dbo].[executive_communication]")]
    [PrimaryKey("ec_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class executive_communicationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ec_id.
        /// </summary>
        [Column]
        public int ec_id { get; set; }

        /// <summary>
        /// Gets or sets the ec_add_date.
        /// </summary>
        [Column]
        public DateTime ec_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ec_add_user.
        /// </summary>
        [Column]
        public string ec_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ec_mod_date.
        /// </summary>
        [Column]
        public DateTime ec_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the ec_mod_user.
        /// </summary>
        [Column]
        public string ec_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ec_admin.
        /// </summary>
        [Column]
        public bool ec_admin { get; set; }

        /// <summary>
        /// Gets or sets the ec_subject.
        /// </summary>
        [Column]
        public string ec_subject { get; set; }

        /// <summary>
        /// Gets or sets the ec_body.
        /// </summary>
        [Column]
        public string ec_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[executive_documents] table.
    /// </summary>
    [TableName("[dbo].[executive_documents]")]
    [PrimaryKey("ed_id")]
    [ExplicitColumns]
    public partial class executive_documentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ed_id.
        /// </summary>
        [Column]
        public int ed_id { get; set; }

        /// <summary>
        /// Gets or sets the ed_o_id.
        /// </summary>
        [Column]
        public int ed_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ed_u_id.
        /// </summary>
        [Column]
        public int ed_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ed_ed_id.
        /// </summary>
        [Column]
        public int? ed_ed_id { get; set; }

        /// <summary>
        /// Gets or sets the ed_type.
        /// </summary>
        [Column]
        public int ed_type { get; set; }

        /// <summary>
        /// Gets or sets the ed_name.
        /// </summary>
        [Column]
        public string ed_name { get; set; }

        /// <summary>
        /// Gets or sets the ed_file_name.
        /// </summary>
        [Column]
        public string ed_file_name { get; set; }

        /// <summary>
        /// Gets or sets the ed_description.
        /// </summary>
        [Column]
        public string ed_description { get; set; }

        /// <summary>
        /// Gets or sets the ed_public.
        /// </summary>
        [Column]
        public bool ed_public { get; set; }

        /// <summary>
        /// Gets or sets the ed_created_date.
        /// </summary>
        [Column]
        public DateTime ed_created_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[executive_documents_users] table.
    /// </summary>
    [TableName("[dbo].[executive_documents_users]")]
    [PrimaryKey("edu_ed_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class executive_documents_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the edu_ed_id.
        /// </summary>
        [Column]
        public int edu_ed_id { get; set; }

        /// <summary>
        /// Gets or sets the edu_u_id.
        /// </summary>
        [Column]
        public int edu_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ExpirationDateAlert] table.
    /// </summary>
    [TableName("[dbo].[ExpirationDateAlert]")]
    [PrimaryKey("ExpirationDateAlertId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ExpirationDateAlertRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExpirationDateAlertId.
        /// </summary>
        [Column]
        public long ExpirationDateAlertId { get; set; }

        /// <summary>
        /// Gets or sets the ContractId.
        /// </summary>
        [Column]
        public int ContractId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[explicit_access_contract] table.
    /// </summary>
    [TableName("[dbo].[explicit_access_contract]")]
    [PrimaryKey("eac_c_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class explicit_access_contractRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the eac_c_id.
        /// </summary>
        [Column]
        public int eac_c_id { get; set; }

        /// <summary>
        /// Gets or sets the eac_u_id.
        /// </summary>
        [Column]
        public int eac_u_id { get; set; }

        /// <summary>
        /// Gets or sets the eac_allow.
        /// </summary>
        [Column]
        public bool eac_allow { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[external_links] table.
    /// </summary>
    [TableName("[dbo].[external_links]")]
    [PrimaryKey("extlinks_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class external_linkRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the extlinks_id.
        /// </summary>
        [Column]
        public int extlinks_id { get; set; }

        /// <summary>
        /// Gets or sets the extlinks_name.
        /// </summary>
        [Column]
        public string extlinks_name { get; set; }

        /// <summary>
        /// Gets or sets the extlinks_url.
        /// </summary>
        [Column]
        public string extlinks_url { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ExternalAccessToken] table.
    /// </summary>
    [TableName("[dbo].[ExternalAccessToken]")]
    [PrimaryKey("ExternalAccessTokenId")]
    [ExplicitColumns]
    public partial class ExternalAccessTokenRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalAccessTokenId.
        /// </summary>
        [Column]
        public long ExternalAccessTokenId { get; set; }

        /// <summary>
        /// Gets or sets the TokenIdentifier.
        /// </summary>
        [Column]
        public Guid TokenIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the ExpirationTime.
        /// </summary>
        [Column]
        public DateTimeOffset ExpirationTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ExternalEmployee] table.
    /// </summary>
    [TableName("[dbo].[ExternalEmployee]")]
    [PrimaryKey("ExternalEmployeeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ExternalEmployeeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalEmployeeId.
        /// </summary>
        [Column]
        public int ExternalEmployeeId { get; set; }

        /// <summary>
        /// Gets or sets the EmployeeStatusId.
        /// </summary>
        [Column]
        public int EmployeeStatusId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalId.
        /// </summary>
        [Column]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[extra_field_definition] table.
    /// </summary>
    [TableName("[dbo].[extra_field_definition]")]
    [PrimaryKey("efd_id")]
    [ExplicitColumns]
    public partial class extra_field_definitionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the efd_id.
        /// </summary>
        [Column]
        public int efd_id { get; set; }

        /// <summary>
        /// Gets or sets the efd_name.
        /// </summary>
        [Column]
        public string efd_name { get; set; }

        /// <summary>
        /// Gets or sets the efd_application.
        /// </summary>
        [Column]
        public int efd_application { get; set; }

        /// <summary>
        /// Gets or sets the efd_select_expression.
        /// </summary>
        [Column]
        public string efd_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the efd_source.
        /// </summary>
        [Column]
        public string efd_source { get; set; }

        /// <summary>
        /// Gets or sets the efd_use_custom_expression.
        /// </summary>
        [Column]
        public bool efd_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the efd_show_in_report_writer.
        /// </summary>
        [Column]
        public bool? efd_show_in_report_writer { get; set; }

        /// <summary>
        /// Gets or sets the efd_extra_select_expression.
        /// </summary>
        [Column]
        public string efd_extra_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the efd_fieldtype.
        /// </summary>
        [Column]
        public short efd_fieldtype { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[facility] table.
    /// </summary>
    [TableName("[dbo].[facility]")]
    [PrimaryKey("fac_id")]
    [ExplicitColumns]
    public partial class facilityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fac_id.
        /// </summary>
        [Column]
        public int fac_id { get; set; }

        /// <summary>
        /// Gets or sets the fac_name.
        /// </summary>
        [Column]
        public string fac_name { get; set; }

        /// <summary>
        /// Gets or sets the fac_mkt_id.
        /// </summary>
        [Column]
        public int fac_mkt_id { get; set; }

        /// <summary>
        /// Gets or sets the fac_con_name.
        /// </summary>
        [Column]
        public string fac_con_name { get; set; }

        /// <summary>
        /// Gets or sets the fac_con_phone.
        /// </summary>
        [Column]
        public string fac_con_phone { get; set; }

        /// <summary>
        /// Gets or sets the fac_con_email.
        /// </summary>
        [Column]
        public string fac_con_email { get; set; }

        /// <summary>
        /// Gets or sets the fac_addr_1.
        /// </summary>
        [Column]
        public string fac_addr_1 { get; set; }

        /// <summary>
        /// Gets or sets the fac_addr_2.
        /// </summary>
        [Column]
        public string fac_addr_2 { get; set; }

        /// <summary>
        /// Gets or sets the fac_city.
        /// </summary>
        [Column]
        public string fac_city { get; set; }

        /// <summary>
        /// Gets or sets the fac_state.
        /// </summary>
        [Column]
        public string fac_state { get; set; }

        /// <summary>
        /// Gets or sets the fac_zip.
        /// </summary>
        [Column]
        public string fac_zip { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[field_static] table.
    /// </summary>
    [TableName("[dbo].[field_static]")]
    [PrimaryKey("fs_id")]
    [ExplicitColumns]
    public partial class field_staticRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fs_id.
        /// </summary>
        [Column]
        public int fs_id { get; set; }

        /// <summary>
        /// Gets or sets the fs_field_name.
        /// </summary>
        [Column]
        public string fs_field_name { get; set; }

        /// <summary>
        /// Gets or sets the fs_field_name_display.
        /// </summary>
        [Column]
        public string fs_field_name_display { get; set; }

        /// <summary>
        /// Gets or sets the fs_fss_id.
        /// </summary>
        [Column]
        public int fs_fss_id { get; set; }

        /// <summary>
        /// Gets or sets the fs_cc_column.
        /// </summary>
        [Column]
        public string fs_cc_column { get; set; }

        /// <summary>
        /// Gets or sets the fs_ml_column.
        /// </summary>
        [Column]
        public string fs_ml_column { get; set; }

        /// <summary>
        /// Gets or sets the fs_cost_column.
        /// </summary>
        [Column]
        public string fs_cost_column { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[field_static_source] table.
    /// </summary>
    [TableName("[dbo].[field_static_source]")]
    [PrimaryKey("fss_id")]
    [ExplicitColumns]
    public partial class field_static_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the fss_id.
        /// </summary>
        [Column]
        public int fss_id { get; set; }

        /// <summary>
        /// Gets or sets the fss_app_id.
        /// </summary>
        [Column]
        public int fss_app_id { get; set; }

        /// <summary>
        /// Gets or sets the fss_table.
        /// </summary>
        [Column]
        public string fss_table { get; set; }

        /// <summary>
        /// Gets or sets the fss_table_hint_1.
        /// </summary>
        [Column]
        public string fss_table_hint_1 { get; set; }

        /// <summary>
        /// Gets or sets the fss_table_hint_1_key.
        /// </summary>
        [Column]
        public string fss_table_hint_1_key { get; set; }

        /// <summary>
        /// Gets or sets the fss_table_hint_2.
        /// </summary>
        [Column]
        public string fss_table_hint_2 { get; set; }

        /// <summary>
        /// Gets or sets the fss_table_hint_2_key.
        /// </summary>
        [Column]
        public string fss_table_hint_2_key { get; set; }

        /// <summary>
        /// Gets or sets the fss_ml_table.
        /// </summary>
        [Column]
        public string fss_ml_table { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FieldPlacement] table.
    /// </summary>
    [TableName("[dbo].[FieldPlacement]")]
    [PrimaryKey("FieldPlacementId")]
    [ExplicitColumns]
    public partial class FieldPlacementRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldPlacementId.
        /// </summary>
        [Column]
        public int FieldPlacementId { get; set; }

        /// <summary>
        /// Gets or sets the LayoutSectionId.
        /// </summary>
        [Column]
        public int LayoutSectionId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the CssStyle.
        /// </summary>
        [Column]
        public string CssStyle { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[fieldtype] table.
    /// </summary>
    [TableName("[dbo].[fieldtype]")]
    [PrimaryKey("f_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class fieldtypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the f_id.
        /// </summary>
        [Column]
        public int f_id { get; set; }

        /// <summary>
        /// Gets or sets the f_description.
        /// </summary>
        [Column]
        public string f_description { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormLayout] table.
    /// </summary>
    [TableName("[dbo].[FormLayout]")]
    [PrimaryKey("FormLayoutId")]
    [ExplicitColumns]
    public partial class FormLayoutRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormLayoutId.
        /// </summary>
        [Column]
        public int FormLayoutId { get; set; }

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the Footer.
        /// </summary>
        [Column]
        public string Footer { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormSubmission] table.
    /// </summary>
    [TableName("[dbo].[FormSubmission]")]
    [PrimaryKey("FormSubmissionId")]
    [ExplicitColumns]
    public partial class FormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormSubmissionId.
        /// </summary>
        [Column]
        public long FormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the SubmittedByPersonId.
        /// </summary>
        [Column]
        public int SubmittedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the SubmittedTime.
        /// </summary>
        [Column]
        public DateTimeOffset SubmittedTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormSubmissionValue] table.
    /// </summary>
    [TableName("[dbo].[FormSubmissionValue]")]
    [PrimaryKey("FormSubmissionValueId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class FormSubmissionValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormSubmissionValueId.
        /// </summary>
        [Column]
        public long FormSubmissionValueId { get; set; }

        /// <summary>
        /// Gets or sets the FormSubmissionId.
        /// </summary>
        [Column]
        public long FormSubmissionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormVersion] table.
    /// </summary>
    [TableName("[dbo].[FormVersion]")]
    [PrimaryKey("FormVersionId")]
    [ExplicitColumns]
    public partial class FormVersionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFormId.
        /// </summary>
        [Column]
        public int UnifiedFormId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the VersionNumber.
        /// </summary>
        [Column]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the IsActive.
        /// </summary>
        [Column]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or sets the CreatedBy.
        /// </summary>
        [Column]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Gets or sets the CreatedTime.
        /// </summary>
        [Column]
        public DateTimeOffset CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedBy.
        /// </summary>
        [Column]
        public string LastModifiedBy { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedTime.
        /// </summary>
        [Column]
        public DateTimeOffset? LastModifiedTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[FormVersionChange] table.
    /// </summary>
    [TableName("[dbo].[FormVersionChange]")]
    [PrimaryKey("FormVersionChangeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class FormVersionChangeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormVersionChangeId.
        /// </summary>
        [Column]
        public int FormVersionChangeId { get; set; }

        /// <summary>
        /// Gets or sets the CreatedByPersonId.
        /// </summary>
        [Column]
        public int CreatedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedByPersonId.
        /// </summary>
        [Column]
        public int LastModifiedByPersonId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[gift] table.
    /// </summary>
    [TableName("[dbo].[gift]")]
    [PrimaryKey("g_id")]
    [ExplicitColumns]
    public partial class giftRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the g_id.
        /// </summary>
        [Column]
        public int g_id { get; set; }

        /// <summary>
        /// Gets or sets the g_date.
        /// </summary>
        [Column]
        public DateTime g_date { get; set; }

        /// <summary>
        /// Gets or sets the g_amt.
        /// </summary>
        [Column]
        public decimal g_amt { get; set; }

        /// <summary>
        /// Gets or sets the g_b_name.
        /// </summary>
        [Column]
        public string g_b_name { get; set; }

        /// <summary>
        /// Gets or sets the g_r_name.
        /// </summary>
        [Column]
        public string g_r_name { get; set; }

        /// <summary>
        /// Gets or sets the g_p_id.
        /// </summary>
        [Column]
        public int g_p_id { get; set; }

        /// <summary>
        /// Gets or sets the g_f_id.
        /// </summary>
        [Column]
        public int g_f_id { get; set; }

        /// <summary>
        /// Gets or sets the g_comment.
        /// </summary>
        [Column]
        public string g_comment { get; set; }

        /// <summary>
        /// Gets or sets the g_add_date.
        /// </summary>
        [Column]
        public DateTime g_add_date { get; set; }

        /// <summary>
        /// Gets or sets the g_add_user.
        /// </summary>
        [Column]
        public string g_add_user { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[gift_notification] table.
    /// </summary>
    [TableName("[dbo].[gift_notification]")]
    [PrimaryKey("gn_id")]
    [ExplicitColumns]
    public partial class gift_notificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the gn_id.
        /// </summary>
        [Column]
        public int gn_id { get; set; }

        /// <summary>
        /// Gets or sets the gn_subject.
        /// </summary>
        [Column]
        public string gn_subject { get; set; }

        /// <summary>
        /// Gets or sets the gn_body.
        /// </summary>
        [Column]
        public string gn_body { get; set; }

        /// <summary>
        /// Gets or sets the gn_amount_low.
        /// </summary>
        [Column]
        public decimal gn_amount_low { get; set; }

        /// <summary>
        /// Gets or sets the gn_amount_high.
        /// </summary>
        [Column]
        public decimal gn_amount_high { get; set; }

        /// <summary>
        /// Gets or sets the gn_last_user.
        /// </summary>
        [Column]
        public string gn_last_user { get; set; }

        /// <summary>
        /// Gets or sets the gn_last_date.
        /// </summary>
        [Column]
        public DateTime gn_last_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[gift_notification_facility] table.
    /// </summary>
    [TableName("[dbo].[gift_notification_facility]")]
    [PrimaryKey("gnf_gn_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class gift_notification_facilityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the gnf_gn_id.
        /// </summary>
        [Column]
        public int gnf_gn_id { get; set; }

        /// <summary>
        /// Gets or sets the gnf_fac_id.
        /// </summary>
        [Column]
        public int gnf_fac_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[gift_notification_facility_user] table.
    /// </summary>
    [TableName("[dbo].[gift_notification_facility_user]")]
    [PrimaryKey("gnfu_fac_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class gift_notification_facility_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the gnfu_fac_id.
        /// </summary>
        [Column]
        public int gnfu_fac_id { get; set; }

        /// <summary>
        /// Gets or sets the gnfu_u_id.
        /// </summary>
        [Column]
        public int gnfu_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[gift_yearly_cap] table.
    /// </summary>
    [TableName("[dbo].[gift_yearly_cap]")]
    [PrimaryKey("gyc_id")]
    [ExplicitColumns]
    public partial class gift_yearly_capRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the gyc_id.
        /// </summary>
        [Column]
        public int gyc_id { get; set; }

        /// <summary>
        /// Gets or sets the gyc_year.
        /// </summary>
        [Column]
        public int gyc_year { get; set; }

        /// <summary>
        /// Gets or sets the gyc_amount.
        /// </summary>
        [Column]
        public decimal gyc_amount { get; set; }

        /// <summary>
        /// Gets or sets the gyc_mod_date.
        /// </summary>
        [Column]
        public DateTime gyc_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the gyc_mod_user.
        /// </summary>
        [Column]
        public string gyc_mod_user { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[Group] table.
    /// </summary>
    [TableName("[dbo].[Group]")]
    [PrimaryKey("GroupId")]
    [ExplicitColumns]
    public partial class GroupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the GroupId.
        /// </summary>
        [Column]
        public int GroupId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[GroupMember] table.
    /// </summary>
    [TableName("[dbo].[GroupMember]")]
    [PrimaryKey("GroupMemberId")]
    [ExplicitColumns]
    public partial class GroupMemberRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the GroupMemberId.
        /// </summary>
        [Column]
        public int GroupMemberId { get; set; }

        /// <summary>
        /// Gets or sets the GroupId.
        /// </summary>
        [Column]
        public int GroupId { get; set; }

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[GroupMemberOrganization] table.
    /// </summary>
    [TableName("[dbo].[GroupMemberOrganization]")]
    [PrimaryKey("GroupMemberId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class GroupMemberOrganizationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the GroupMemberId.
        /// </summary>
        [Column]
        public int GroupMemberId { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationId.
        /// </summary>
        [Column]
        public int OrganizationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[GroupUserRole] table.
    /// </summary>
    [TableName("[dbo].[GroupUserRole]")]
    [PrimaryKey("GroupId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class GroupUserRoleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the GroupId.
        /// </summary>
        [Column]
        public int GroupId { get; set; }

        /// <summary>
        /// Gets or sets the UserRoleId.
        /// </summary>
        [Column]
        public int UserRoleId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[la_adhoc_report] table.
    /// </summary>
    [TableName("[dbo].[la_adhoc_report]")]
    [PrimaryKey("la_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class la_adhoc_reportRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the la_rpt_id.
        /// </summary>
        [Column]
        public int la_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the la_rpt_date.
        /// </summary>
        [Column]
        public DateTime la_rpt_date { get; set; }

        /// <summary>
        /// Gets or sets the la_rpt_u_id.
        /// </summary>
        [Column]
        public int la_rpt_u_id { get; set; }

        /// <summary>
        /// Gets or sets the la_rpt_title.
        /// </summary>
        [Column]
        public string la_rpt_title { get; set; }

        /// <summary>
        /// Gets or sets the la_rpt_desc.
        /// </summary>
        [Column]
        public string la_rpt_desc { get; set; }

        /// <summary>
        /// Gets or sets the la_rpt_sql.
        /// </summary>
        [Column]
        public string la_rpt_sql { get; set; }

        /// <summary>
        /// Gets or sets the la_rpt_public.
        /// </summary>
        [Column]
        public bool la_rpt_public { get; set; }

        /// <summary>
        /// Gets or sets the la_rpt_template.
        /// </summary>
        [Column]
        public string la_rpt_template { get; set; }

        /// <summary>
        /// Gets or sets the la_rpt_o_id.
        /// </summary>
        [Column]
        public int? la_rpt_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[la_adhoc_report_fields] table.
    /// </summary>
    [TableName("[dbo].[la_adhoc_report_fields]")]
    [PrimaryKey("arf_id")]
    [ExplicitColumns]
    public partial class la_adhoc_report_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arf_id.
        /// </summary>
        [Column]
        public int arf_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_la_rpt_id.
        /// </summary>
        [Column]
        public int arf_la_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_field.
        /// </summary>
        [Column]
        public string arf_field { get; set; }

        /// <summary>
        /// Gets or sets the arf_name.
        /// </summary>
        [Column]
        public string arf_name { get; set; }

        /// <summary>
        /// Gets or sets the arf_fieldtype.
        /// </summary>
        [Column]
        public int arf_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the arf_select_expression.
        /// </summary>
        [Column]
        public string arf_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_source.
        /// </summary>
        [Column]
        public string arf_source { get; set; }

        /// <summary>
        /// Gets or sets the arf_use_custom_expression.
        /// </summary>
        [Column]
        public bool arf_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_extra_select_expression.
        /// </summary>
        [Column]
        public string arf_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[la_adhoc_report_query] table.
    /// </summary>
    [TableName("[dbo].[la_adhoc_report_query]")]
    [PrimaryKey("arq_id")]
    [ExplicitColumns]
    public partial class la_adhoc_report_queryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arq_id.
        /// </summary>
        [Column]
        public int arq_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_la_rpt_id.
        /// </summary>
        [Column]
        public int arq_la_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_type.
        /// </summary>
        [Column]
        public int arq_type { get; set; }

        /// <summary>
        /// Gets or sets the arq_value.
        /// </summary>
        [Column]
        public string arq_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[la_adhoc_report_query_source] table.
    /// </summary>
    [TableName("[dbo].[la_adhoc_report_query_source]")]
    [PrimaryKey("larqs_id")]
    [ExplicitColumns]
    public partial class la_adhoc_report_query_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the larqs_id.
        /// </summary>
        [Column]
        public int larqs_id { get; set; }

        /// <summary>
        /// Gets or sets the larqs_arq_id.
        /// </summary>
        [Column]
        public int larqs_arq_id { get; set; }

        /// <summary>
        /// Gets or sets the larqs_column_name.
        /// </summary>
        [Column]
        public string larqs_column_name { get; set; }

        /// <summary>
        /// Gets or sets the larqs_select_expression.
        /// </summary>
        [Column]
        public string larqs_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the larqs_source.
        /// </summary>
        [Column]
        public string larqs_source { get; set; }

        /// <summary>
        /// Gets or sets the larqs_use_custom_expression.
        /// </summary>
        [Column]
        public bool larqs_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the larqs_fieldtype.
        /// </summary>
        [Column]
        public int? larqs_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the larqs_extra_select_expression.
        /// </summary>
        [Column]
        public string larqs_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[la_adhoc_report_renamed_columns] table.
    /// </summary>
    [TableName("[dbo].[la_adhoc_report_renamed_columns]")]
    [PrimaryKey("la_arrc_id")]
    [ExplicitColumns]
    public partial class la_adhoc_report_renamed_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the la_arrc_id.
        /// </summary>
        [Column]
        public int la_arrc_id { get; set; }

        /// <summary>
        /// Gets or sets the la_arrc_rpt_id.
        /// </summary>
        [Column]
        public int la_arrc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the la_arrc_column_name.
        /// </summary>
        [Column]
        public string la_arrc_column_name { get; set; }

        /// <summary>
        /// Gets or sets the la_arrc_display_name.
        /// </summary>
        [Column]
        public string la_arrc_display_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[la_adhoc_report_users] table.
    /// </summary>
    [TableName("[dbo].[la_adhoc_report_users]")]
    [PrimaryKey("aru_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class la_adhoc_report_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the aru_rpt_id.
        /// </summary>
        [Column]
        public int aru_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the aru_u_id.
        /// </summary>
        [Column]
        public int aru_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[LayoutPage] table.
    /// </summary>
    [TableName("[dbo].[LayoutPage]")]
    [PrimaryKey("LayoutPageId")]
    [ExplicitColumns]
    public partial class LayoutPageRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LayoutPageId.
        /// </summary>
        [Column]
        public int LayoutPageId { get; set; }

        /// <summary>
        /// Gets or sets the FormLayoutId.
        /// </summary>
        [Column]
        public int FormLayoutId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the ShowHeader.
        /// </summary>
        [Column]
        public bool ShowHeader { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[LayoutSection] table.
    /// </summary>
    [TableName("[dbo].[LayoutSection]")]
    [PrimaryKey("LayoutSectionId")]
    [ExplicitColumns]
    public partial class LayoutSectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LayoutSectionId.
        /// </summary>
        [Column]
        public int LayoutSectionId { get; set; }

        /// <summary>
        /// Gets or sets the LayoutTabId.
        /// </summary>
        [Column]
        public int LayoutTabId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the ShowHeader.
        /// </summary>
        [Column]
        public bool ShowHeader { get; set; }

        /// <summary>
        /// Gets or sets the CssStyle.
        /// </summary>
        [Column]
        public string CssStyle { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[LayoutSubSection] table.
    /// </summary>
    [TableName("[dbo].[LayoutSubSection]")]
    [PrimaryKey("LayoutSubSectionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class LayoutSubSectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LayoutSubSectionId.
        /// </summary>
        [Column]
        public int LayoutSubSectionId { get; set; }

        /// <summary>
        /// Gets or sets the ParentLayoutSectionId.
        /// </summary>
        [Column]
        public int ParentLayoutSectionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[LayoutTab] table.
    /// </summary>
    [TableName("[dbo].[LayoutTab]")]
    [PrimaryKey("LayoutTabId")]
    [ExplicitColumns]
    public partial class LayoutTabRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LayoutTabId.
        /// </summary>
        [Column]
        public int LayoutTabId { get; set; }

        /// <summary>
        /// Gets or sets the LayoutPageId.
        /// </summary>
        [Column]
        public int LayoutPageId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the ShowHeader.
        /// </summary>
        [Column]
        public bool ShowHeader { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract]")]
    [PrimaryKey("la_id")]
    [ExplicitColumns]
    public partial class lease_abstractRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the la_id.
        /// </summary>
        [Column]
        public int la_id { get; set; }

        /// <summary>
        /// Gets or sets the la_c_id.
        /// </summary>
        [Column]
        public int la_c_id { get; set; }

        /// <summary>
        /// Gets or sets the la_lat_id.
        /// </summary>
        [Column]
        public int la_lat_id { get; set; }

        /// <summary>
        /// Gets or sets the la_use_template_values.
        /// </summary>
        [Column]
        public int? la_use_template_values { get; set; }

        /// <summary>
        /// Gets or sets the la_Address.
        /// </summary>
        [Column]
        public string la_Address { get; set; }

        /// <summary>
        /// Gets or sets the la_CommencementDate.
        /// </summary>
        [Column]
        public DateTime? la_CommencementDate { get; set; }

        /// <summary>
        /// Gets or sets the la_ExpirationDate.
        /// </summary>
        [Column]
        public DateTime? la_ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets the la_LeaseTerm.
        /// </summary>
        [Column]
        public double? la_LeaseTerm { get; set; }

        /// <summary>
        /// Gets or sets the la_DocumentType.
        /// </summary>
        [Column]
        public string la_DocumentType { get; set; }

        /// <summary>
        /// Gets or sets the la_TotalRentableSquareFootage.
        /// </summary>
        [Column]
        public int? la_TotalRentableSquareFootage { get; set; }

        /// <summary>
        /// Gets or sets the la_SpaceType.
        /// </summary>
        [Column]
        public string la_SpaceType { get; set; }

        /// <summary>
        /// Gets or sets the la_1RentStart.
        /// </summary>
        [Column]
        public DateTime? la_1RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_1RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_1RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_1Months.
        /// </summary>
        [Column]
        public double? la_1Months { get; set; }

        /// <summary>
        /// Gets or sets the la_1AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_1AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_1MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_1MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_1AmtSF.
        /// </summary>
        [Column]
        public decimal? la_1AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_2RentStart.
        /// </summary>
        [Column]
        public DateTime? la_2RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_2RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_2RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_2Months.
        /// </summary>
        [Column]
        public double? la_2Months { get; set; }

        /// <summary>
        /// Gets or sets the la_2AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_2AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_2MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_2MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_2AmtSF.
        /// </summary>
        [Column]
        public decimal? la_2AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_3RentStart.
        /// </summary>
        [Column]
        public DateTime? la_3RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_3RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_3RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_3Months.
        /// </summary>
        [Column]
        public double? la_3Months { get; set; }

        /// <summary>
        /// Gets or sets the la_3AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_3AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_3MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_3MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_3AmtSF.
        /// </summary>
        [Column]
        public decimal? la_3AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_4RentStart.
        /// </summary>
        [Column]
        public DateTime? la_4RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_4RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_4RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_4Months.
        /// </summary>
        [Column]
        public double? la_4Months { get; set; }

        /// <summary>
        /// Gets or sets the la_4AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_4AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_4MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_4MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_4AmtSF.
        /// </summary>
        [Column]
        public decimal? la_4AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_5RentStart.
        /// </summary>
        [Column]
        public DateTime? la_5RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_5RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_5RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_5Months.
        /// </summary>
        [Column]
        public double? la_5Months { get; set; }

        /// <summary>
        /// Gets or sets the la_5AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_5AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_5MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_5MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_5AmtSF.
        /// </summary>
        [Column]
        public decimal? la_5AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_6RentStart.
        /// </summary>
        [Column]
        public DateTime? la_6RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_6RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_6RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_6Months.
        /// </summary>
        [Column]
        public double? la_6Months { get; set; }

        /// <summary>
        /// Gets or sets the la_6AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_6AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_6MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_6MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_6AmtSF.
        /// </summary>
        [Column]
        public decimal? la_6AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_7RentStart.
        /// </summary>
        [Column]
        public DateTime? la_7RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_7RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_7RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_7Months.
        /// </summary>
        [Column]
        public double? la_7Months { get; set; }

        /// <summary>
        /// Gets or sets the la_7AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_7AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_7MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_7MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_7AmtSF.
        /// </summary>
        [Column]
        public decimal? la_7AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_8RentStart.
        /// </summary>
        [Column]
        public DateTime? la_8RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_8RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_8RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_8Months.
        /// </summary>
        [Column]
        public double? la_8Months { get; set; }

        /// <summary>
        /// Gets or sets the la_8AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_8AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_8MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_8MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_8AmtSF.
        /// </summary>
        [Column]
        public decimal? la_8AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_9RentStart.
        /// </summary>
        [Column]
        public DateTime? la_9RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_9RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_9RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_9Months.
        /// </summary>
        [Column]
        public double? la_9Months { get; set; }

        /// <summary>
        /// Gets or sets the la_9AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_9AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_9MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_9MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_9AmtSF.
        /// </summary>
        [Column]
        public decimal? la_9AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_10RentStart.
        /// </summary>
        [Column]
        public DateTime? la_10RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_10RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_10RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_10Months.
        /// </summary>
        [Column]
        public double? la_10Months { get; set; }

        /// <summary>
        /// Gets or sets the la_10AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_10AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_10MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_10MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_10AmtSF.
        /// </summary>
        [Column]
        public decimal? la_10AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_11RentStart.
        /// </summary>
        [Column]
        public DateTime? la_11RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_11RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_11RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_11Months.
        /// </summary>
        [Column]
        public double? la_11Months { get; set; }

        /// <summary>
        /// Gets or sets the la_11AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_11AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_11MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_11MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_11AmtSF.
        /// </summary>
        [Column]
        public decimal? la_11AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_12RentStart.
        /// </summary>
        [Column]
        public DateTime? la_12RentStart { get; set; }

        /// <summary>
        /// Gets or sets the la_12RentEnd.
        /// </summary>
        [Column]
        public DateTime? la_12RentEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_12Months.
        /// </summary>
        [Column]
        public double? la_12Months { get; set; }

        /// <summary>
        /// Gets or sets the la_12AnnualRent.
        /// </summary>
        [Column]
        public decimal? la_12AnnualRent { get; set; }

        /// <summary>
        /// Gets or sets the la_12MonthlyRent.
        /// </summary>
        [Column]
        public decimal? la_12MonthlyRent { get; set; }

        /// <summary>
        /// Gets or sets the la_12AmtSF.
        /// </summary>
        [Column]
        public decimal? la_12AmtSF { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement.
        /// </summary>
        [Column]
        public int? la_RentAbatement { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatementStart.
        /// </summary>
        [Column]
        public DateTime? la_RentAbatementStart { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatementEnd.
        /// </summary>
        [Column]
        public DateTime? la_RentAbatementEnd { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatementMonths.
        /// </summary>
        [Column]
        public double? la_RentAbatementMonths { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatementMonthlyAmt.
        /// </summary>
        [Column]
        public decimal? la_RentAbatementMonthlyAmt { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement2Start.
        /// </summary>
        [Column]
        public DateTime? la_RentAbatement2Start { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement2End.
        /// </summary>
        [Column]
        public DateTime? la_RentAbatement2End { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement2Months.
        /// </summary>
        [Column]
        public double? la_RentAbatement2Months { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement2MonthlyAmt.
        /// </summary>
        [Column]
        public decimal? la_RentAbatement2MonthlyAmt { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement3Start.
        /// </summary>
        [Column]
        public DateTime? la_RentAbatement3Start { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement3End.
        /// </summary>
        [Column]
        public DateTime? la_RentAbatement3End { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement3Months.
        /// </summary>
        [Column]
        public double? la_RentAbatement3Months { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement3MonthlyAmt.
        /// </summary>
        [Column]
        public decimal? la_RentAbatement3MonthlyAmt { get; set; }

        /// <summary>
        /// Gets or sets the la_TenantImprovementsTotalCost.
        /// </summary>
        [Column]
        public decimal? la_TenantImprovementsTotalCost { get; set; }

        /// <summary>
        /// Gets or sets the la_LLBroker1Amount.
        /// </summary>
        [Column]
        public decimal? la_LLBroker1Amount { get; set; }

        /// <summary>
        /// Gets or sets the la_TenantBrokerAmount.
        /// </summary>
        [Column]
        public decimal? la_TenantBrokerAmount { get; set; }

        /// <summary>
        /// Gets or sets the la_InHouseCommissionAmount.
        /// </summary>
        [Column]
        public decimal? la_InHouseCommissionAmount { get; set; }

        /// <summary>
        /// Gets or sets the la_RightofFirstOfferRefusal.
        /// </summary>
        [Column]
        public int? la_RightofFirstOfferRefusal { get; set; }

        /// <summary>
        /// Gets or sets the la_ROFOFloor.
        /// </summary>
        [Column]
        public string la_ROFOFloor { get; set; }

        /// <summary>
        /// Gets or sets the la_ROFONotes.
        /// </summary>
        [Column]
        public string la_ROFONotes { get; set; }

        /// <summary>
        /// Gets or sets the la_ExpansionOption.
        /// </summary>
        [Column]
        public int? la_ExpansionOption { get; set; }

        /// <summary>
        /// Gets or sets the la_ExpansionOptionNotes.
        /// </summary>
        [Column]
        public string la_ExpansionOptionNotes { get; set; }

        /// <summary>
        /// Gets or sets the la_PurchaseOptionNotes.
        /// </summary>
        [Column]
        public string la_PurchaseOptionNotes { get; set; }

        /// <summary>
        /// Gets or sets the la_sicc.
        /// </summary>
        [Column]
        public int? la_sicc { get; set; }

        /// <summary>
        /// Gets or sets the la_TotalMonths.
        /// </summary>
        [Column]
        public double la_TotalMonths { get; set; }

        /// <summary>
        /// Gets or sets the la_AbstractName.
        /// </summary>
        [Column]
        public string la_AbstractName { get; set; }

        /// <summary>
        /// Gets or sets the la_ccd_id.
        /// </summary>
        [Column]
        public int? la_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the la_BaseRentBeforeAbatement.
        /// </summary>
        [Column]
        public decimal? la_BaseRentBeforeAbatement { get; set; }

        /// <summary>
        /// Gets or sets the la_TotalRentAbatement.
        /// </summary>
        [Column]
        public decimal? la_TotalRentAbatement { get; set; }

        /// <summary>
        /// Gets or sets the la_BaseRentAfterAbatement.
        /// </summary>
        [Column]
        public decimal? la_BaseRentAfterAbatement { get; set; }

        /// <summary>
        /// Gets or sets the la_AverageAnnualBaseRent.
        /// </summary>
        [Column]
        public decimal? la_AverageAnnualBaseRent { get; set; }

        /// <summary>
        /// Gets or sets the la_AverageAnnualTIAndBrokerFees.
        /// </summary>
        [Column]
        public decimal? la_AverageAnnualTIAndBrokerFees { get; set; }

        /// <summary>
        /// Gets or sets the la_1TotalRent.
        /// </summary>
        [Column]
        public decimal? la_1TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_2TotalRent.
        /// </summary>
        [Column]
        public decimal? la_2TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_3TotalRent.
        /// </summary>
        [Column]
        public decimal? la_3TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_4TotalRent.
        /// </summary>
        [Column]
        public decimal? la_4TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_5TotalRent.
        /// </summary>
        [Column]
        public decimal? la_5TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_6TotalRent.
        /// </summary>
        [Column]
        public decimal? la_6TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_7TotalRent.
        /// </summary>
        [Column]
        public decimal? la_7TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_8TotalRent.
        /// </summary>
        [Column]
        public decimal? la_8TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_9TotalRent.
        /// </summary>
        [Column]
        public decimal? la_9TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_10TotalRent.
        /// </summary>
        [Column]
        public decimal? la_10TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_11TotalRent.
        /// </summary>
        [Column]
        public decimal? la_11TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_12TotalRent.
        /// </summary>
        [Column]
        public decimal? la_12TotalRent { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement1Total.
        /// </summary>
        [Column]
        public decimal? la_RentAbatement1Total { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement2Total.
        /// </summary>
        [Column]
        public decimal? la_RentAbatement2Total { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement3Total.
        /// </summary>
        [Column]
        public decimal? la_RentAbatement3Total { get; set; }

        /// <summary>
        /// Gets or sets the la_1AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_1AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_1MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_1MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_1AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_1AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_2AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_2AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_2MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_2MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_2AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_2AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_3AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_3AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_3MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_3MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_3AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_3AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_4AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_4AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_4MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_4MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_4AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_4AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_5AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_5AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_5MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_5MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_5AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_5AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_6AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_6AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_6MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_6MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_6AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_6AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_7AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_7AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_7MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_7MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_7AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_7AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_8AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_8AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_8MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_8MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_8AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_8AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_9AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_9AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_9MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_9MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_9AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_9AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_10AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_10AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_10MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_10MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_10AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_10AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_11AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_11AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_11MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_11MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_11AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_11AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_12AnnualRent_currency_code.
        /// </summary>
        [Column]
        public string la_12AnnualRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_12MonthlyRent_currency_code.
        /// </summary>
        [Column]
        public string la_12MonthlyRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_12AmtSF_currency_code.
        /// </summary>
        [Column]
        public string la_12AmtSF_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatementMonthlyAmt_currency_code.
        /// </summary>
        [Column]
        public string la_RentAbatementMonthlyAmt_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement2MonthlyAmt_currency_code.
        /// </summary>
        [Column]
        public string la_RentAbatement2MonthlyAmt_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement3MonthlyAmt_currency_code.
        /// </summary>
        [Column]
        public string la_RentAbatement3MonthlyAmt_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_TenantImprovementsTotalCost_currency_code.
        /// </summary>
        [Column]
        public string la_TenantImprovementsTotalCost_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_LLBroker1Amount_currency_code.
        /// </summary>
        [Column]
        public string la_LLBroker1Amount_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_TenantBrokerAmount_currency_code.
        /// </summary>
        [Column]
        public string la_TenantBrokerAmount_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_InHouseCommissionAmount_currency_code.
        /// </summary>
        [Column]
        public string la_InHouseCommissionAmount_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_BaseRentBeforeAbatement_currency_code.
        /// </summary>
        [Column]
        public string la_BaseRentBeforeAbatement_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_TotalRentAbatement_currency_code.
        /// </summary>
        [Column]
        public string la_TotalRentAbatement_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_BaseRentAfterAbatement_currency_code.
        /// </summary>
        [Column]
        public string la_BaseRentAfterAbatement_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_AverageAnnualBaseRent_currency_code.
        /// </summary>
        [Column]
        public string la_AverageAnnualBaseRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_AverageAnnualTIAndBrokerFees_currency_code.
        /// </summary>
        [Column]
        public string la_AverageAnnualTIAndBrokerFees_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_1TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_1TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_2TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_2TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_3TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_3TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_4TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_4TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_5TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_5TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_6TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_6TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_7TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_7TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_8TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_8TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_9TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_9TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_10TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_10TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_11TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_11TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_12TotalRent_currency_code.
        /// </summary>
        [Column]
        public string la_12TotalRent_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement1Total_currency_code.
        /// </summary>
        [Column]
        public string la_RentAbatement1Total_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement2Total_currency_code.
        /// </summary>
        [Column]
        public string la_RentAbatement2Total_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the la_RentAbatement3Total_currency_code.
        /// </summary>
        [Column]
        public string la_RentAbatement3Total_currency_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_adhoc_column]")]
    [PrimaryKey("laac_id")]
    [ExplicitColumns]
    public partial class lease_abstract_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the laac_id.
        /// </summary>
        [Column]
        public int laac_id { get; set; }

        /// <summary>
        /// Gets or sets the laac_name.
        /// </summary>
        [Column]
        public string laac_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_adhoc_field_source] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_adhoc_field_source]")]
    [PrimaryKey("laafs_id")]
    [ExplicitColumns]
    public partial class lease_abstract_adhoc_field_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the laafs_id.
        /// </summary>
        [Column]
        public int laafs_id { get; set; }

        /// <summary>
        /// Gets or sets the laafs_source.
        /// </summary>
        [Column]
        public string laafs_source { get; set; }

        /// <summary>
        /// Gets or sets the laafs_preload_expression.
        /// </summary>
        [Column]
        public string laafs_preload_expression { get; set; }

        /// <summary>
        /// Gets or sets the laafs_subquery_expression.
        /// </summary>
        [Column]
        public string laafs_subquery_expression { get; set; }

        /// <summary>
        /// Gets or sets the laafs_table_name.
        /// </summary>
        [Column]
        public string laafs_table_name { get; set; }

        /// <summary>
        /// Gets or sets the laafs_parent_alias.
        /// </summary>
        [Column]
        public string laafs_parent_alias { get; set; }

        /// <summary>
        /// Gets or sets the laafs_join_type.
        /// </summary>
        [Column]
        public string laafs_join_type { get; set; }

        /// <summary>
        /// Gets or sets the laafs_left_column.
        /// </summary>
        [Column]
        public string laafs_left_column { get; set; }

        /// <summary>
        /// Gets or sets the laafs_right_column.
        /// </summary>
        [Column]
        public string laafs_right_column { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_adhoc2] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_adhoc2]")]
    [ExplicitColumns]
    public partial class lease_abstract_adhoc2Row : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LAID.
        /// </summary>
        [Column]
        public int LAID { get; set; }

        /// <summary>
        /// Gets or sets the FieldName.
        /// </summary>
        [Column]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or sets the FieldValue.
        /// </summary>
        [Column]
        public string FieldValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_button] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_button]")]
    [PrimaryKey("lab_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class lease_abstract_buttonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lab_id.
        /// </summary>
        [Column]
        public int lab_id { get; set; }

        /// <summary>
        /// Gets or sets the lab_name.
        /// </summary>
        [Column]
        public string lab_name { get; set; }

        /// <summary>
        /// Gets or sets the lab_sort.
        /// </summary>
        [Column]
        public int lab_sort { get; set; }

        /// <summary>
        /// Gets or sets the lab_rent.
        /// </summary>
        [Column]
        public int lab_rent { get; set; }

        /// <summary>
        /// Gets or sets the lab_additional_rent.
        /// </summary>
        [Column]
        public int lab_additional_rent { get; set; }

        /// <summary>
        /// Gets or sets the lab_hidden.
        /// </summary>
        [Column]
        public bool? lab_hidden { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field]")]
    [PrimaryKey("laf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class lease_abstract_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the laf_id.
        /// </summary>
        [Column]
        public int laf_id { get; set; }

        /// <summary>
        /// Gets or sets the laf_name.
        /// </summary>
        [Column]
        public string laf_name { get; set; }

        /// <summary>
        /// Gets or sets the laf_tab_id.
        /// </summary>
        [Column]
        public int laf_tab_id { get; set; }

        /// <summary>
        /// Gets or sets the laf_section_id.
        /// </summary>
        [Column]
        public int laf_section_id { get; set; }

        /// <summary>
        /// Gets or sets the laf_sort.
        /// </summary>
        [Column]
        public int laf_sort { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field_bookmark] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field_bookmark]")]
    [PrimaryKey("lafb_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class lease_abstract_field_bookmarkRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lafb_id.
        /// </summary>
        [Column]
        public int lafb_id { get; set; }

        /// <summary>
        /// Gets or sets the lafb_la_id.
        /// </summary>
        [Column]
        public int lafb_la_id { get; set; }

        /// <summary>
        /// Gets or sets the lafb_lafm_id.
        /// </summary>
        [Column]
        public int lafb_lafm_id { get; set; }

        /// <summary>
        /// Gets or sets the lafb_page.
        /// </summary>
        [Column]
        public int lafb_page { get; set; }

        /// <summary>
        /// Gets or sets the lafb_title.
        /// </summary>
        [Column]
        public string lafb_title { get; set; }

        /// <summary>
        /// Gets or sets the lafb_table.
        /// </summary>
        [Column]
        public int lafb_table { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field_common] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field_common]")]
    [PrimaryKey("lafc_id")]
    [ExplicitColumns]
    public partial class lease_abstract_field_commonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lafc_id.
        /// </summary>
        [Column]
        public int lafc_id { get; set; }

        /// <summary>
        /// Gets or sets the lafc_ui_name.
        /// </summary>
        [Column]
        public string lafc_ui_name { get; set; }

        /// <summary>
        /// Gets or sets the lafc_lab_id.
        /// </summary>
        [Column]
        public int lafc_lab_id { get; set; }

        /// <summary>
        /// Gets or sets the lafc_las_id.
        /// </summary>
        [Column]
        public int lafc_las_id { get; set; }

        /// <summary>
        /// Gets or sets the lafc_sort.
        /// </summary>
        [Column]
        public int lafc_sort { get; set; }

        /// <summary>
        /// Gets or sets the lafc_unpvt_name.
        /// </summary>
        [Column]
        public string lafc_unpvt_name { get; set; }

        /// <summary>
        /// Gets or sets the lafc_fieldtype.
        /// </summary>
        [Column]
        public int lafc_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the lafc_select_expression.
        /// </summary>
        [Column]
        public string lafc_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the lafc_source.
        /// </summary>
        [Column]
        public string lafc_source { get; set; }

        /// <summary>
        /// Gets or sets the lafc_use_custom_expression.
        /// </summary>
        [Column]
        public bool lafc_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the lafc_extra_select_expression.
        /// </summary>
        [Column]
        public string lafc_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field_lookup] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field_lookup]")]
    [PrimaryKey("lafl_id")]
    [ExplicitColumns]
    public partial class lease_abstract_field_lookupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lafl_id.
        /// </summary>
        [Column]
        public int lafl_id { get; set; }

        /// <summary>
        /// Gets or sets the lafl_lafm_id.
        /// </summary>
        [Column]
        public int lafl_lafm_id { get; set; }

        /// <summary>
        /// Gets or sets the lafl_name.
        /// </summary>
        [Column]
        public string lafl_name { get; set; }

        /// <summary>
        /// Gets or sets the lafl_order.
        /// </summary>
        [Column]
        public int? lafl_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field_master] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field_master]")]
    [PrimaryKey("lafm_id")]
    [ExplicitColumns]
    public partial class lease_abstract_field_masterRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lafm_id.
        /// </summary>
        [Column]
        public int lafm_id { get; set; }

        /// <summary>
        /// Gets or sets the lafm_ui_name.
        /// </summary>
        [Column]
        public string lafm_ui_name { get; set; }

        /// <summary>
        /// Gets or sets the lafm_type.
        /// </summary>
        [Column]
        public int lafm_type { get; set; }

        /// <summary>
        /// Gets or sets the lafm_datatype.
        /// </summary>
        [Column]
        public int lafm_datatype { get; set; }

        /// <summary>
        /// Gets or sets the lafm_value_table.
        /// </summary>
        [Column]
        public int lafm_value_table { get; set; }

        /// <summary>
        /// Gets or sets the lafm_unpvt_name.
        /// </summary>
        [Column]
        public string lafm_unpvt_name { get; set; }

        /// <summary>
        /// Gets or sets the lafm_map_name.
        /// </summary>
        [Column]
        public string lafm_map_name { get; set; }

        /// <summary>
        /// Gets or sets the lafm_select_expression.
        /// </summary>
        [Column]
        public string lafm_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the lafm_source.
        /// </summary>
        [Column]
        public string lafm_source { get; set; }

        /// <summary>
        /// Gets or sets the lafm_use_custom_expression.
        /// </summary>
        [Column]
        public bool lafm_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the lafm_extra_select_expression.
        /// </summary>
        [Column]
        public string lafm_extra_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the lafm_description.
        /// </summary>
        [Column]
        public string lafm_description { get; set; }

        /// <summary>
        /// Gets or sets the lafm_latl_id.
        /// </summary>
        [Column]
        public int? lafm_latl_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field_master_table_field] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field_master_table_field]")]
    [PrimaryKey("lafmtf_id")]
    [ExplicitColumns]
    public partial class lease_abstract_field_master_table_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lafmtf_id.
        /// </summary>
        [Column]
        public int lafmtf_id { get; set; }

        /// <summary>
        /// Gets or sets the lafmtf_lafm_id.
        /// </summary>
        [Column]
        public int lafmtf_lafm_id { get; set; }

        /// <summary>
        /// Gets or sets the lafmtf_ahc_id.
        /// </summary>
        [Column]
        public string lafmtf_ahc_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field_template] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field_template]")]
    [PrimaryKey("laft_id")]
    [ExplicitColumns]
    public partial class lease_abstract_field_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the laft_id.
        /// </summary>
        [Column]
        public int laft_id { get; set; }

        /// <summary>
        /// Gets or sets the laft_lafm_id.
        /// </summary>
        [Column]
        public int laft_lafm_id { get; set; }

        /// <summary>
        /// Gets or sets the laft_lat_id.
        /// </summary>
        [Column]
        public int laft_lat_id { get; set; }

        /// <summary>
        /// Gets or sets the laft_lab_id.
        /// </summary>
        [Column]
        public int laft_lab_id { get; set; }

        /// <summary>
        /// Gets or sets the laft_las_id.
        /// </summary>
        [Column]
        public int laft_las_id { get; set; }

        /// <summary>
        /// Gets or sets the laft_sort.
        /// </summary>
        [Column]
        public int laft_sort { get; set; }

        /// <summary>
        /// Gets or sets the laft_edit_comments.
        /// </summary>
        [Column]
        public string laft_edit_comments { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field_type] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field_type]")]
    [PrimaryKey("laft_id")]
    [ExplicitColumns]
    public partial class lease_abstract_field_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the laft_id.
        /// </summary>
        [Column]
        public int laft_id { get; set; }

        /// <summary>
        /// Gets or sets the laft_name.
        /// </summary>
        [Column]
        public string laft_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_field_value] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_field_value]")]
    [PrimaryKey("lafv_id")]
    [ExplicitColumns]
    public partial class lease_abstract_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lafv_id.
        /// </summary>
        [Column]
        public int lafv_id { get; set; }

        /// <summary>
        /// Gets or sets the lafv_lafm_id.
        /// </summary>
        [Column]
        public int lafv_lafm_id { get; set; }

        /// <summary>
        /// Gets or sets the lafv_la_id.
        /// </summary>
        [Column]
        public int lafv_la_id { get; set; }

        /// <summary>
        /// Gets or sets the lafv_integer.
        /// </summary>
        [Column]
        public int? lafv_integer { get; set; }

        /// <summary>
        /// Gets or sets the lafv_datetime.
        /// </summary>
        [Column]
        public DateTime? lafv_datetime { get; set; }

        /// <summary>
        /// Gets or sets the lafv_decimal.
        /// </summary>
        [Column]
        public decimal? lafv_decimal { get; set; }

        /// <summary>
        /// Gets or sets the lafv_money.
        /// </summary>
        [Column]
        public decimal? lafv_money { get; set; }

        /// <summary>
        /// Gets or sets the lafv_varchar_255.
        /// </summary>
        [Column]
        public string lafv_varchar_255 { get; set; }

        /// <summary>
        /// Gets or sets the lafv_varchar_1000.
        /// </summary>
        [Column]
        public string lafv_varchar_1000 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_lookup] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_lookup]")]
    [ExplicitColumns]
    public partial class lease_abstract_lookupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lalu_id.
        /// </summary>
        [Column]
        public int lalu_id { get; set; }

        /// <summary>
        /// Gets or sets the lalu_c_id.
        /// </summary>
        [Column]
        public int lalu_c_id { get; set; }

        /// <summary>
        /// Gets or sets the lalu_unique_id.
        /// </summary>
        [Column]
        public string lalu_unique_id { get; set; }

        /// <summary>
        /// Gets or sets the lalu_la_id.
        /// </summary>
        [Column]
        public int lalu_la_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_option] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_option]")]
    [PrimaryKey("lao_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class lease_abstract_optionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lao_id.
        /// </summary>
        [Column]
        public int lao_id { get; set; }

        /// <summary>
        /// Gets or sets the lao_o_id.
        /// </summary>
        [Column]
        public int lao_o_id { get; set; }

        /// <summary>
        /// Gets or sets the lao_name.
        /// </summary>
        [Column]
        public string lao_name { get; set; }

        /// <summary>
        /// Gets or sets the lao_value.
        /// </summary>
        [Column]
        public string lao_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_schema] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_schema]")]
    [PrimaryKey("las_id")]
    [ExplicitColumns]
    public partial class lease_abstract_schemaRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the las_id.
        /// </summary>
        [Column]
        public int las_id { get; set; }

        /// <summary>
        /// Gets or sets the las_fld_name.
        /// </summary>
        [Column]
        public string las_fld_name { get; set; }

        /// <summary>
        /// Gets or sets the las_ui_name.
        /// </summary>
        [Column]
        public string las_ui_name { get; set; }

        /// <summary>
        /// Gets or sets the las_tab_id.
        /// </summary>
        [Column]
        public int las_tab_id { get; set; }

        /// <summary>
        /// Gets or sets the las_section_id.
        /// </summary>
        [Column]
        public int las_section_id { get; set; }

        /// <summary>
        /// Gets or sets the las_sort.
        /// </summary>
        [Column]
        public int las_sort { get; set; }

        /// <summary>
        /// Gets or sets the las_show_nulls.
        /// </summary>
        [Column]
        public int las_show_nulls { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_section] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_section]")]
    [PrimaryKey("las_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class lease_abstract_sectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the las_id.
        /// </summary>
        [Column]
        public int las_id { get; set; }

        /// <summary>
        /// Gets or sets the las_name.
        /// </summary>
        [Column]
        public string las_name { get; set; }

        /// <summary>
        /// Gets or sets the las_sort.
        /// </summary>
        [Column]
        public int las_sort { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_table_lookup] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_table_lookup]")]
    [PrimaryKey("latl_id")]
    [ExplicitColumns]
    public partial class lease_abstract_table_lookupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the latl_id.
        /// </summary>
        [Column]
        public int latl_id { get; set; }

        /// <summary>
        /// Gets or sets the latl_name.
        /// </summary>
        [Column]
        public string latl_name { get; set; }

        /// <summary>
        /// Gets or sets the latl_table.
        /// </summary>
        [Column]
        public string latl_table { get; set; }

        /// <summary>
        /// Gets or sets the latl_id_field.
        /// </summary>
        [Column]
        public string latl_id_field { get; set; }

        /// <summary>
        /// Gets or sets the latl_condition.
        /// </summary>
        [Column]
        public string latl_condition { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_template] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_template]")]
    [PrimaryKey("lat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class lease_abstract_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lat_id.
        /// </summary>
        [Column]
        public int lat_id { get; set; }

        /// <summary>
        /// Gets or sets the lat_name.
        /// </summary>
        [Column]
        public string lat_name { get; set; }

        /// <summary>
        /// Gets or sets the lat_la_id.
        /// </summary>
        [Column]
        public int lat_la_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_abstract_value] table.
    /// </summary>
    [TableName("[dbo].[lease_abstract_value]")]
    [PrimaryKey("lav_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class lease_abstract_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the lav_id.
        /// </summary>
        [Column]
        public int lav_id { get; set; }

        /// <summary>
        /// Gets or sets the lav_la_id.
        /// </summary>
        [Column]
        public int lav_la_id { get; set; }

        /// <summary>
        /// Gets or sets the lav_laf_id.
        /// </summary>
        [Column]
        public int lav_laf_id { get; set; }

        /// <summary>
        /// Gets or sets the lav_value.
        /// </summary>
        [Column]
        public string lav_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[lease_adhoc_field_crosstab] table.
    /// </summary>
    [TableName("[dbo].[lease_adhoc_field_crosstab]")]
    [ExplicitColumns]
    public partial class lease_adhoc_field_crosstabRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the LAID.
        /// </summary>
        [Column]
        public int LAID { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_1.
        /// </summary>
        [Column("Sample Field 1")] 
        public string Sample_Field_1 { get; set; }

        /// <summary>
        /// Gets or sets the Sample_Field_2.
        /// </summary>
        [Column("Sample Field 2")] 
        public string Sample_Field_2 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[mailin_stats] table.
    /// </summary>
    [TableName("[dbo].[mailin_stats]")]
    [ExplicitColumns]
    public partial class mailin_statRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the m_org.
        /// </summary>
        [Column]
        public string m_org { get; set; }

        /// <summary>
        /// Gets or sets the m_count.
        /// </summary>
        [Column]
        public int? m_count { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[market] table.
    /// </summary>
    [TableName("[dbo].[market]")]
    [PrimaryKey("mkt_id")]
    [ExplicitColumns]
    public partial class marketRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mkt_id.
        /// </summary>
        [Column]
        public int mkt_id { get; set; }

        /// <summary>
        /// Gets or sets the mkt_name.
        /// </summary>
        [Column]
        public string mkt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[message] table.
    /// </summary>
    [TableName("[dbo].[message]")]
    [PrimaryKey("m_id")]
    [ExplicitColumns]
    public partial class messageRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the m_id.
        /// </summary>
        [Column]
        public int m_id { get; set; }

        /// <summary>
        /// Gets or sets the m_mt_id.
        /// </summary>
        [Column]
        public int? m_mt_id { get; set; }

        /// <summary>
        /// Gets or sets the m_parent_id.
        /// </summary>
        [Column]
        public int? m_parent_id { get; set; }

        /// <summary>
        /// Gets or sets the m_from_u_id.
        /// </summary>
        [Column]
        public int m_from_u_id { get; set; }

        /// <summary>
        /// Gets or sets the m_from.
        /// </summary>
        [Column]
        public string m_from { get; set; }

        /// <summary>
        /// Gets or sets the m_type.
        /// </summary>
        [Column]
        public int m_type { get; set; }

        /// <summary>
        /// Gets or sets the m_subject.
        /// </summary>
        [Column]
        public string m_subject { get; set; }

        /// <summary>
        /// Gets or sets the m_body.
        /// </summary>
        [Column]
        public string m_body { get; set; }

        /// <summary>
        /// Gets or sets the m_date_sent.
        /// </summary>
        [Column]
        public DateTime? m_date_sent { get; set; }

        /// <summary>
        /// Gets or sets the m_isInternal.
        /// </summary>
        [Column]
        public bool? m_isInternal { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[message_attachment] table.
    /// </summary>
    [TableName("[dbo].[message_attachment]")]
    [PrimaryKey("ma_id")]
    [ExplicitColumns]
    public partial class message_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ma_id.
        /// </summary>
        [Column]
        public int ma_id { get; set; }

        /// <summary>
        /// Gets or sets the ma_m_id.
        /// </summary>
        [Column]
        public int ma_m_id { get; set; }

        /// <summary>
        /// Gets or sets the ma_attachment.
        /// </summary>
        [Column]
        public string ma_attachment { get; set; }

        /// <summary>
        /// Gets or sets the ma_filename.
        /// </summary>
        [Column]
        public string ma_filename { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[message_recipient] table.
    /// </summary>
    [TableName("[dbo].[message_recipient]")]
    [PrimaryKey("mr_id")]
    [ExplicitColumns]
    public partial class message_recipientRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mr_id.
        /// </summary>
        [Column]
        public int mr_id { get; set; }

        /// <summary>
        /// Gets or sets the mr_m_id.
        /// </summary>
        [Column]
        public int mr_m_id { get; set; }

        /// <summary>
        /// Gets or sets the mr_u_id.
        /// </summary>
        [Column]
        public int mr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the mr_subject.
        /// </summary>
        [Column]
        public string mr_subject { get; set; }

        /// <summary>
        /// Gets or sets the mr_body.
        /// </summary>
        [Column]
        public string mr_body { get; set; }

        /// <summary>
        /// Gets or sets the mr_date_sent.
        /// </summary>
        [Column]
        public DateTime? mr_date_sent { get; set; }

        /// <summary>
        /// Gets or sets the mr_date_read.
        /// </summary>
        [Column]
        public DateTime? mr_date_read { get; set; }

        /// <summary>
        /// Gets or sets the mr_deleted.
        /// </summary>
        [Column]
        public bool mr_deleted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[message_series] table.
    /// </summary>
    [TableName("[dbo].[message_series]")]
    [ExplicitColumns]
    public partial class message_seriesRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ms_o_id.
        /// </summary>
        [Column]
        public int ms_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ms_mt_id.
        /// </summary>
        [Column]
        public int ms_mt_id { get; set; }

        /// <summary>
        /// Gets or sets the ms_es_id.
        /// </summary>
        [Column]
        public int ms_es_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[message_template] table.
    /// </summary>
    [TableName("[dbo].[message_template]")]
    [PrimaryKey("mt_id")]
    [ExplicitColumns]
    public partial class message_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mt_id.
        /// </summary>
        [Column]
        public int mt_id { get; set; }

        /// <summary>
        /// Gets or sets the mt_name.
        /// </summary>
        [Column]
        public string mt_name { get; set; }

        /// <summary>
        /// Gets or sets the mt_from.
        /// </summary>
        [Column]
        public string mt_from { get; set; }

        /// <summary>
        /// Gets or sets the mt_subject.
        /// </summary>
        [Column]
        public string mt_subject { get; set; }

        /// <summary>
        /// Gets or sets the mt_body.
        /// </summary>
        [Column]
        public string mt_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[message_template_field] table.
    /// </summary>
    [TableName("[dbo].[message_template_field]")]
    [PrimaryKey("mtf_id")]
    [ExplicitColumns]
    public partial class message_template_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mtf_id.
        /// </summary>
        [Column]
        public int mtf_id { get; set; }

        /// <summary>
        /// Gets or sets the mtf_field.
        /// </summary>
        [Column]
        public string mtf_field { get; set; }

        /// <summary>
        /// Gets or sets the mtf_query.
        /// </summary>
        [Column]
        public string mtf_query { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[MessageAttachment] table.
    /// </summary>
    [TableName("[dbo].[MessageAttachment]")]
    [PrimaryKey("MessageAttachmentId")]
    [ExplicitColumns]
    public partial class MessageAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the MessageAttachmentId.
        /// </summary>
        [Column]
        public long MessageAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the TrackedMessageId.
        /// </summary>
        [Column]
        public long TrackedMessageId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentVersionId.
        /// </summary>
        [Column]
        public long DocumentVersionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[MessageDistribution] table.
    /// </summary>
    [TableName("[dbo].[MessageDistribution]")]
    [PrimaryKey("MessageDistributionId")]
    [ExplicitColumns]
    public partial class MessageDistributionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the MessageDistributionId.
        /// </summary>
        [Column]
        public int MessageDistributionId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the CreatedByUserId.
        /// </summary>
        [Column]
        public int CreatedByUserId { get; set; }

        /// <summary>
        /// Gets or sets the CreatedTime.
        /// </summary>
        [Column]
        public DateTimeOffset CreatedTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[MessageRecipient] table.
    /// </summary>
    [TableName("[dbo].[MessageRecipient]")]
    [PrimaryKey("TrackedMessageId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class MessageRecipientRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TrackedMessageId.
        /// </summary>
        [Column]
        public long TrackedMessageId { get; set; }

        /// <summary>
        /// Gets or sets the RecipientPersonId.
        /// </summary>
        [Column]
        public int RecipientPersonId { get; set; }

        /// <summary>
        /// Gets or sets the DistributionPrivacyLevelId.
        /// </summary>
        [Column]
        public int DistributionPrivacyLevelId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[ml_adhoc_column]")]
    [PrimaryKey("mlahc_id")]
    [ExplicitColumns]
    public partial class ml_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlahc_id.
        /// </summary>
        [Column]
        public int mlahc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlahc_name.
        /// </summary>
        [Column]
        public string mlahc_name { get; set; }

        /// <summary>
        /// Gets or sets the mlahc_ahc_id.
        /// </summary>
        [Column]
        public int mlahc_ahc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlahc_mll_code.
        /// </summary>
        [Column]
        public string mlahc_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[ml_adhoc_field]")]
    [PrimaryKey("mlfld_id")]
    [ExplicitColumns]
    public partial class ml_adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlfld_id.
        /// </summary>
        [Column]
        public int mlfld_id { get; set; }

        /// <summary>
        /// Gets or sets the mlfld_name.
        /// </summary>
        [Column]
        public string mlfld_name { get; set; }

        /// <summary>
        /// Gets or sets the mlfld_fld_id.
        /// </summary>
        [Column]
        public int mlfld_fld_id { get; set; }

        /// <summary>
        /// Gets or sets the mlfld_mll_code.
        /// </summary>
        [Column]
        public string mlfld_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_auto_renewal] table.
    /// </summary>
    [TableName("[dbo].[ml_auto_renewal]")]
    [PrimaryKey("mlar_id")]
    [ExplicitColumns]
    public partial class ml_auto_renewalRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlar_id.
        /// </summary>
        [Column]
        public int mlar_id { get; set; }

        /// <summary>
        /// Gets or sets the mlar_name.
        /// </summary>
        [Column]
        public string mlar_name { get; set; }

        /// <summary>
        /// Gets or sets the mlar_ar_id.
        /// </summary>
        [Column]
        public int mlar_ar_id { get; set; }

        /// <summary>
        /// Gets or sets the mlar_mll_code.
        /// </summary>
        [Column]
        public string mlar_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_cc_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[ml_cc_adhoc_column]")]
    [PrimaryKey("mlccac_id")]
    [ExplicitColumns]
    public partial class ml_cc_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlccac_id.
        /// </summary>
        [Column]
        public int mlccac_id { get; set; }

        /// <summary>
        /// Gets or sets the mlccac_name.
        /// </summary>
        [Column]
        public string mlccac_name { get; set; }

        /// <summary>
        /// Gets or sets the mlccac_ccac_id.
        /// </summary>
        [Column]
        public int mlccac_ccac_id { get; set; }

        /// <summary>
        /// Gets or sets the mlccac_mll_code.
        /// </summary>
        [Column]
        public string mlccac_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_cc_adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[ml_cc_adhoc_field]")]
    [PrimaryKey("mlccfld_id")]
    [ExplicitColumns]
    public partial class ml_cc_adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlccfld_id.
        /// </summary>
        [Column]
        public int mlccfld_id { get; set; }

        /// <summary>
        /// Gets or sets the mlccfld_name.
        /// </summary>
        [Column]
        public string mlccfld_name { get; set; }

        /// <summary>
        /// Gets or sets the mlccfld_ccfld_id.
        /// </summary>
        [Column]
        public int mlccfld_ccfld_id { get; set; }

        /// <summary>
        /// Gets or sets the mlccfld_mll_code.
        /// </summary>
        [Column]
        public string mlccfld_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_cc_requisition_form] table.
    /// </summary>
    [TableName("[dbo].[ml_cc_requisition_form]")]
    [PrimaryKey("mlccrf_id")]
    [ExplicitColumns]
    public partial class ml_cc_requisition_formRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlccrf_id.
        /// </summary>
        [Column]
        public int mlccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the mlccrf_ccrf_id.
        /// </summary>
        [Column]
        public int mlccrf_ccrf_id { get; set; }

        /// <summary>
        /// Gets or sets the mlccrf_mll_code.
        /// </summary>
        [Column]
        public string mlccrf_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the mlccrf_instructions.
        /// </summary>
        [Column]
        public string mlccrf_instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_ccv_bundle] table.
    /// </summary>
    [TableName("[dbo].[ml_ccv_bundle]")]
    [PrimaryKey("mlb_id")]
    [ExplicitColumns]
    public partial class ml_ccv_bundleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlb_id.
        /// </summary>
        [Column]
        public int mlb_id { get; set; }

        /// <summary>
        /// Gets or sets the mlb_bundle_id.
        /// </summary>
        [Column]
        public int mlb_bundle_id { get; set; }

        /// <summary>
        /// Gets or sets the mlb_display.
        /// </summary>
        [Column]
        public string mlb_display { get; set; }

        /// <summary>
        /// Gets or sets the mlb_mll_code.
        /// </summary>
        [Column]
        public string mlb_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_ccv_category] table.
    /// </summary>
    [TableName("[dbo].[ml_ccv_category]")]
    [PrimaryKey("mlc_id")]
    [ExplicitColumns]
    public partial class ml_ccv_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlc_id.
        /// </summary>
        [Column]
        public int mlc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlc_category_id.
        /// </summary>
        [Column]
        public int mlc_category_id { get; set; }

        /// <summary>
        /// Gets or sets the mlc_display.
        /// </summary>
        [Column]
        public string mlc_display { get; set; }

        /// <summary>
        /// Gets or sets the mlc_mll_code.
        /// </summary>
        [Column]
        public string mlc_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_ccv_country] table.
    /// </summary>
    [TableName("[dbo].[ml_ccv_country]")]
    [PrimaryKey("mlc_id")]
    [ExplicitColumns]
    public partial class ml_ccv_countryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlc_id.
        /// </summary>
        [Column]
        public int mlc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlc_country_id.
        /// </summary>
        [Column]
        public int mlc_country_id { get; set; }

        /// <summary>
        /// Gets or sets the mlc_display.
        /// </summary>
        [Column]
        public string mlc_display { get; set; }

        /// <summary>
        /// Gets or sets the mlc_mll_code.
        /// </summary>
        [Column]
        public string mlc_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_ccv_county] table.
    /// </summary>
    [TableName("[dbo].[ml_ccv_county]")]
    [PrimaryKey("mlcn_id")]
    [ExplicitColumns]
    public partial class ml_ccv_countyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcn_id.
        /// </summary>
        [Column]
        public int mlcn_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcn_county_id.
        /// </summary>
        [Column]
        public int mlcn_county_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcn_display.
        /// </summary>
        [Column]
        public string mlcn_display { get; set; }

        /// <summary>
        /// Gets or sets the mlcn_mll_code.
        /// </summary>
        [Column]
        public string mlcn_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_ccv_criteria] table.
    /// </summary>
    [TableName("[dbo].[ml_ccv_criteria]")]
    [PrimaryKey("mlc_id")]
    [ExplicitColumns]
    public partial class ml_ccv_criteriumRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlc_id.
        /// </summary>
        [Column]
        public int mlc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlc_criteria_id.
        /// </summary>
        [Column]
        public int mlc_criteria_id { get; set; }

        /// <summary>
        /// Gets or sets the mlc_display.
        /// </summary>
        [Column]
        public string mlc_display { get; set; }

        /// <summary>
        /// Gets or sets the mlc_mll_code.
        /// </summary>
        [Column]
        public string mlc_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_ccv_state] table.
    /// </summary>
    [TableName("[dbo].[ml_ccv_state]")]
    [PrimaryKey("mls_id")]
    [ExplicitColumns]
    public partial class ml_ccv_stateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mls_id.
        /// </summary>
        [Column]
        public int mls_id { get; set; }

        /// <summary>
        /// Gets or sets the mls_state_id.
        /// </summary>
        [Column]
        public int mls_state_id { get; set; }

        /// <summary>
        /// Gets or sets the mls_display.
        /// </summary>
        [Column]
        public string mls_display { get; set; }

        /// <summary>
        /// Gets or sets the mls_mll_code.
        /// </summary>
        [Column]
        public string mls_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_ccv_sub_category] table.
    /// </summary>
    [TableName("[dbo].[ml_ccv_sub_category]")]
    [PrimaryKey("mlsc_id")]
    [ExplicitColumns]
    public partial class ml_ccv_sub_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlsc_id.
        /// </summary>
        [Column]
        public int mlsc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlsc_sub_category_id.
        /// </summary>
        [Column]
        public int mlsc_sub_category_id { get; set; }

        /// <summary>
        /// Gets or sets the mlsc_display.
        /// </summary>
        [Column]
        public string mlsc_display { get; set; }

        /// <summary>
        /// Gets or sets the mlsc_mll_code.
        /// </summary>
        [Column]
        public string mlsc_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_ccv_template] table.
    /// </summary>
    [TableName("[dbo].[ml_ccv_template]")]
    [PrimaryKey("mlt_id")]
    [ExplicitColumns]
    public partial class ml_ccv_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlt_id.
        /// </summary>
        [Column]
        public int mlt_id { get; set; }

        /// <summary>
        /// Gets or sets the mlt_template_id.
        /// </summary>
        [Column]
        public int mlt_template_id { get; set; }

        /// <summary>
        /// Gets or sets the mlt_display.
        /// </summary>
        [Column]
        public string mlt_display { get; set; }

        /// <summary>
        /// Gets or sets the mlt_mll_code.
        /// </summary>
        [Column]
        public string mlt_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_coids_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[ml_coids_adhoc_column]")]
    [PrimaryKey("mlcac_id")]
    [ExplicitColumns]
    public partial class ml_coids_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcac_id.
        /// </summary>
        [Column]
        public int mlcac_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcac_name.
        /// </summary>
        [Column]
        public string mlcac_name { get; set; }

        /// <summary>
        /// Gets or sets the mlcac_cac_id.
        /// </summary>
        [Column]
        public int mlcac_cac_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcac_mll_code.
        /// </summary>
        [Column]
        public string mlcac_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_compliance_answer] table.
    /// </summary>
    [TableName("[dbo].[ml_compliance_answer]")]
    [PrimaryKey("mlca_id")]
    [ExplicitColumns]
    public partial class ml_compliance_answerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlca_id.
        /// </summary>
        [Column]
        public int mlca_id { get; set; }

        /// <summary>
        /// Gets or sets the mlca_name.
        /// </summary>
        [Column]
        public string mlca_name { get; set; }

        /// <summary>
        /// Gets or sets the mlca_ca_id.
        /// </summary>
        [Column]
        public int mlca_ca_id { get; set; }

        /// <summary>
        /// Gets or sets the mlca_mll_code.
        /// </summary>
        [Column]
        public string mlca_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_compliance_question] table.
    /// </summary>
    [TableName("[dbo].[ml_compliance_question]")]
    [PrimaryKey("mlcq_id")]
    [ExplicitColumns]
    public partial class ml_compliance_questionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcq_id.
        /// </summary>
        [Column]
        public int mlcq_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcq_text.
        /// </summary>
        [Column]
        public string mlcq_text { get; set; }

        /// <summary>
        /// Gets or sets the mlcq_view_name.
        /// </summary>
        [Column]
        public string mlcq_view_name { get; set; }

        /// <summary>
        /// Gets or sets the mlcq_cq_id.
        /// </summary>
        [Column]
        public int mlcq_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcq_mll_code.
        /// </summary>
        [Column]
        public string mlcq_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_contract_note_type] table.
    /// </summary>
    [TableName("[dbo].[ml_contract_note_type]")]
    [PrimaryKey("mlcnt_id")]
    [ExplicitColumns]
    public partial class ml_contract_note_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcnt_id.
        /// </summary>
        [Column]
        public int mlcnt_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcnt_name.
        /// </summary>
        [Column]
        public string mlcnt_name { get; set; }

        /// <summary>
        /// Gets or sets the mlcnt_cnt_id.
        /// </summary>
        [Column]
        public int mlcnt_cnt_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcnt_mll_code.
        /// </summary>
        [Column]
        public string mlcnt_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_contract_type] table.
    /// </summary>
    [TableName("[dbo].[ml_contract_type]")]
    [PrimaryKey("mlt_id")]
    [ExplicitColumns]
    public partial class ml_contract_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlt_id.
        /// </summary>
        [Column]
        public int mlt_id { get; set; }

        /// <summary>
        /// Gets or sets the mlt_name.
        /// </summary>
        [Column]
        public string mlt_name { get; set; }

        /// <summary>
        /// Gets or sets the mlt_t_id.
        /// </summary>
        [Column]
        public int mlt_t_id { get; set; }

        /// <summary>
        /// Gets or sets the mlt_mll_code.
        /// </summary>
        [Column]
        public string mlt_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_country] table.
    /// </summary>
    [TableName("[dbo].[ml_country]")]
    [PrimaryKey("mlc_id")]
    [ExplicitColumns]
    public partial class ml_countryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlc_id.
        /// </summary>
        [Column]
        public int mlc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlc_name.
        /// </summary>
        [Column]
        public string mlc_name { get; set; }

        /// <summary>
        /// Gets or sets the mlc_cty_id.
        /// </summary>
        [Column]
        public int mlc_cty_id { get; set; }

        /// <summary>
        /// Gets or sets the mlc_mll_code.
        /// </summary>
        [Column]
        public string mlc_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_custom_field] table.
    /// </summary>
    [TableName("[dbo].[ml_custom_field]")]
    [PrimaryKey("mlcf_id")]
    [ExplicitColumns]
    public partial class ml_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcf_id.
        /// </summary>
        [Column]
        public int mlcf_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcf_cf_id.
        /// </summary>
        [Column]
        public int mlcf_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcf_name.
        /// </summary>
        [Column]
        public string mlcf_name { get; set; }

        /// <summary>
        /// Gets or sets the mlcf_tooltip.
        /// </summary>
        [Column]
        public string mlcf_tooltip { get; set; }

        /// <summary>
        /// Gets or sets the mlcf_mll_code.
        /// </summary>
        [Column]
        public string mlcf_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_custom_field_columns] table.
    /// </summary>
    [TableName("[dbo].[ml_custom_field_columns]")]
    [PrimaryKey("mlcfc_id")]
    [ExplicitColumns]
    public partial class ml_custom_field_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcfc_id.
        /// </summary>
        [Column]
        public int mlcfc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcfc_cfc_id.
        /// </summary>
        [Column]
        public int mlcfc_cfc_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcfc_name.
        /// </summary>
        [Column]
        public string mlcfc_name { get; set; }

        /// <summary>
        /// Gets or sets the mlcfc_mll_code.
        /// </summary>
        [Column]
        public string mlcfc_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the mlcfc_instructions.
        /// </summary>
        [Column]
        public string mlcfc_instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_custom_field_parameter] table.
    /// </summary>
    [TableName("[dbo].[ml_custom_field_parameter]")]
    [PrimaryKey("mlcfp_id")]
    [ExplicitColumns]
    public partial class ml_custom_field_parameterRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcfp_id.
        /// </summary>
        [Column]
        public int mlcfp_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcfp_cfp_id.
        /// </summary>
        [Column]
        public int mlcfp_cfp_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcfp_output.
        /// </summary>
        [Column]
        public string mlcfp_output { get; set; }

        /// <summary>
        /// Gets or sets the mlcfp_mll_code.
        /// </summary>
        [Column]
        public string mlcfp_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_custom_field_sections] table.
    /// </summary>
    [TableName("[dbo].[ml_custom_field_sections]")]
    [PrimaryKey("mlcfs_id")]
    [ExplicitColumns]
    public partial class ml_custom_field_sectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcfs_id.
        /// </summary>
        [Column]
        public int mlcfs_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcfs_cfs_id.
        /// </summary>
        [Column]
        public int mlcfs_cfs_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcfs_name.
        /// </summary>
        [Column]
        public string mlcfs_name { get; set; }

        /// <summary>
        /// Gets or sets the mlcfs_mll_code.
        /// </summary>
        [Column]
        public string mlcfs_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the mlcfs_instructions.
        /// </summary>
        [Column]
        public string mlcfs_instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_custom_field_tabs] table.
    /// </summary>
    [TableName("[dbo].[ml_custom_field_tabs]")]
    [PrimaryKey("mlcft_id")]
    [ExplicitColumns]
    public partial class ml_custom_field_tabRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcft_id.
        /// </summary>
        [Column]
        public int mlcft_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcft_cft_id.
        /// </summary>
        [Column]
        public int mlcft_cft_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcft_name.
        /// </summary>
        [Column]
        public string mlcft_name { get; set; }

        /// <summary>
        /// Gets or sets the mlcft_mll_code.
        /// </summary>
        [Column]
        public string mlcft_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the mlcft_instructions.
        /// </summary>
        [Column]
        public string mlcft_instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_custom_field_values] table.
    /// </summary>
    [TableName("[dbo].[ml_custom_field_values]")]
    [PrimaryKey("mlcfv_id")]
    [ExplicitColumns]
    public partial class ml_custom_field_valueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlcfv_id.
        /// </summary>
        [Column]
        public int mlcfv_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcfv_cf_id.
        /// </summary>
        [Column]
        public int mlcfv_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the mlcfv_value.
        /// </summary>
        [Column]
        public string mlcfv_value { get; set; }

        /// <summary>
        /// Gets or sets the mlcfv_sort.
        /// </summary>
        [Column]
        public int? mlcfv_sort { get; set; }

        /// <summary>
        /// Gets or sets the mlcfv_mll_code.
        /// </summary>
        [Column]
        public string mlcfv_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the mlcfv_archived.
        /// </summary>
        [Column]
        public bool mlcfv_archived { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_department] table.
    /// </summary>
    [TableName("[dbo].[ml_department]")]
    [PrimaryKey("mld_id")]
    [ExplicitColumns]
    public partial class ml_departmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mld_id.
        /// </summary>
        [Column]
        public int mld_id { get; set; }

        /// <summary>
        /// Gets or sets the mld_name.
        /// </summary>
        [Column]
        public string mld_name { get; set; }

        /// <summary>
        /// Gets or sets the mld_d_id.
        /// </summary>
        [Column]
        public int mld_d_id { get; set; }

        /// <summary>
        /// Gets or sets the mld_mll_code.
        /// </summary>
        [Column]
        public string mld_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_externallinks] table.
    /// </summary>
    [TableName("[dbo].[ml_externallinks]")]
    [PrimaryKey("mlextlnk_id")]
    [ExplicitColumns]
    public partial class ml_externallinkRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlextlnk_id.
        /// </summary>
        [Column]
        public int mlextlnk_id { get; set; }

        /// <summary>
        /// Gets or sets the mlextlnk_name.
        /// </summary>
        [Column]
        public string mlextlnk_name { get; set; }

        /// <summary>
        /// Gets or sets the mlextlnk_extlinks_id.
        /// </summary>
        [Column]
        public int mlextlnk_extlinks_id { get; set; }

        /// <summary>
        /// Gets or sets the mlextlnk_mll_code.
        /// </summary>
        [Column]
        public string mlextlnk_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the ml_extlnk_url.
        /// </summary>
        [Column]
        public string ml_extlnk_url { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_extra_field_definition] table.
    /// </summary>
    [TableName("[dbo].[ml_extra_field_definition]")]
    [PrimaryKey("mlefd_id")]
    [ExplicitColumns]
    public partial class ml_extra_field_definitionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlefd_id.
        /// </summary>
        [Column]
        public int mlefd_id { get; set; }

        /// <summary>
        /// Gets or sets the mlefd_name.
        /// </summary>
        [Column]
        public string mlefd_name { get; set; }

        /// <summary>
        /// Gets or sets the mlefd_efd_id.
        /// </summary>
        [Column]
        public int mlefd_efd_id { get; set; }

        /// <summary>
        /// Gets or sets the mlefd_mll_code.
        /// </summary>
        [Column]
        public string mlefd_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_field] table.
    /// </summary>
    [TableName("[dbo].[ml_field]")]
    [PrimaryKey("mlf_id")]
    [ExplicitColumns]
    public partial class ml_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlf_id.
        /// </summary>
        [Column]
        public int mlf_id { get; set; }

        /// <summary>
        /// Gets or sets the mlf_name.
        /// </summary>
        [Column]
        public string mlf_name { get; set; }

        /// <summary>
        /// Gets or sets the mlf_value.
        /// </summary>
        [Column]
        public string mlf_value { get; set; }

        /// <summary>
        /// Gets or sets the mlf_notes.
        /// </summary>
        [Column]
        public string mlf_notes { get; set; }

        /// <summary>
        /// Gets or sets the mlf_type.
        /// </summary>
        [Column]
        public int mlf_type { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_language] table.
    /// </summary>
    [TableName("[dbo].[ml_language]")]
    [PrimaryKey("mll_id")]
    [ExplicitColumns]
    public partial class ml_languageRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mll_id.
        /// </summary>
        [Column]
        public int mll_id { get; set; }

        /// <summary>
        /// Gets or sets the mll_code.
        /// </summary>
        [Column]
        public string mll_code { get; set; }

        /// <summary>
        /// Gets or sets the mll_name.
        /// </summary>
        [Column]
        public string mll_name { get; set; }

        /// <summary>
        /// Gets or sets the mll_description.
        /// </summary>
        [Column]
        public string mll_description { get; set; }

        /// <summary>
        /// Gets or sets the mll_direction.
        /// </summary>
        [Column]
        public int mll_direction { get; set; }

        /// <summary>
        /// Gets or sets the mll_supported.
        /// </summary>
        [Column]
        public bool mll_supported { get; set; }

        /// <summary>
        /// Gets or sets the mll_flag.
        /// </summary>
        [Column]
        public string mll_flag { get; set; }

        /// <summary>
        /// Gets or sets the mll_fullname_format.
        /// </summary>
        [Column]
        public string mll_fullname_format { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_lease_abstract_field_type] table.
    /// </summary>
    [TableName("[dbo].[ml_lease_abstract_field_type]")]
    [PrimaryKey("mllaft_id")]
    [ExplicitColumns]
    public partial class ml_lease_abstract_field_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mllaft_id.
        /// </summary>
        [Column]
        public int mllaft_id { get; set; }

        /// <summary>
        /// Gets or sets the mllaft_laft_id.
        /// </summary>
        [Column]
        public int mllaft_laft_id { get; set; }

        /// <summary>
        /// Gets or sets the mllaft_name.
        /// </summary>
        [Column]
        public string mllaft_name { get; set; }

        /// <summary>
        /// Gets or sets the mllaft_mll_code.
        /// </summary>
        [Column]
        public string mllaft_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_lease_abstract_table_lookup] table.
    /// </summary>
    [TableName("[dbo].[ml_lease_abstract_table_lookup]")]
    [PrimaryKey("mllatl_id")]
    [ExplicitColumns]
    public partial class ml_lease_abstract_table_lookupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mllatl_id.
        /// </summary>
        [Column]
        public int mllatl_id { get; set; }

        /// <summary>
        /// Gets or sets the mllatl_latl_id.
        /// </summary>
        [Column]
        public int mllatl_latl_id { get; set; }

        /// <summary>
        /// Gets or sets the mllatl_name.
        /// </summary>
        [Column]
        public string mllatl_name { get; set; }

        /// <summary>
        /// Gets or sets the mllatl_mll_code.
        /// </summary>
        [Column]
        public string mllatl_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_organization_contract_type] table.
    /// </summary>
    [TableName("[dbo].[ml_organization_contract_type]")]
    [PrimaryKey("mloct_id")]
    [ExplicitColumns]
    public partial class ml_organization_contract_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mloct_id.
        /// </summary>
        [Column]
        public int mloct_id { get; set; }

        /// <summary>
        /// Gets or sets the mloct_ot_id.
        /// </summary>
        [Column]
        public int mloct_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the mloct_mll_code.
        /// </summary>
        [Column]
        public string mloct_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the mloct_instructions.
        /// </summary>
        [Column]
        public string mloct_instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_organization_site] table.
    /// </summary>
    [TableName("[dbo].[ml_organization_site]")]
    [PrimaryKey("mlos_id")]
    [ExplicitColumns]
    public partial class ml_organization_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlos_id.
        /// </summary>
        [Column]
        public int mlos_id { get; set; }

        /// <summary>
        /// Gets or sets the mlos_name.
        /// </summary>
        [Column]
        public string mlos_name { get; set; }

        /// <summary>
        /// Gets or sets the mlos_s_id.
        /// </summary>
        [Column]
        public int mlos_s_id { get; set; }

        /// <summary>
        /// Gets or sets the mlos_mll_code.
        /// </summary>
        [Column]
        public string mlos_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_pm_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[ml_pm_adhoc_column]")]
    [PrimaryKey("mlpmac_id")]
    [ExplicitColumns]
    public partial class ml_pm_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlpmac_id.
        /// </summary>
        [Column]
        public int mlpmac_id { get; set; }

        /// <summary>
        /// Gets or sets the mlpmac_name.
        /// </summary>
        [Column]
        public string mlpmac_name { get; set; }

        /// <summary>
        /// Gets or sets the mlpmac_pmac_id.
        /// </summary>
        [Column]
        public int mlpmac_pmac_id { get; set; }

        /// <summary>
        /// Gets or sets the mlpmac_mll_code.
        /// </summary>
        [Column]
        public string mlpmac_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_role_type] table.
    /// </summary>
    [TableName("[dbo].[ml_role_type]")]
    [PrimaryKey("mlrt_id")]
    [ExplicitColumns]
    public partial class ml_role_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlrt_id.
        /// </summary>
        [Column]
        public int mlrt_id { get; set; }

        /// <summary>
        /// Gets or sets the mlrt_rt_id.
        /// </summary>
        [Column]
        public int mlrt_rt_id { get; set; }

        /// <summary>
        /// Gets or sets the mlrt_name.
        /// </summary>
        [Column]
        public string mlrt_name { get; set; }

        /// <summary>
        /// Gets or sets the mlrt_mll_code.
        /// </summary>
        [Column]
        public string mlrt_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_status] table.
    /// </summary>
    [TableName("[dbo].[ml_status]")]
    [PrimaryKey("mls_id")]
    [ExplicitColumns]
    public partial class ml_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mls_id.
        /// </summary>
        [Column]
        public int mls_id { get; set; }

        /// <summary>
        /// Gets or sets the mls_name.
        /// </summary>
        [Column]
        public string mls_name { get; set; }

        /// <summary>
        /// Gets or sets the mls_stat_id.
        /// </summary>
        [Column]
        public int mls_stat_id { get; set; }

        /// <summary>
        /// Gets or sets the mls_mll_code.
        /// </summary>
        [Column]
        public string mls_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_terminology] table.
    /// </summary>
    [TableName("[dbo].[ml_terminology]")]
    [PrimaryKey("mlt_id")]
    [ExplicitColumns]
    public partial class ml_terminologyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mlt_id.
        /// </summary>
        [Column]
        public int mlt_id { get; set; }

        /// <summary>
        /// Gets or sets the mlt_mll_code.
        /// </summary>
        [Column]
        public string mlt_mll_code { get; set; }

        /// <summary>
        /// Gets or sets the mlt_name.
        /// </summary>
        [Column]
        public string mlt_name { get; set; }

        /// <summary>
        /// Gets or sets the mlt_default.
        /// </summary>
        [Column]
        public bool mlt_default { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_terminology_field] table.
    /// </summary>
    [TableName("[dbo].[ml_terminology_field]")]
    [PrimaryKey("mltf_id")]
    [ExplicitColumns]
    public partial class ml_terminology_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mltf_id.
        /// </summary>
        [Column]
        public int mltf_id { get; set; }

        /// <summary>
        /// Gets or sets the mltf_mlt_id.
        /// </summary>
        [Column]
        public int mltf_mlt_id { get; set; }

        /// <summary>
        /// Gets or sets the mltf_mlf_id.
        /// </summary>
        [Column]
        public int mltf_mlf_id { get; set; }

        /// <summary>
        /// Gets or sets the mltf_value.
        /// </summary>
        [Column]
        public string mltf_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_terms_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[ml_terms_adhoc_column]")]
    [PrimaryKey("mltac_id")]
    [ExplicitColumns]
    public partial class ml_terms_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mltac_id.
        /// </summary>
        [Column]
        public int mltac_id { get; set; }

        /// <summary>
        /// Gets or sets the mltac_name.
        /// </summary>
        [Column]
        public string mltac_name { get; set; }

        /// <summary>
        /// Gets or sets the mltac_tac_id.
        /// </summary>
        [Column]
        public int mltac_tac_id { get; set; }

        /// <summary>
        /// Gets or sets the mltac_mll_code.
        /// </summary>
        [Column]
        public string mltac_mll_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ml_user_group_name] table.
    /// </summary>
    [TableName("[dbo].[ml_user_group_name]")]
    [PrimaryKey("mugn_id")]
    [ExplicitColumns]
    public partial class ml_user_group_nameRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mugn_id.
        /// </summary>
        [Column]
        public int mugn_id { get; set; }

        /// <summary>
        /// Gets or sets the mugn_ug_id.
        /// </summary>
        [Column]
        public int mugn_ug_id { get; set; }

        /// <summary>
        /// Gets or sets the mugn_ml_code.
        /// </summary>
        [Column]
        public string mugn_ml_code { get; set; }

        /// <summary>
        /// Gets or sets the mugn_name.
        /// </summary>
        [Column]
        public string mugn_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[month] table.
    /// </summary>
    [TableName("[dbo].[month]")]
    [PrimaryKey("mth_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class monthRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the mth_id.
        /// </summary>
        [Column]
        public int mth_id { get; set; }

        /// <summary>
        /// Gets or sets the mth_name.
        /// </summary>
        [Column]
        public string mth_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[naics_code] table.
    /// </summary>
    [TableName("[dbo].[naics_code]")]
    [PrimaryKey("nc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class naics_codeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the nc_id.
        /// </summary>
        [Column]
        public int nc_id { get; set; }

        /// <summary>
        /// Gets or sets the nc_code.
        /// </summary>
        [Column]
        public string nc_code { get; set; }

        /// <summary>
        /// Gets or sets the nc_name.
        /// </summary>
        [Column]
        public string nc_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[nightly_notification_trigger_log] table.
    /// </summary>
    [TableName("[dbo].[nightly_notification_trigger_log]")]
    [PrimaryKey("nntl_id")]
    [ExplicitColumns]
    public partial class nightly_notification_trigger_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the nntl_id.
        /// </summary>
        [Column]
        public int nntl_id { get; set; }

        /// <summary>
        /// Gets or sets the nntl_trigger_date.
        /// </summary>
        [Column]
        public DateTime nntl_trigger_date { get; set; }

        /// <summary>
        /// Gets or sets the nntl_recipients.
        /// </summary>
        [Column]
        public string nntl_recipients { get; set; }

        /// <summary>
        /// Gets or sets the nntl_subject.
        /// </summary>
        [Column]
        public string nntl_subject { get; set; }

        /// <summary>
        /// Gets or sets the nntl_body.
        /// </summary>
        [Column]
        public string nntl_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[notification_trigger] table.
    /// </summary>
    [TableName("[dbo].[notification_trigger]")]
    [PrimaryKey("nt_id")]
    [ExplicitColumns]
    public partial class notification_triggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the nt_id.
        /// </summary>
        [Column]
        public int nt_id { get; set; }

        /// <summary>
        /// Gets or sets the nt_name.
        /// </summary>
        [Column]
        public string nt_name { get; set; }

        /// <summary>
        /// Gets or sets the nt_o_id.
        /// </summary>
        [Column]
        public int nt_o_id { get; set; }

        /// <summary>
        /// Gets or sets the nt_ot_id.
        /// </summary>
        [Column]
        public int nt_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the nt_ocf_id.
        /// </summary>
        [Column]
        public int nt_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the nt_trigger_type.
        /// </summary>
        [Column]
        public int? nt_trigger_type { get; set; }

        /// <summary>
        /// Gets or sets the nt_daily.
        /// </summary>
        [Column]
        public bool nt_daily { get; set; }

        /// <summary>
        /// Gets or sets the nt_daily_until_days.
        /// </summary>
        [Column]
        public int? nt_daily_until_days { get; set; }

        /// <summary>
        /// Gets or sets the nt_daily_after_days.
        /// </summary>
        [Column]
        public int? nt_daily_after_days { get; set; }

        /// <summary>
        /// Gets or sets the nt_schedule_days.
        /// </summary>
        [Column]
        public string nt_schedule_days { get; set; }

        /// <summary>
        /// Gets or sets the nt_message_subject.
        /// </summary>
        [Column]
        public string nt_message_subject { get; set; }

        /// <summary>
        /// Gets or sets the nt_message_body.
        /// </summary>
        [Column]
        public string nt_message_body { get; set; }

        /// <summary>
        /// Gets or sets the nt_ntr_id.
        /// </summary>
        [Column]
        public int? nt_ntr_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[notification_trigger_parameter] table.
    /// </summary>
    [TableName("[dbo].[notification_trigger_parameter]")]
    [ExplicitColumns]
    public partial class notification_trigger_parameterRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ntp_id.
        /// </summary>
        [Column]
        public int ntp_id { get; set; }

        /// <summary>
        /// Gets or sets the ntp_nt_id.
        /// </summary>
        [Column]
        public int ntp_nt_id { get; set; }

        /// <summary>
        /// Gets or sets the ntp_gate_type.
        /// </summary>
        [Column]
        public int ntp_gate_type { get; set; }

        /// <summary>
        /// Gets or sets the ntp_parent_id.
        /// </summary>
        [Column]
        public int? ntp_parent_id { get; set; }

        /// <summary>
        /// Gets or sets the ntp_operator.
        /// </summary>
        [Column]
        public string ntp_operator { get; set; }

        /// <summary>
        /// Gets or sets the ntp_value.
        /// </summary>
        [Column]
        public string ntp_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[notification_trigger_recipient] table.
    /// </summary>
    [TableName("[dbo].[notification_trigger_recipient]")]
    [PrimaryKey("ntr_id")]
    [ExplicitColumns]
    public partial class notification_trigger_recipientRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ntr_id.
        /// </summary>
        [Column]
        public int ntr_id { get; set; }

        /// <summary>
        /// Gets or sets the ntr_users.
        /// </summary>
        [Column]
        public string ntr_users { get; set; }

        /// <summary>
        /// Gets or sets the ntr_roles.
        /// </summary>
        [Column]
        public string ntr_roles { get; set; }

        /// <summary>
        /// Gets or sets the ntr_oug_id.
        /// </summary>
        [Column]
        public int? ntr_oug_id { get; set; }

        /// <summary>
        /// Gets or sets the ntr_rp_primary.
        /// </summary>
        [Column]
        public bool ntr_rp_primary { get; set; }

        /// <summary>
        /// Gets or sets the ntr_rp_secondary.
        /// </summary>
        [Column]
        public bool ntr_rp_secondary { get; set; }

        /// <summary>
        /// Gets or sets the ntr_rp_tertiary.
        /// </summary>
        [Column]
        public bool ntr_rp_tertiary { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization] table.
    /// </summary>
    [TableName("[dbo].[organization]")]
    [PrimaryKey("o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organizationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the o_id.
        /// </summary>
        [Column]
        public int o_id { get; set; }

        /// <summary>
        /// Gets or sets the o_name.
        /// </summary>
        [Column]
        public string o_name { get; set; }

        /// <summary>
        /// Gets or sets the o_product.
        /// </summary>
        [Column]
        public string o_product { get; set; }

        /// <summary>
        /// Gets or sets the o_hostname.
        /// </summary>
        [Column]
        public string o_hostname { get; set; }

        /// <summary>
        /// Gets or sets the o_path_contracts.
        /// </summary>
        [Column]
        public string o_path_contracts { get; set; }

        /// <summary>
        /// Gets or sets the o_path_workflow.
        /// </summary>
        [Column]
        public string o_path_workflow { get; set; }

        /// <summary>
        /// Gets or sets the o_path_coids.
        /// </summary>
        [Column]
        public string o_path_coids { get; set; }

        /// <summary>
        /// Gets or sets the o_terms_over.
        /// </summary>
        [Column]
        public int o_terms_over { get; set; }

        /// <summary>
        /// Gets or sets the o_terms_under.
        /// </summary>
        [Column]
        public int o_terms_under { get; set; }

        /// <summary>
        /// Gets or sets the o_terms_delay.
        /// </summary>
        [Column]
        public int o_terms_delay { get; set; }

        /// <summary>
        /// Gets or sets the o_ce_exp.
        /// </summary>
        [Column]
        public bool o_ce_exp { get; set; }

        /// <summary>
        /// Gets or sets the o_ce_exp_coi.
        /// </summary>
        [Column]
        public bool o_ce_exp_coi { get; set; }

        /// <summary>
        /// Gets or sets the o_ce_cd.
        /// </summary>
        [Column]
        public bool o_ce_cd { get; set; }

        /// <summary>
        /// Gets or sets the o_ce_new.
        /// </summary>
        [Column]
        public bool o_ce_new { get; set; }

        /// <summary>
        /// Gets or sets the o_ce_to_v.
        /// </summary>
        [Column]
        public bool o_ce_to_v { get; set; }

        /// <summary>
        /// Gets or sets the o_ce_terms_3rd.
        /// </summary>
        [Column]
        public bool o_ce_terms_3rd { get; set; }

        /// <summary>
        /// Gets or sets the o_sname.
        /// </summary>
        [Column]
        public string o_sname { get; set; }

        /// <summary>
        /// Gets or sets the o_o_id.
        /// </summary>
        [Column]
        public int? o_o_id { get; set; }

        /// <summary>
        /// Gets or sets the o_user_admin.
        /// </summary>
        [Column]
        public int? o_user_admin { get; set; }

        /// <summary>
        /// Gets or sets the o_cemail_on_off.
        /// </summary>
        [Column]
        public short o_cemail_on_off { get; set; }

        /// <summary>
        /// Gets or sets the o_activate_users.
        /// </summary>
        [Column]
        public short o_activate_users { get; set; }

        /// <summary>
        /// Gets or sets the o_session_timeout.
        /// </summary>
        [Column]
        public int o_session_timeout { get; set; }

        /// <summary>
        /// Gets or sets the o_app_id.
        /// </summary>
        [Column]
        public int o_app_id { get; set; }

        /// <summary>
        /// Gets or sets the o_session_timeout_redirect.
        /// </summary>
        [Column]
        public string o_session_timeout_redirect { get; set; }

        /// <summary>
        /// Gets or sets the o_password_complexity.
        /// </summary>
        [Column]
        public string o_password_complexity { get; set; }

        /// <summary>
        /// Gets or sets the o_ce_exp_baa.
        /// </summary>
        [Column]
        public bool o_ce_exp_baa { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_cemail_on_off.
        /// </summary>
        [Column]
        public short o_min_role_cemail_on_off { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_lease_abstract.
        /// </summary>
        [Column]
        public short o_min_role_lease_abstract { get; set; }

        /// <summary>
        /// Gets or sets the o_search_results_limit.
        /// </summary>
        [Column]
        public short o_search_results_limit { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_reorder_attachments.
        /// </summary>
        [Column]
        public short o_min_role_reorder_attachments { get; set; }

        /// <summary>
        /// Gets or sets the o_sort.
        /// </summary>
        [Column]
        public short o_sort { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_schedule_reports.
        /// </summary>
        [Column]
        public short o_min_role_schedule_reports { get; set; }

        /// <summary>
        /// Gets or sets the o_default_abstract_template_id.
        /// </summary>
        [Column]
        public int? o_default_abstract_template_id { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_unprotect_document.
        /// </summary>
        [Column]
        public short o_min_role_unprotect_document { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_search_pending_contracts.
        /// </summary>
        [Column]
        public short o_min_role_search_pending_contracts { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_to_see_summary_reports.
        /// </summary>
        [Column]
        public short o_min_role_to_see_summary_reports { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_manage_custom_fields.
        /// </summary>
        [Column]
        public short o_min_role_manage_custom_fields { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_create_calculable_custom_fields.
        /// </summary>
        [Column]
        public short o_min_role_create_calculable_custom_fields { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_copy_custom_field_layouts.
        /// </summary>
        [Column]
        public short o_min_role_copy_custom_field_layouts { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_edit_permission_groups.
        /// </summary>
        [Column]
        public short o_min_role_edit_permission_groups { get; set; }

        /// <summary>
        /// Gets or sets the o_billing_id.
        /// </summary>
        [Column]
        public string o_billing_id { get; set; }

        /// <summary>
        /// Gets or sets the o_billing_comments.
        /// </summary>
        [Column]
        public string o_billing_comments { get; set; }

        /// <summary>
        /// Gets or sets the o_vef_o_id.
        /// </summary>
        [Column]
        public int? o_vef_o_id { get; set; }

        /// <summary>
        /// Gets or sets the o_coids_o_id.
        /// </summary>
        [Column]
        public int? o_coids_o_id { get; set; }

        /// <summary>
        /// Gets or sets the o_terms_o_id.
        /// </summary>
        [Column]
        public int? o_terms_o_id { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_to_suppress_coi_baa_emails.
        /// </summary>
        [Column]
        public short o_min_role_to_suppress_coi_baa_emails { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_view_implementation_wizard.
        /// </summary>
        [Column]
        public short o_min_role_view_implementation_wizard { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_forward_reviews.
        /// </summary>
        [Column]
        public short o_min_role_forward_reviews { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_forward_reviews_to_other_users.
        /// </summary>
        [Column]
        public short o_min_role_forward_reviews_to_other_users { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_access_process_manager.
        /// </summary>
        [Column]
        public short o_min_role_access_process_manager { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_proxy_reviewers.
        /// </summary>
        [Column]
        public short o_min_role_proxy_reviewers { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_out_of_office_message.
        /// </summary>
        [Column]
        public short o_min_role_out_of_office_message { get; set; }

        /// <summary>
        /// Gets or sets the o_theme_version.
        /// </summary>
        [Column]
        public int o_theme_version { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_access_vendor_payables.
        /// </summary>
        [Column]
        public short o_min_role_access_vendor_payables { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_access_vendor_reconciliation.
        /// </summary>
        [Column]
        public short o_min_role_access_vendor_reconciliation { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_delete_collaborator_documents.
        /// </summary>
        [Column]
        public int o_min_role_delete_collaborator_documents { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_archive_collaborator_documents.
        /// </summary>
        [Column]
        public int o_min_role_archive_collaborator_documents { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_delete_process.
        /// </summary>
        [Column]
        public short o_min_role_delete_process { get; set; }

        /// <summary>
        /// Gets or sets the o_word_pwd.
        /// </summary>
        [Column]
        public string o_word_pwd { get; set; }

        /// <summary>
        /// Gets or sets the o_external_party_pwd.
        /// </summary>
        [Column]
        public string o_external_party_pwd { get; set; }

        /// <summary>
        /// Gets or sets the o_contract_permissions_error.
        /// </summary>
        [Column]
        public string o_contract_permissions_error { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_access_pm_reports.
        /// </summary>
        [Column]
        public int o_min_role_access_pm_reports { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_view_workflow_maintenance.
        /// </summary>
        [Column]
        public short o_min_role_view_workflow_maintenance { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_archive_process_manager_workflows.
        /// </summary>
        [Column]
        public short o_min_role_archive_process_manager_workflows { get; set; }

        /// <summary>
        /// Gets or sets the o_terms_max_number_of_approvers.
        /// </summary>
        [Column]
        public short o_terms_max_number_of_approvers { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_copy_user_permissions.
        /// </summary>
        [Column]
        public short o_min_role_copy_user_permissions { get; set; }

        /// <summary>
        /// Gets or sets the o_min_role_archive_contracts.
        /// </summary>
        [Column]
        public short o_min_role_archive_contracts { get; set; }

        /// <summary>
        /// Gets or sets the o_role_manager.
        /// </summary>
        [Column]
        public short o_role_manager { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[organization_adhoc_column]")]
    [PrimaryKey("oac_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oac_o_id.
        /// </summary>
        [Column]
        public int oac_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oac_ahc_id.
        /// </summary>
        [Column]
        public int oac_ahc_id { get; set; }

        /// <summary>
        /// Gets or sets the oac_required.
        /// </summary>
        [Column]
        public bool oac_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_adhoc_field] table.
    /// </summary>
    [TableName("[dbo].[organization_adhoc_field]")]
    [PrimaryKey("oaf_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_adhoc_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oaf_o_id.
        /// </summary>
        [Column]
        public int oaf_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oaf_fld_id.
        /// </summary>
        [Column]
        public int oaf_fld_id { get; set; }

        /// <summary>
        /// Gets or sets the oaf_sort.
        /// </summary>
        [Column]
        public int? oaf_sort { get; set; }

        /// <summary>
        /// Gets or sets the oaf_required.
        /// </summary>
        [Column]
        public bool oaf_required { get; set; }

        /// <summary>
        /// Gets or sets the oaf_category.
        /// </summary>
        [Column]
        public string oaf_category { get; set; }

        /// <summary>
        /// Gets or sets the oaf_adddocs.
        /// </summary>
        [Column]
        public bool? oaf_adddocs { get; set; }

        /// <summary>
        /// Gets or sets the oaf_required_cc.
        /// </summary>
        [Column]
        public bool oaf_required_cc { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_admin_contact_info] table.
    /// </summary>
    [TableName("[dbo].[organization_admin_contact_info]")]
    [PrimaryKey("oaci_id")]
    [ExplicitColumns]
    public partial class organization_admin_contact_infoRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oaci_id.
        /// </summary>
        [Column]
        public int oaci_id { get; set; }

        /// <summary>
        /// Gets or sets the oaci_o_id.
        /// </summary>
        [Column]
        public int oaci_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oaci_main_contact.
        /// </summary>
        [Column]
        public int oaci_main_contact { get; set; }

        /// <summary>
        /// Gets or sets the oaci_u_id.
        /// </summary>
        [Column]
        public int oaci_u_id { get; set; }

        /// <summary>
        /// Gets or sets the oaci_job_title.
        /// </summary>
        [Column]
        public string oaci_job_title { get; set; }

        /// <summary>
        /// Gets or sets the oaci_phone.
        /// </summary>
        [Column]
        public string oaci_phone { get; set; }

        /// <summary>
        /// Gets or sets the oaci_fax.
        /// </summary>
        [Column]
        public string oaci_fax { get; set; }

        /// <summary>
        /// Gets or sets the oaci_email.
        /// </summary>
        [Column]
        public string oaci_email { get; set; }

        /// <summary>
        /// Gets or sets the oaci_comments.
        /// </summary>
        [Column]
        public string oaci_comments { get; set; }

        /// <summary>
        /// Gets or sets the oaci_changed_by.
        /// </summary>
        [Column]
        public string oaci_changed_by { get; set; }

        /// <summary>
        /// Gets or sets the oaci_changed_date.
        /// </summary>
        [Column]
        public DateTime oaci_changed_date { get; set; }

        /// <summary>
        /// Gets or sets the oaci_changed_notes.
        /// </summary>
        [Column]
        public string oaci_changed_notes { get; set; }

        /// <summary>
        /// Gets or sets the oaci_street1.
        /// </summary>
        [Column]
        public string oaci_street1 { get; set; }

        /// <summary>
        /// Gets or sets the oaci_street2.
        /// </summary>
        [Column]
        public string oaci_street2 { get; set; }

        /// <summary>
        /// Gets or sets the oaci_city.
        /// </summary>
        [Column]
        public string oaci_city { get; set; }

        /// <summary>
        /// Gets or sets the oaci_state.
        /// </summary>
        [Column]
        public string oaci_state { get; set; }

        /// <summary>
        /// Gets or sets the oaci_zip.
        /// </summary>
        [Column]
        public string oaci_zip { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_alert_baa_expiration] table.
    /// </summary>
    [TableName("[dbo].[organization_alert_baa_expiration]")]
    [PrimaryKey("oabaae_id")]
    [ExplicitColumns]
    public partial class organization_alert_baa_expirationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oabaae_id.
        /// </summary>
        [Column]
        public int oabaae_id { get; set; }

        /// <summary>
        /// Gets or sets the oabaae_o_id.
        /// </summary>
        [Column]
        public int oabaae_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oabaae_day.
        /// </summary>
        [Column]
        public int oabaae_day { get; set; }

        /// <summary>
        /// Gets or sets the oabaae_suppress_primary.
        /// </summary>
        [Column]
        public bool? oabaae_suppress_primary { get; set; }

        /// <summary>
        /// Gets or sets the oabaae_suppress_secondary.
        /// </summary>
        [Column]
        public bool? oabaae_suppress_secondary { get; set; }

        /// <summary>
        /// Gets or sets the oabaae_suppress_third.
        /// </summary>
        [Column]
        public bool? oabaae_suppress_third { get; set; }

        /// <summary>
        /// Gets or sets the oabaae_suppress_additional.
        /// </summary>
        [Column]
        public bool? oabaae_suppress_additional { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_alert_certificate_expiration] table.
    /// </summary>
    [TableName("[dbo].[organization_alert_certificate_expiration]")]
    [PrimaryKey("oacee_id")]
    [ExplicitColumns]
    public partial class organization_alert_certificate_expirationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oacee_id.
        /// </summary>
        [Column]
        public int oacee_id { get; set; }

        /// <summary>
        /// Gets or sets the oacee_o_id.
        /// </summary>
        [Column]
        public int oacee_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oacee_day.
        /// </summary>
        [Column]
        public int oacee_day { get; set; }

        /// <summary>
        /// Gets or sets the oacee_suppress_primary.
        /// </summary>
        [Column]
        public bool? oacee_suppress_primary { get; set; }

        /// <summary>
        /// Gets or sets the oacee_suppress_secondary.
        /// </summary>
        [Column]
        public bool? oacee_suppress_secondary { get; set; }

        /// <summary>
        /// Gets or sets the oacee_suppress_third.
        /// </summary>
        [Column]
        public bool? oacee_suppress_third { get; set; }

        /// <summary>
        /// Gets or sets the oacee_suppress_additional.
        /// </summary>
        [Column]
        public bool? oacee_suppress_additional { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_alert_contract_critical_date] table.
    /// </summary>
    [TableName("[dbo].[organization_alert_contract_critical_date]")]
    [PrimaryKey("oaccd_id")]
    [ExplicitColumns]
    public partial class organization_alert_contract_critical_dateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oaccd_id.
        /// </summary>
        [Column]
        public int oaccd_id { get; set; }

        /// <summary>
        /// Gets or sets the oaccd_o_id.
        /// </summary>
        [Column]
        public int oaccd_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oaccd_day.
        /// </summary>
        [Column]
        public int oaccd_day { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_alert_contract_destruction] table.
    /// </summary>
    [TableName("[dbo].[organization_alert_contract_destruction]")]
    [PrimaryKey("oacd_id")]
    [ExplicitColumns]
    public partial class organization_alert_contract_destructionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oacd_id.
        /// </summary>
        [Column]
        public int oacd_id { get; set; }

        /// <summary>
        /// Gets or sets the oacd_o_id.
        /// </summary>
        [Column]
        public int oacd_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oacd_day.
        /// </summary>
        [Column]
        public int oacd_day { get; set; }

        /// <summary>
        /// Gets or sets the oacd_suppress_primary.
        /// </summary>
        [Column]
        public bool? oacd_suppress_primary { get; set; }

        /// <summary>
        /// Gets or sets the oacd_suppress_secondary.
        /// </summary>
        [Column]
        public bool? oacd_suppress_secondary { get; set; }

        /// <summary>
        /// Gets or sets the oacd_suppress_third.
        /// </summary>
        [Column]
        public bool? oacd_suppress_third { get; set; }

        /// <summary>
        /// Gets or sets the oacd_suppress_additional.
        /// </summary>
        [Column]
        public bool? oacd_suppress_additional { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_alert_contract_expiration] table.
    /// </summary>
    [TableName("[dbo].[organization_alert_contract_expiration]")]
    [PrimaryKey("oace_id")]
    [ExplicitColumns]
    public partial class organization_alert_contract_expirationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oace_id.
        /// </summary>
        [Column]
        public int oace_id { get; set; }

        /// <summary>
        /// Gets or sets the oace_o_id.
        /// </summary>
        [Column]
        public int oace_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oace_day.
        /// </summary>
        [Column]
        public int oace_day { get; set; }

        /// <summary>
        /// Gets or sets the oace_suppress_primary.
        /// </summary>
        [Column]
        public bool? oace_suppress_primary { get; set; }

        /// <summary>
        /// Gets or sets the oace_suppress_secondary.
        /// </summary>
        [Column]
        public bool? oace_suppress_secondary { get; set; }

        /// <summary>
        /// Gets or sets the oace_suppress_third.
        /// </summary>
        [Column]
        public bool? oace_suppress_third { get; set; }

        /// <summary>
        /// Gets or sets the oace_suppress_additional.
        /// </summary>
        [Column]
        public bool? oace_suppress_additional { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_billing] table.
    /// </summary>
    [TableName("[dbo].[organization_billing]")]
    [PrimaryKey("ob_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_billingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ob_o_id.
        /// </summary>
        [Column]
        public int ob_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ob_cust_no.
        /// </summary>
        [Column]
        public string ob_cust_no { get; set; }

        /// <summary>
        /// Gets or sets the ob_date_complete.
        /// </summary>
        [Column]
        public DateTime ob_date_complete { get; set; }

        /// <summary>
        /// Gets or sets the ob_date_signed.
        /// </summary>
        [Column]
        public DateTime ob_date_signed { get; set; }

        /// <summary>
        /// Gets or sets the ob_date_scaned.
        /// </summary>
        [Column]
        public DateTime ob_date_scaned { get; set; }

        /// <summary>
        /// Gets or sets the ob_date_trained.
        /// </summary>
        [Column]
        public string ob_date_trained { get; set; }

        /// <summary>
        /// Gets or sets the ob_acct_exec.
        /// </summary>
        [Column]
        public string ob_acct_exec { get; set; }

        /// <summary>
        /// Gets or sets the ob_calc_method.
        /// </summary>
        [Column]
        public int ob_calc_method { get; set; }

        /// <summary>
        /// Gets or sets the ob_taxable.
        /// </summary>
        [Column]
        public int ob_taxable { get; set; }

        /// <summary>
        /// Gets or sets the ob_bill_line_1.
        /// </summary>
        [Column]
        public string ob_bill_line_1 { get; set; }

        /// <summary>
        /// Gets or sets the ob_bill_line_2.
        /// </summary>
        [Column]
        public string ob_bill_line_2 { get; set; }

        /// <summary>
        /// Gets or sets the ob_bill_city.
        /// </summary>
        [Column]
        public string ob_bill_city { get; set; }

        /// <summary>
        /// Gets or sets the ob_bill_state.
        /// </summary>
        [Column]
        public string ob_bill_state { get; set; }

        /// <summary>
        /// Gets or sets the ob_bill_zip.
        /// </summary>
        [Column]
        public string ob_bill_zip { get; set; }

        /// <summary>
        /// Gets or sets the ob_per_k_c.
        /// </summary>
        [Column]
        public decimal ob_per_k_c { get; set; }

        /// <summary>
        /// Gets or sets the ob_per_k_e.
        /// </summary>
        [Column]
        public decimal ob_per_k_e { get; set; }

        /// <summary>
        /// Gets or sets the ob_per_k_a.
        /// </summary>
        [Column]
        public decimal ob_per_k_a { get; set; }

        /// <summary>
        /// Gets or sets the ob_mth.
        /// </summary>
        [Column]
        public decimal ob_mth { get; set; }

        /// <summary>
        /// Gets or sets the ob_mth_max.
        /// </summary>
        [Column]
        public int ob_mth_max { get; set; }

        /// <summary>
        /// Gets or sets the ob_mth_overage.
        /// </summary>
        [Column]
        public decimal ob_mth_overage { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_a_start.
        /// </summary>
        [Column]
        public int ob_vol_a_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_a_end.
        /// </summary>
        [Column]
        public int ob_vol_a_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_a_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_a_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_a_min.
        /// </summary>
        [Column]
        public decimal ob_vol_a_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_b_start.
        /// </summary>
        [Column]
        public int ob_vol_b_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_b_end.
        /// </summary>
        [Column]
        public int ob_vol_b_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_b_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_b_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_b_max.
        /// </summary>
        [Column]
        public decimal ob_vol_b_max { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_b_min.
        /// </summary>
        [Column]
        public decimal ob_vol_b_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_c_start.
        /// </summary>
        [Column]
        public int ob_vol_c_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_c_end.
        /// </summary>
        [Column]
        public int ob_vol_c_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_c_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_c_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_c_min.
        /// </summary>
        [Column]
        public decimal ob_vol_c_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_d_start.
        /// </summary>
        [Column]
        public int ob_vol_d_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_d_end.
        /// </summary>
        [Column]
        public int ob_vol_d_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_d_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_d_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_d_min.
        /// </summary>
        [Column]
        public decimal ob_vol_d_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_e_start.
        /// </summary>
        [Column]
        public int ob_vol_e_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_e_end.
        /// </summary>
        [Column]
        public int ob_vol_e_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_e_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_e_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_e_min.
        /// </summary>
        [Column]
        public decimal ob_vol_e_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_f_start.
        /// </summary>
        [Column]
        public int ob_vol_f_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_f_end.
        /// </summary>
        [Column]
        public int ob_vol_f_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_f_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_f_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_f_min.
        /// </summary>
        [Column]
        public decimal ob_vol_f_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_g_start.
        /// </summary>
        [Column]
        public int ob_vol_g_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_g_end.
        /// </summary>
        [Column]
        public int ob_vol_g_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_g_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_g_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_g_min.
        /// </summary>
        [Column]
        public decimal ob_vol_g_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_h_start.
        /// </summary>
        [Column]
        public int ob_vol_h_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_h_end.
        /// </summary>
        [Column]
        public int ob_vol_h_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_h_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_h_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_h_min.
        /// </summary>
        [Column]
        public decimal ob_vol_h_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_i_start.
        /// </summary>
        [Column]
        public int ob_vol_i_start { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_i_end.
        /// </summary>
        [Column]
        public int ob_vol_i_end { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_i_amt.
        /// </summary>
        [Column]
        public decimal ob_vol_i_amt { get; set; }

        /// <summary>
        /// Gets or sets the ob_vol_i_min.
        /// </summary>
        [Column]
        public decimal ob_vol_i_min { get; set; }

        /// <summary>
        /// Gets or sets the ob_formula.
        /// </summary>
        [Column]
        public string ob_formula { get; set; }

        /// <summary>
        /// Gets or sets the ob_mth_extra.
        /// </summary>
        [Column]
        public decimal? ob_mth_extra { get; set; }

        /// <summary>
        /// Gets or sets the ob_mth_extra_desc.
        /// </summary>
        [Column]
        public string ob_mth_extra_desc { get; set; }

        /// <summary>
        /// Gets or sets the ob_po_no.
        /// </summary>
        [Column]
        public string ob_po_no { get; set; }

        /// <summary>
        /// Gets or sets the ob_billing_name.
        /// </summary>
        [Column]
        public string ob_billing_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_compliance_question] table.
    /// </summary>
    [TableName("[dbo].[organization_compliance_question]")]
    [PrimaryKey("occ_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_compliance_questionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the occ_o_id.
        /// </summary>
        [Column]
        public int occ_o_id { get; set; }

        /// <summary>
        /// Gets or sets the occ_cq_id.
        /// </summary>
        [Column]
        public int occ_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the occ_required.
        /// </summary>
        [Column]
        public bool occ_required { get; set; }

        /// <summary>
        /// Gets or sets the occ_sort.
        /// </summary>
        [Column]
        public int occ_sort { get; set; }

        /// <summary>
        /// Gets or sets the occ_adddocs.
        /// </summary>
        [Column]
        public bool? occ_adddocs { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_contract_type] table.
    /// </summary>
    [TableName("[dbo].[organization_contract_type]")]
    [PrimaryKey("ot_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_contract_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ot_id.
        /// </summary>
        [Column]
        public int ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ot_o_id.
        /// </summary>
        [Column]
        public int ot_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ot_t_id.
        /// </summary>
        [Column]
        public int ot_t_id { get; set; }

        /// <summary>
        /// Gets or sets the ot_tat.
        /// </summary>
        [Column]
        public int ot_tat { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_contract_type_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[organization_contract_type_adhoc_column]")]
    [PrimaryKey("octac_id")]
    [ExplicitColumns]
    public partial class organization_contract_type_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the octac_id.
        /// </summary>
        [Column]
        public int octac_id { get; set; }

        /// <summary>
        /// Gets or sets the octac_ot_id.
        /// </summary>
        [Column]
        public int octac_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the octac_ahc_id.
        /// </summary>
        [Column]
        public int octac_ahc_id { get; set; }

        /// <summary>
        /// Gets or sets the octac_required.
        /// </summary>
        [Column]
        public bool octac_required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_contract_type_compliance_question] table.
    /// </summary>
    [TableName("[dbo].[organization_contract_type_compliance_question]")]
    [PrimaryKey("octcq_id")]
    [ExplicitColumns]
    public partial class organization_contract_type_compliance_questionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the octcq_id.
        /// </summary>
        [Column]
        public int octcq_id { get; set; }

        /// <summary>
        /// Gets or sets the octcq_ot_id.
        /// </summary>
        [Column]
        public int octcq_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the octcq_cq_id.
        /// </summary>
        [Column]
        public int octcq_cq_id { get; set; }

        /// <summary>
        /// Gets or sets the octcq_required.
        /// </summary>
        [Column]
        public bool octcq_required { get; set; }

        /// <summary>
        /// Gets or sets the octcq_sort.
        /// </summary>
        [Column]
        public int octcq_sort { get; set; }

        /// <summary>
        /// Gets or sets the octcq_adddocs.
        /// </summary>
        [Column]
        public bool? octcq_adddocs { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_custom_fields] table.
    /// </summary>
    [TableName("[dbo].[organization_custom_fields]")]
    [PrimaryKey("ocf_id")]
    [ExplicitColumns]
    public partial class organization_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ocf_id.
        /// </summary>
        [Column]
        public int ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the ocf_cf_id.
        /// </summary>
        [Column]
        public int ocf_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the ocf_ot_id.
        /// </summary>
        [Column]
        public int ocf_ot_id { get; set; }

        /// <summary>
        /// Gets or sets the ocf_display_behavior.
        /// </summary>
        [Column]
        public int? ocf_display_behavior { get; set; }

        /// <summary>
        /// Gets or sets the ocf_required.
        /// </summary>
        [Column]
        public bool ocf_required { get; set; }

        /// <summary>
        /// Gets or sets the ocf_cft_id.
        /// </summary>
        [Column]
        public int? ocf_cft_id { get; set; }

        /// <summary>
        /// Gets or sets the ocf_cfs_id.
        /// </summary>
        [Column]
        public int? ocf_cfs_id { get; set; }

        /// <summary>
        /// Gets or sets the ocf_cfc_id.
        /// </summary>
        [Column]
        public int? ocf_cfc_id { get; set; }

        /// <summary>
        /// Gets or sets the ocf_sort.
        /// </summary>
        [Column]
        public int ocf_sort { get; set; }

        /// <summary>
        /// Gets or sets the ocf_visible.
        /// </summary>
        [Column]
        public bool ocf_visible { get; set; }

        /// <summary>
        /// Gets or sets the ocf_required_on_submit.
        /// </summary>
        [Column]
        public bool ocf_required_on_submit { get; set; }

        /// <summary>
        /// Gets or sets the ocf_is_layout_field.
        /// </summary>
        [Column]
        public bool ocf_is_layout_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_department] table.
    /// </summary>
    [TableName("[dbo].[organization_department]")]
    [PrimaryKey("od_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_departmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the od_id.
        /// </summary>
        [Column]
        public int od_id { get; set; }

        /// <summary>
        /// Gets or sets the od_o_id.
        /// </summary>
        [Column]
        public int od_o_id { get; set; }

        /// <summary>
        /// Gets or sets the od_d_id.
        /// </summary>
        [Column]
        public int od_d_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_email_series] table.
    /// </summary>
    [TableName("[dbo].[organization_email_series]")]
    [PrimaryKey("oes_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_email_seriesRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oes_o_id.
        /// </summary>
        [Column]
        public int oes_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oes_es_id.
        /// </summary>
        [Column]
        public int oes_es_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_entity] table.
    /// </summary>
    [TableName("[dbo].[organization_entity]")]
    [PrimaryKey("e_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_entityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the e_id.
        /// </summary>
        [Column]
        public int e_id { get; set; }

        /// <summary>
        /// Gets or sets the e_name.
        /// </summary>
        [Column]
        public string e_name { get; set; }

        /// <summary>
        /// Gets or sets the e_o_id.
        /// </summary>
        [Column]
        public int e_o_id { get; set; }

        /// <summary>
        /// Gets or sets the e_ref_no.
        /// </summary>
        [Column]
        public string e_ref_no { get; set; }

        /// <summary>
        /// Gets or sets the e_sname.
        /// </summary>
        [Column]
        public string e_sname { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_external_links] table.
    /// </summary>
    [TableName("[dbo].[organization_external_links]")]
    [PrimaryKey("oextlk_id")]
    [ExplicitColumns]
    public partial class organization_external_linkRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oextlk_id.
        /// </summary>
        [Column]
        public int oextlk_id { get; set; }

        /// <summary>
        /// Gets or sets the oextlk_o_id.
        /// </summary>
        [Column]
        public int oextlk_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oextlk_extlk_id.
        /// </summary>
        [Column]
        public int oextlk_extlk_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_option] table.
    /// </summary>
    [TableName("[dbo].[organization_option]")]
    [PrimaryKey("oo_id")]
    [ExplicitColumns]
    public partial class organization_optionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oo_id.
        /// </summary>
        [Column]
        public int oo_id { get; set; }

        /// <summary>
        /// Gets or sets the oo_o_id.
        /// </summary>
        [Column]
        public int oo_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oo_oot_id.
        /// </summary>
        [Column]
        public int oo_oot_id { get; set; }

        /// <summary>
        /// Gets or sets the oo_value.
        /// </summary>
        [Column]
        public int oo_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_option_type] table.
    /// </summary>
    [TableName("[dbo].[organization_option_type]")]
    [PrimaryKey("oot_id")]
    [ExplicitColumns]
    public partial class organization_option_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oot_id.
        /// </summary>
        [Column]
        public int oot_id { get; set; }

        /// <summary>
        /// Gets or sets the oot_name.
        /// </summary>
        [Column]
        public string oot_name { get; set; }

        /// <summary>
        /// Gets or sets the oot_category.
        /// </summary>
        [Column]
        public string oot_category { get; set; }

        /// <summary>
        /// Gets or sets the oot_synopsis.
        /// </summary>
        [Column]
        public string oot_synopsis { get; set; }

        /// <summary>
        /// Gets or sets the oot_app_id.
        /// </summary>
        [Column]
        public string oot_app_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_process_role] table.
    /// </summary>
    [TableName("[dbo].[organization_process_role]")]
    [PrimaryKey("opr_id")]
    [ExplicitColumns]
    public partial class organization_process_roleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the opr_id.
        /// </summary>
        [Column]
        public int opr_id { get; set; }

        /// <summary>
        /// Gets or sets the opr_ort_id.
        /// </summary>
        [Column]
        public int opr_ort_id { get; set; }

        /// <summary>
        /// Gets or sets the opr_od_id.
        /// </summary>
        [Column]
        public int? opr_od_id { get; set; }

        /// <summary>
        /// Gets or sets the opr_roles.
        /// </summary>
        [Column]
        public string opr_roles { get; set; }

        /// <summary>
        /// Gets or sets the opr_s_id.
        /// </summary>
        [Column]
        public int? opr_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_process_role_user] table.
    /// </summary>
    [TableName("[dbo].[organization_process_role_user]")]
    [PrimaryKey("opru_id")]
    [ExplicitColumns]
    public partial class organization_process_role_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the opru_id.
        /// </summary>
        [Column]
        public int opru_id { get; set; }

        /// <summary>
        /// Gets or sets the opru_opr_id.
        /// </summary>
        [Column]
        public int opru_opr_id { get; set; }

        /// <summary>
        /// Gets or sets the opru_u_id.
        /// </summary>
        [Column]
        public int opru_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_role_type] table.
    /// </summary>
    [TableName("[dbo].[organization_role_type]")]
    [PrimaryKey("ort_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_role_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ort_id.
        /// </summary>
        [Column]
        public int ort_id { get; set; }

        /// <summary>
        /// Gets or sets the ort_o_id.
        /// </summary>
        [Column]
        public int ort_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ort_rt_id.
        /// </summary>
        [Column]
        public int ort_rt_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_setting] table.
    /// </summary>
    [TableName("[dbo].[organization_setting]")]
    [PrimaryKey("os_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_settingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the os_o_id.
        /// </summary>
        [Column]
        public int os_o_id { get; set; }

        /// <summary>
        /// Gets or sets the os_ccn_state.
        /// </summary>
        [Column]
        public int os_ccn_state { get; set; }

        /// <summary>
        /// Gets or sets the os_ccn_order.
        /// </summary>
        [Column]
        public int os_ccn_order { get; set; }

        /// <summary>
        /// Gets or sets the os_ccn_delimit.
        /// </summary>
        [Column]
        public string os_ccn_delimit { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_site] table.
    /// </summary>
    [TableName("[dbo].[organization_site]")]
    [PrimaryKey("s_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the s_id.
        /// </summary>
        [Column]
        public int s_id { get; set; }

        /// <summary>
        /// Gets or sets the s_o_id.
        /// </summary>
        [Column]
        public int s_o_id { get; set; }

        /// <summary>
        /// Gets or sets the s_sqf.
        /// </summary>
        [Column]
        public long s_sqf { get; set; }

        /// <summary>
        /// Gets or sets the s_name.
        /// </summary>
        [Column]
        public string s_name { get; set; }

        /// <summary>
        /// Gets or sets the s_sname.
        /// </summary>
        [Column]
        public string s_sname { get; set; }

        /// <summary>
        /// Gets or sets the s_ref_no.
        /// </summary>
        [Column]
        public string s_ref_no { get; set; }

        /// <summary>
        /// Gets or sets the s_addr1.
        /// </summary>
        [Column]
        public string s_addr1 { get; set; }

        /// <summary>
        /// Gets or sets the s_addr2.
        /// </summary>
        [Column]
        public string s_addr2 { get; set; }

        /// <summary>
        /// Gets or sets the s_city.
        /// </summary>
        [Column]
        public string s_city { get; set; }

        /// <summary>
        /// Gets or sets the s_state.
        /// </summary>
        [Column]
        public string s_state { get; set; }

        /// <summary>
        /// Gets or sets the s_zip.
        /// </summary>
        [Column]
        public string s_zip { get; set; }

        /// <summary>
        /// Gets or sets the s_con_lname.
        /// </summary>
        [Column]
        public string s_con_lname { get; set; }

        /// <summary>
        /// Gets or sets the s_con_fname.
        /// </summary>
        [Column]
        public string s_con_fname { get; set; }

        /// <summary>
        /// Gets or sets the s_con_phone.
        /// </summary>
        [Column]
        public string s_con_phone { get; set; }

        /// <summary>
        /// Gets or sets the s_con_fax.
        /// </summary>
        [Column]
        public string s_con_fax { get; set; }

        /// <summary>
        /// Gets or sets the s_con_mobile.
        /// </summary>
        [Column]
        public string s_con_mobile { get; set; }

        /// <summary>
        /// Gets or sets the s_con_pager.
        /// </summary>
        [Column]
        public string s_con_pager { get; set; }

        /// <summary>
        /// Gets or sets the s_con_email.
        /// </summary>
        [Column]
        public string s_con_email { get; set; }

        /// <summary>
        /// Gets or sets the s_day_budget.
        /// </summary>
        [Column]
        public int? s_day_budget { get; set; }

        /// <summary>
        /// Gets or sets the s_day_mth_rpt.
        /// </summary>
        [Column]
        public int? s_day_mth_rpt { get; set; }

        /// <summary>
        /// Gets or sets the s_property_name.
        /// </summary>
        [Column]
        public string s_property_name { get; set; }

        /// <summary>
        /// Gets or sets the s_county.
        /// </summary>
        [Column]
        public string s_county { get; set; }

        /// <summary>
        /// Gets or sets the s_project_type.
        /// </summary>
        [Column]
        public string s_project_type { get; set; }

        /// <summary>
        /// Gets or sets the s_year_built.
        /// </summary>
        [Column]
        public int? s_year_built { get; set; }

        /// <summary>
        /// Gets or sets the s_msa.
        /// </summary>
        [Column]
        public string s_msa { get; set; }

        /// <summary>
        /// Gets or sets the s_park.
        /// </summary>
        [Column]
        public string s_park { get; set; }

        /// <summary>
        /// Gets or sets the s_territory.
        /// </summary>
        [Column]
        public string s_territory { get; set; }

        /// <summary>
        /// Gets or sets the s_region.
        /// </summary>
        [Column]
        public string s_region { get; set; }

        /// <summary>
        /// Gets or sets the s_portfolio.
        /// </summary>
        [Column]
        public string s_portfolio { get; set; }

        /// <summary>
        /// Gets or sets the s_landlord.
        /// </summary>
        [Column]
        public string s_landlord { get; set; }

        /// <summary>
        /// Gets or sets the s_owner.
        /// </summary>
        [Column]
        public string s_owner { get; set; }

        /// <summary>
        /// Gets or sets the s_budget_completed.
        /// </summary>
        [Column]
        public int? s_budget_completed { get; set; }

        /// <summary>
        /// Gets or sets the s_status.
        /// </summary>
        [Column]
        public string s_status { get; set; }

        /// <summary>
        /// Gets or sets the s_date_sold.
        /// </summary>
        [Column]
        public string s_date_sold { get; set; }

        /// <summary>
        /// Gets or sets the s_leasing.
        /// </summary>
        [Column]
        public int? s_leasing { get; set; }

        /// <summary>
        /// Gets or sets the s_management_type.
        /// </summary>
        [Column]
        public string s_management_type { get; set; }

        /// <summary>
        /// Gets or sets the s_roll_over_date.
        /// </summary>
        [Column]
        public string s_roll_over_date { get; set; }

        /// <summary>
        /// Gets or sets the s_latitude.
        /// </summary>
        [Column]
        public double? s_latitude { get; set; }

        /// <summary>
        /// Gets or sets the s_longitude.
        /// </summary>
        [Column]
        public double? s_longitude { get; set; }

        /// <summary>
        /// Gets or sets the s_sitecount.
        /// </summary>
        [Column]
        public int? s_sitecount { get; set; }

        /// <summary>
        /// Gets or sets the s_tenantcount.
        /// </summary>
        [Column]
        public int? s_tenantcount { get; set; }

        /// <summary>
        /// Gets or sets the s_cty_id.
        /// </summary>
        [Column]
        public int? s_cty_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_site_critical_date] table.
    /// </summary>
    [TableName("[dbo].[organization_site_critical_date]")]
    [PrimaryKey("scd_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_site_critical_dateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the scd_id.
        /// </summary>
        [Column]
        public int scd_id { get; set; }

        /// <summary>
        /// Gets or sets the scd_s_id.
        /// </summary>
        [Column]
        public int scd_s_id { get; set; }

        /// <summary>
        /// Gets or sets the scd_u_id_author.
        /// </summary>
        [Column]
        public int scd_u_id_author { get; set; }

        /// <summary>
        /// Gets or sets the scd_subject.
        /// </summary>
        [Column]
        public string scd_subject { get; set; }

        /// <summary>
        /// Gets or sets the scd_date.
        /// </summary>
        [Column]
        public DateTime? scd_date { get; set; }

        /// <summary>
        /// Gets or sets the scd_url.
        /// </summary>
        [Column]
        public string scd_url { get; set; }

        /// <summary>
        /// Gets or sets the scd_comment.
        /// </summary>
        [Column]
        public string scd_comment { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_special_instruction] table.
    /// </summary>
    [TableName("[dbo].[organization_special_instruction]")]
    [PrimaryKey("osi_id")]
    [ExplicitColumns]
    public partial class organization_special_instructionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the osi_id.
        /// </summary>
        [Column]
        public int osi_id { get; set; }

        /// <summary>
        /// Gets or sets the osi_o_id.
        /// </summary>
        [Column]
        public int osi_o_id { get; set; }

        /// <summary>
        /// Gets or sets the osi_property.
        /// </summary>
        [Column]
        public string osi_property { get; set; }

        /// <summary>
        /// Gets or sets the osi_display.
        /// </summary>
        [Column]
        public string osi_display { get; set; }

        /// <summary>
        /// Gets or sets the osi_instruction.
        /// </summary>
        [Column]
        public string osi_instruction { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_group] table.
    /// </summary>
    [TableName("[dbo].[organization_user_group]")]
    [PrimaryKey("oug_id")]
    [ExplicitColumns]
    public partial class organization_user_groupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the oug_id.
        /// </summary>
        [Column]
        public int oug_id { get; set; }

        /// <summary>
        /// Gets or sets the oug_o_id.
        /// </summary>
        [Column]
        public int oug_o_id { get; set; }

        /// <summary>
        /// Gets or sets the oug_ug_id.
        /// </summary>
        [Column]
        public int oug_ug_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_group_custom_field] table.
    /// </summary>
    [TableName("[dbo].[organization_user_group_custom_field]")]
    [PrimaryKey("ougcf_cf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_user_group_custom_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ougcf_cf_id.
        /// </summary>
        [Column]
        public int ougcf_cf_id { get; set; }

        /// <summary>
        /// Gets or sets the ougcf_oug_id.
        /// </summary>
        [Column]
        public int ougcf_oug_id { get; set; }

        /// <summary>
        /// Gets or sets the ougcf_access.
        /// </summary>
        [Column]
        public int ougcf_access { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_profile] table.
    /// </summary>
    [TableName("[dbo].[organization_user_profile]")]
    [PrimaryKey("up_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_user_profileRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the up_id.
        /// </summary>
        [Column]
        public int up_id { get; set; }

        /// <summary>
        /// Gets or sets the up_u_id.
        /// </summary>
        [Column]
        public int up_u_id { get; set; }

        /// <summary>
        /// Gets or sets the up_o_id.
        /// </summary>
        [Column]
        public int up_o_id { get; set; }

        /// <summary>
        /// Gets or sets the up_ur_id_contract.
        /// </summary>
        [Column]
        public int up_ur_id_contract { get; set; }

        /// <summary>
        /// Gets or sets the up_ur_id_workflow.
        /// </summary>
        [Column]
        public int up_ur_id_workflow { get; set; }

        /// <summary>
        /// Gets or sets the up_ur_id_execcom.
        /// </summary>
        [Column]
        public int up_ur_id_execcom { get; set; }

        /// <summary>
        /// Gets or sets the up_ur_id_terms.
        /// </summary>
        [Column]
        public int up_ur_id_terms { get; set; }

        /// <summary>
        /// Gets or sets the up_ur_id_coids.
        /// </summary>
        [Column]
        public int up_ur_id_coids { get; set; }

        /// <summary>
        /// Gets or sets the up_ur_id_cc.
        /// </summary>
        [Column]
        public int up_ur_id_cc { get; set; }

        /// <summary>
        /// Gets or sets the up_ccv_roles.
        /// </summary>
        [Column]
        public int up_ccv_roles { get; set; }

        /// <summary>
        /// Gets or sets the up_ur_id_ga.
        /// </summary>
        [Column]
        public int up_ur_id_ga { get; set; }

        /// <summary>
        /// Gets or sets the up_allow_esign.
        /// </summary>
        [Column]
        public bool up_allow_esign { get; set; }

        /// <summary>
        /// Gets or sets the up_ur_id_pm.
        /// </summary>
        [Column]
        public int up_ur_id_pm { get; set; }

        /// <summary>
        /// Gets or sets the up_override_pm_min_role.
        /// </summary>
        [Column]
        public bool up_override_pm_min_role { get; set; }

        /// <summary>
        /// Gets or sets the up_terms_sysadmin.
        /// </summary>
        [Column]
        public bool up_terms_sysadmin { get; set; }

        /// <summary>
        /// Gets or sets the up_pm_allow_signatory.
        /// </summary>
        [Column]
        public bool up_pm_allow_signatory { get; set; }

        /// <summary>
        /// Gets or sets the up_explicit_dashboard_access.
        /// </summary>
        [Column]
        public bool? up_explicit_dashboard_access { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_profile_attachment_category] table.
    /// </summary>
    [TableName("[dbo].[organization_user_profile_attachment_category]")]
    [PrimaryKey("upac_up_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_user_profile_attachment_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the upac_up_id.
        /// </summary>
        [Column]
        public int upac_up_id { get; set; }

        /// <summary>
        /// Gets or sets the upac_cnt_id.
        /// </summary>
        [Column]
        public int upac_cnt_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_profile_contract_type] table.
    /// </summary>
    [TableName("[dbo].[organization_user_profile_contract_type]")]
    [PrimaryKey("upct_up_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_user_profile_contract_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the upct_up_id.
        /// </summary>
        [Column]
        public int upct_up_id { get; set; }

        /// <summary>
        /// Gets or sets the upct_ot_id.
        /// </summary>
        [Column]
        public int upct_ot_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_profile_department] table.
    /// </summary>
    [TableName("[dbo].[organization_user_profile_department]")]
    [PrimaryKey("upd_up_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_user_profile_departmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the upd_up_id.
        /// </summary>
        [Column]
        public int upd_up_id { get; set; }

        /// <summary>
        /// Gets or sets the upd_od_id.
        /// </summary>
        [Column]
        public int upd_od_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_profile_entity] table.
    /// </summary>
    [TableName("[dbo].[organization_user_profile_entity]")]
    [PrimaryKey("upe_up_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_user_profile_entityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the upe_up_id.
        /// </summary>
        [Column]
        public int upe_up_id { get; set; }

        /// <summary>
        /// Gets or sets the upe_e_id.
        /// </summary>
        [Column]
        public int upe_e_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_profile_externallinks] table.
    /// </summary>
    [TableName("[dbo].[organization_user_profile_externallinks]")]
    [PrimaryKey("upextlnk_up_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_user_profile_externallinkRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the upextlnk_up_id.
        /// </summary>
        [Column]
        public int upextlnk_up_id { get; set; }

        /// <summary>
        /// Gets or sets the upextlnk_oextlk_id.
        /// </summary>
        [Column]
        public int upextlnk_oextlk_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_profile_page_access] table.
    /// </summary>
    [TableName("[dbo].[organization_user_profile_page_access]")]
    [PrimaryKey("ouppa_id")]
    [ExplicitColumns]
    public partial class organization_user_profile_page_accessRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ouppa_id.
        /// </summary>
        [Column]
        public int ouppa_id { get; set; }

        /// <summary>
        /// Gets or sets the ouppa_page_url.
        /// </summary>
        [Column]
        public string ouppa_page_url { get; set; }

        /// <summary>
        /// Gets or sets the ouppa_minimum_role.
        /// </summary>
        [Column]
        public int ouppa_minimum_role { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[organization_user_profile_site] table.
    /// </summary>
    [TableName("[dbo].[organization_user_profile_site]")]
    [PrimaryKey("ups_up_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class organization_user_profile_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ups_up_id.
        /// </summary>
        [Column]
        public int ups_up_id { get; set; }

        /// <summary>
        /// Gets or sets the ups_s_id.
        /// </summary>
        [Column]
        public int ups_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[OrganizationAnnouncement] table.
    /// </summary>
    [TableName("[dbo].[OrganizationAnnouncement]")]
    [PrimaryKey("OrganizationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class OrganizationAnnouncementRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the OrganizationId.
        /// </summary>
        [Column]
        public int OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the AnnouncementId.
        /// </summary>
        [Column]
        public int AnnouncementId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[OrganizationDocumentType] table.
    /// </summary>
    [TableName("[dbo].[OrganizationDocumentType]")]
    [PrimaryKey("OrganizationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class OrganizationDocumentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the OrganizationId.
        /// </summary>
        [Column]
        public int OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentTypeId.
        /// </summary>
        [Column]
        public int DocumentTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[OrganizationUserProfileDocumentType] table.
    /// </summary>
    [TableName("[dbo].[OrganizationUserProfileDocumentType]")]
    [PrimaryKey("OrganizationUserProfileId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class OrganizationUserProfileDocumentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the OrganizationUserProfileId.
        /// </summary>
        [Column]
        public int OrganizationUserProfileId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentTypeId.
        /// </summary>
        [Column]
        public int DocumentTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[payment_registry] table.
    /// </summary>
    [TableName("[dbo].[payment_registry]")]
    [PrimaryKey("pr_id")]
    [ExplicitColumns]
    public partial class payment_registryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pr_id.
        /// </summary>
        [Column]
        public int pr_id { get; set; }

        /// <summary>
        /// Gets or sets the pr_v_id.
        /// </summary>
        [Column]
        public int pr_v_id { get; set; }

        /// <summary>
        /// Gets or sets the pr_c_id.
        /// </summary>
        [Column]
        public int pr_c_id { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar1.
        /// </summary>
        [Column]
        public string pr_varchar1 { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar2.
        /// </summary>
        [Column]
        public string pr_varchar2 { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar3.
        /// </summary>
        [Column]
        public string pr_varchar3 { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar4.
        /// </summary>
        [Column]
        public string pr_varchar4 { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar5.
        /// </summary>
        [Column]
        public string pr_varchar5 { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar6.
        /// </summary>
        [Column]
        public string pr_varchar6 { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar7.
        /// </summary>
        [Column]
        public string pr_varchar7 { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar8.
        /// </summary>
        [Column]
        public string pr_varchar8 { get; set; }

        /// <summary>
        /// Gets or sets the pr_varchar9.
        /// </summary>
        [Column]
        public string pr_varchar9 { get; set; }

        /// <summary>
        /// Gets or sets the pr_date1.
        /// </summary>
        [Column]
        public DateTime? pr_date1 { get; set; }

        /// <summary>
        /// Gets or sets the pr_date2.
        /// </summary>
        [Column]
        public DateTime? pr_date2 { get; set; }

        /// <summary>
        /// Gets or sets the pr_date3.
        /// </summary>
        [Column]
        public DateTime? pr_date3 { get; set; }

        /// <summary>
        /// Gets or sets the pr_money1.
        /// </summary>
        [Column]
        public decimal? pr_money1 { get; set; }

        /// <summary>
        /// Gets or sets the pr_money2.
        /// </summary>
        [Column]
        public decimal? pr_money2 { get; set; }

        /// <summary>
        /// Gets or sets the pr_money3.
        /// </summary>
        [Column]
        public decimal? pr_money3 { get; set; }

        /// <summary>
        /// Gets or sets the pr_money4.
        /// </summary>
        [Column]
        public decimal? pr_money4 { get; set; }

        /// <summary>
        /// Gets or sets the pr_int1.
        /// </summary>
        [Column]
        public int? pr_int1 { get; set; }

        /// <summary>
        /// Gets or sets the pr_money1_currency_code.
        /// </summary>
        [Column]
        public string pr_money1_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the pr_money2_currency_code.
        /// </summary>
        [Column]
        public string pr_money2_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the pr_money3_currency_code.
        /// </summary>
        [Column]
        public string pr_money3_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the pr_money4_currency_code.
        /// </summary>
        [Column]
        public string pr_money4_currency_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[payment_vendor] table.
    /// </summary>
    [TableName("[dbo].[payment_vendor]")]
    [PrimaryKey("pv_id")]
    [ExplicitColumns]
    public partial class payment_vendorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pv_id.
        /// </summary>
        [Column]
        public int pv_id { get; set; }

        /// <summary>
        /// Gets or sets the pv_vps_id.
        /// </summary>
        [Column]
        public int pv_vps_id { get; set; }

        /// <summary>
        /// Gets or sets the pv_ref_number.
        /// </summary>
        [Column]
        public string pv_ref_number { get; set; }

        /// <summary>
        /// Gets or sets the pv_name.
        /// </summary>
        [Column]
        public string pv_name { get; set; }

        /// <summary>
        /// Gets or sets the pv_addr_1.
        /// </summary>
        [Column]
        public string pv_addr_1 { get; set; }

        /// <summary>
        /// Gets or sets the pv_addr_2.
        /// </summary>
        [Column]
        public string pv_addr_2 { get; set; }

        /// <summary>
        /// Gets or sets the pv_city.
        /// </summary>
        [Column]
        public string pv_city { get; set; }

        /// <summary>
        /// Gets or sets the pv_state.
        /// </summary>
        [Column]
        public string pv_state { get; set; }

        /// <summary>
        /// Gets or sets the pv_zip.
        /// </summary>
        [Column]
        public string pv_zip { get; set; }

        /// <summary>
        /// Gets or sets the pv_email.
        /// </summary>
        [Column]
        public string pv_email { get; set; }

        /// <summary>
        /// Gets or sets the pv_phone.
        /// </summary>
        [Column]
        public string pv_phone { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[person] table.
    /// </summary>
    [TableName("[dbo].[person]")]
    [PrimaryKey("p_id")]
    [ExplicitColumns]
    public partial class personRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the p_id.
        /// </summary>
        [Column]
        public int p_id { get; set; }

        /// <summary>
        /// Gets or sets the p_firstname.
        /// </summary>
        [Column]
        public string p_firstname { get; set; }

        /// <summary>
        /// Gets or sets the p_middlename.
        /// </summary>
        [Column]
        public string p_middlename { get; set; }

        /// <summary>
        /// Gets or sets the p_lastname.
        /// </summary>
        [Column]
        public string p_lastname { get; set; }

        /// <summary>
        /// Gets or sets the p_title.
        /// </summary>
        [Column]
        public string p_title { get; set; }

        /// <summary>
        /// Gets or sets the p_email.
        /// </summary>
        [Column]
        public string p_email { get; set; }

        /// <summary>
        /// Gets or sets the p_mobilephone.
        /// </summary>
        [Column]
        public string p_mobilephone { get; set; }

        /// <summary>
        /// Gets or sets the p_allowsignatory.
        /// </summary>
        [Column]
        public bool p_allowsignatory { get; set; }

        /// <summary>
        /// Gets or sets the p_is_archived.
        /// </summary>
        [Column]
        public bool p_is_archived { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[pm_adhoc_column]")]
    [PrimaryKey("pmac_id")]
    [ExplicitColumns]
    public partial class pm_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmac_id.
        /// </summary>
        [Column]
        public int pmac_id { get; set; }

        /// <summary>
        /// Gets or sets the pmac_name.
        /// </summary>
        [Column]
        public string pmac_name { get; set; }

        /// <summary>
        /// Gets or sets the pmac_format.
        /// </summary>
        [Column]
        public int pmac_format { get; set; }

        /// <summary>
        /// Gets or sets the pmac_fieldtype.
        /// </summary>
        [Column]
        public int pmac_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the pmac_select_expression.
        /// </summary>
        [Column]
        public string pmac_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the pmac_source.
        /// </summary>
        [Column]
        public string pmac_source { get; set; }

        /// <summary>
        /// Gets or sets the pmac_use_custom_expression.
        /// </summary>
        [Column]
        public bool pmac_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the pmac_extra_select_expression.
        /// </summary>
        [Column]
        public string pmac_extra_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the pmac_caption.
        /// </summary>
        [Column]
        public string pmac_caption { get; set; }

        /// <summary>
        /// Gets or sets the pmac_formula_field.
        /// </summary>
        [Column]
        public bool pmac_formula_field { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_adhoc_field_source] table.
    /// </summary>
    [TableName("[dbo].[pm_adhoc_field_source]")]
    [PrimaryKey("pmafs_id")]
    [ExplicitColumns]
    public partial class pm_adhoc_field_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmafs_id.
        /// </summary>
        [Column]
        public int pmafs_id { get; set; }

        /// <summary>
        /// Gets or sets the pmafs_source.
        /// </summary>
        [Column]
        public string pmafs_source { get; set; }

        /// <summary>
        /// Gets or sets the pmafs_preload_expression.
        /// </summary>
        [Column]
        public string pmafs_preload_expression { get; set; }

        /// <summary>
        /// Gets or sets the pmafs_subquery_expression.
        /// </summary>
        [Column]
        public string pmafs_subquery_expression { get; set; }

        /// <summary>
        /// Gets or sets the pmafs_table_name.
        /// </summary>
        [Column]
        public string pmafs_table_name { get; set; }

        /// <summary>
        /// Gets or sets the pmafs_parent_alias.
        /// </summary>
        [Column]
        public string pmafs_parent_alias { get; set; }

        /// <summary>
        /// Gets or sets the pmafs_join_type.
        /// </summary>
        [Column]
        public string pmafs_join_type { get; set; }

        /// <summary>
        /// Gets or sets the pmafs_left_column.
        /// </summary>
        [Column]
        public string pmafs_left_column { get; set; }

        /// <summary>
        /// Gets or sets the pmafs_right_column.
        /// </summary>
        [Column]
        public string pmafs_right_column { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_adhoc_report] table.
    /// </summary>
    [TableName("[dbo].[pm_adhoc_report]")]
    [PrimaryKey("pm_rpt_id")]
    [ExplicitColumns]
    public partial class pm_adhoc_reportRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pm_rpt_id.
        /// </summary>
        [Column]
        public int pm_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the pm_rpt_date.
        /// </summary>
        [Column]
        public DateTime pm_rpt_date { get; set; }

        /// <summary>
        /// Gets or sets the pm_rpt_u_id.
        /// </summary>
        [Column]
        public int pm_rpt_u_id { get; set; }

        /// <summary>
        /// Gets or sets the pm_rpt_title.
        /// </summary>
        [Column]
        public string pm_rpt_title { get; set; }

        /// <summary>
        /// Gets or sets the pm_rpt_desc.
        /// </summary>
        [Column]
        public string pm_rpt_desc { get; set; }

        /// <summary>
        /// Gets or sets the pm_rpt_sql.
        /// </summary>
        [Column]
        public string pm_rpt_sql { get; set; }

        /// <summary>
        /// Gets or sets the pm_rpt_public.
        /// </summary>
        [Column]
        public bool pm_rpt_public { get; set; }

        /// <summary>
        /// Gets or sets the pm_rpt_template.
        /// </summary>
        [Column]
        public string pm_rpt_template { get; set; }

        /// <summary>
        /// Gets or sets the pm_rpt_o_id.
        /// </summary>
        [Column]
        public int? pm_rpt_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_adhoc_report_fields] table.
    /// </summary>
    [TableName("[dbo].[pm_adhoc_report_fields]")]
    [PrimaryKey("arf_id")]
    [ExplicitColumns]
    public partial class pm_adhoc_report_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arf_id.
        /// </summary>
        [Column]
        public int arf_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_pm_rpt_id.
        /// </summary>
        [Column]
        public int arf_pm_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_field.
        /// </summary>
        [Column]
        public string arf_field { get; set; }

        /// <summary>
        /// Gets or sets the arf_name.
        /// </summary>
        [Column]
        public string arf_name { get; set; }

        /// <summary>
        /// Gets or sets the arf_fieldtype.
        /// </summary>
        [Column]
        public int arf_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the arf_select_expression.
        /// </summary>
        [Column]
        public string arf_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_source.
        /// </summary>
        [Column]
        public string arf_source { get; set; }

        /// <summary>
        /// Gets or sets the arf_use_custom_expression.
        /// </summary>
        [Column]
        public bool arf_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_extra_select_expression.
        /// </summary>
        [Column]
        public string arf_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_adhoc_report_query] table.
    /// </summary>
    [TableName("[dbo].[pm_adhoc_report_query]")]
    [PrimaryKey("arq_id")]
    [ExplicitColumns]
    public partial class pm_adhoc_report_queryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arq_id.
        /// </summary>
        [Column]
        public int arq_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_pm_rpt_id.
        /// </summary>
        [Column]
        public int arq_pm_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_type.
        /// </summary>
        [Column]
        public int arq_type { get; set; }

        /// <summary>
        /// Gets or sets the arq_value.
        /// </summary>
        [Column]
        public string arq_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_adhoc_report_query_source] table.
    /// </summary>
    [TableName("[dbo].[pm_adhoc_report_query_source]")]
    [PrimaryKey("pmarqs_id")]
    [ExplicitColumns]
    public partial class pm_adhoc_report_query_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmarqs_id.
        /// </summary>
        [Column]
        public int pmarqs_id { get; set; }

        /// <summary>
        /// Gets or sets the pmarqs_arq_id.
        /// </summary>
        [Column]
        public int pmarqs_arq_id { get; set; }

        /// <summary>
        /// Gets or sets the pmarqs_column_name.
        /// </summary>
        [Column]
        public string pmarqs_column_name { get; set; }

        /// <summary>
        /// Gets or sets the pmarqs_select_expression.
        /// </summary>
        [Column]
        public string pmarqs_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the pmarqs_source.
        /// </summary>
        [Column]
        public string pmarqs_source { get; set; }

        /// <summary>
        /// Gets or sets the pmarqs_use_custom_expression.
        /// </summary>
        [Column]
        public bool pmarqs_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the pmarqs_fieldtype.
        /// </summary>
        [Column]
        public int? pmarqs_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the pmarqs_extra_select_expression.
        /// </summary>
        [Column]
        public string pmarqs_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_adhoc_report_renamed_columns] table.
    /// </summary>
    [TableName("[dbo].[pm_adhoc_report_renamed_columns]")]
    [PrimaryKey("pm_arrc_id")]
    [ExplicitColumns]
    public partial class pm_adhoc_report_renamed_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pm_arrc_id.
        /// </summary>
        [Column]
        public int pm_arrc_id { get; set; }

        /// <summary>
        /// Gets or sets the pm_arrc_rpt_id.
        /// </summary>
        [Column]
        public int pm_arrc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the pm_arrc_column_name.
        /// </summary>
        [Column]
        public string pm_arrc_column_name { get; set; }

        /// <summary>
        /// Gets or sets the pm_arrc_display_name.
        /// </summary>
        [Column]
        public string pm_arrc_display_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_adhoc_report_users] table.
    /// </summary>
    [TableName("[dbo].[pm_adhoc_report_users]")]
    [PrimaryKey("aru_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_adhoc_report_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the aru_rpt_id.
        /// </summary>
        [Column]
        public int aru_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the aru_u_id.
        /// </summary>
        [Column]
        public int aru_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document] table.
    /// </summary>
    [TableName("[dbo].[pm_document]")]
    [PrimaryKey("pmd_id")]
    [ExplicitColumns]
    public partial class pm_documentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmd_id.
        /// </summary>
        [Column]
        public int pmd_id { get; set; }

        /// <summary>
        /// Gets or sets the pmd_path.
        /// </summary>
        [Column]
        public string pmd_path { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_control] table.
    /// </summary>
    [TableName("[dbo].[pm_document_control]")]
    [PrimaryKey("pmdc_id")]
    [ExplicitColumns]
    public partial class pm_document_controlRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdc_id.
        /// </summary>
        [Column]
        public int pmdc_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_o_id.
        /// </summary>
        [Column]
        public int pmdc_o_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_name.
        /// </summary>
        [Column]
        public string pmdc_name { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_type.
        /// </summary>
        [Column]
        public int pmdc_type { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_location.
        /// </summary>
        [Column]
        public int pmdc_location { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_paging.
        /// </summary>
        [Column]
        public int pmdc_paging { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_phase_type.
        /// </summary>
        [Column]
        public string pmdc_phase_type { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_action_type.
        /// </summary>
        [Column]
        public string pmdc_action_type { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_body.
        /// </summary>
        [Column]
        public string pmdc_body { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_text.
        /// </summary>
        [Column]
        public string pmdc_text { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_all_contract_type.
        /// </summary>
        [Column]
        public bool pmdc_all_contract_type { get; set; }

        /// <summary>
        /// Gets or sets the pmdc_all_site.
        /// </summary>
        [Column]
        public bool pmdc_all_site { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_control_contract_type] table.
    /// </summary>
    [TableName("[dbo].[pm_document_control_contract_type]")]
    [PrimaryKey("pmdcct_id")]
    [ExplicitColumns]
    public partial class pm_document_control_contract_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdcct_id.
        /// </summary>
        [Column]
        public int pmdcct_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdcct_pmdc_id.
        /// </summary>
        [Column]
        public int pmdcct_pmdc_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdcct_ot_id.
        /// </summary>
        [Column]
        public int pmdcct_ot_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_control_site] table.
    /// </summary>
    [TableName("[dbo].[pm_document_control_site]")]
    [PrimaryKey("pmdcs_id")]
    [ExplicitColumns]
    public partial class pm_document_control_siteRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdcs_id.
        /// </summary>
        [Column]
        public int pmdcs_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdcs_pmdc_id.
        /// </summary>
        [Column]
        public int pmdcs_pmdc_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdcs_s_id.
        /// </summary>
        [Column]
        public int pmdcs_s_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_signatory] table.
    /// </summary>
    [TableName("[dbo].[pm_document_signatory]")]
    [PrimaryKey("pmds_id")]
    [ExplicitColumns]
    public partial class pm_document_signatoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmds_id.
        /// </summary>
        [Column]
        public int pmds_id { get; set; }

        /// <summary>
        /// Gets or sets the pmds_p_id.
        /// </summary>
        [Column]
        public int pmds_p_id { get; set; }

        /// <summary>
        /// Gets or sets the pmds_pmd_id.
        /// </summary>
        [Column]
        public int pmds_pmd_id { get; set; }

        /// <summary>
        /// Gets or sets the pmds_isdigital.
        /// </summary>
        [Column]
        public bool pmds_isdigital { get; set; }

        /// <summary>
        /// Gets or sets the pmds_grouporder.
        /// </summary>
        [Column]
        public int pmds_grouporder { get; set; }

        /// <summary>
        /// Gets or sets the pmds_added_in_workflow.
        /// </summary>
        [Column]
        public bool pmds_added_in_workflow { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_signatory_workflow_document] table.
    /// </summary>
    [TableName("[dbo].[pm_document_signatory_workflow_document]")]
    [PrimaryKey("pmdswd_ccpdsw_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_document_signatory_workflow_documentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdswd_ccpdsw_id.
        /// </summary>
        [Column]
        public int pmdswd_ccpdsw_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdswd_pmd_id.
        /// </summary>
        [Column]
        public int pmdswd_pmd_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_signature] table.
    /// </summary>
    [TableName("[dbo].[pm_document_signature]")]
    [PrimaryKey("pmdsig_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_document_signatureRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdsig_id.
        /// </summary>
        [Column]
        public int pmdsig_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdsig_executiontime.
        /// </summary>
        [Column]
        public DateTime pmdsig_executiontime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_signature_rejection] table.
    /// </summary>
    [TableName("[dbo].[pm_document_signature_rejection]")]
    [PrimaryKey("pmdsrej_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_document_signature_rejectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdsrej_id.
        /// </summary>
        [Column]
        public int pmdsrej_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdsrej_reason_type.
        /// </summary>
        [Column]
        public int pmdsrej_reason_type { get; set; }

        /// <summary>
        /// Gets or sets the pmdsrej_reason.
        /// </summary>
        [Column]
        public string pmdsrej_reason { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_signature_request] table.
    /// </summary>
    [TableName("[dbo].[pm_document_signature_request]")]
    [PrimaryKey("pmdsr_id")]
    [ExplicitColumns]
    public partial class pm_document_signature_requestRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdsr_id.
        /// </summary>
        [Column]
        public int pmdsr_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdsr_pmst_id.
        /// </summary>
        [Column]
        public int pmdsr_pmst_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdsr_requesttime.
        /// </summary>
        [Column]
        public DateTime pmdsr_requesttime { get; set; }

        /// <summary>
        /// Gets or sets the pmdsr_grouporder.
        /// </summary>
        [Column]
        public int pmdsr_grouporder { get; set; }

        /// <summary>
        /// Gets or sets the pmdsr_accesstoken.
        /// </summary>
        [Column]
        public string pmdsr_accesstoken { get; set; }

        /// <summary>
        /// Gets or sets the pmdsr_token_expiration_time.
        /// </summary>
        [Column]
        public DateTime pmdsr_token_expiration_time { get; set; }

        /// <summary>
        /// Gets or sets the pmdsr_p_id.
        /// </summary>
        [Column]
        public int pmdsr_p_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_signature_request_signatory] table.
    /// </summary>
    [TableName("[dbo].[pm_document_signature_request_signatory]")]
    [PrimaryKey("pmdsr_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_document_signature_request_signatoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdsr_id.
        /// </summary>
        [Column]
        public int pmdsr_id { get; set; }

        /// <summary>
        /// Gets or sets the pmds_id.
        /// </summary>
        [Column]
        public int pmds_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_template] table.
    /// </summary>
    [TableName("[dbo].[pm_document_template]")]
    [PrimaryKey("pmdt_id")]
    [ExplicitColumns]
    public partial class pm_document_templateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdt_id.
        /// </summary>
        [Column]
        public int pmdt_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdt_name.
        /// </summary>
        [Column]
        public string pmdt_name { get; set; }

        /// <summary>
        /// Gets or sets the pmdt_doc_path.
        /// </summary>
        [Column]
        public string pmdt_doc_path { get; set; }

        /// <summary>
        /// Gets or sets the pmdt_modified_date.
        /// </summary>
        [Column]
        public DateTime? pmdt_modified_date { get; set; }

        /// <summary>
        /// Gets or sets the pmdt_modified_u_id.
        /// </summary>
        [Column]
        public int? pmdt_modified_u_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdt_o_id.
        /// </summary>
        [Column]
        public int pmdt_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_document_template_tags] table.
    /// </summary>
    [TableName("[dbo].[pm_document_template_tags]")]
    [PrimaryKey("pmdtt_id")]
    [ExplicitColumns]
    public partial class pm_document_template_tagRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmdtt_id.
        /// </summary>
        [Column]
        public int pmdtt_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdtt_pmdt_id.
        /// </summary>
        [Column]
        public int pmdtt_pmdt_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdtt_ocf_id.
        /// </summary>
        [Column]
        public int? pmdtt_ocf_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdtt_ccrfsfs_id.
        /// </summary>
        [Column]
        public int? pmdtt_ccrfsfs_id { get; set; }

        /// <summary>
        /// Gets or sets the pmdtt_tags.
        /// </summary>
        [Column]
        public int? pmdtt_tags { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_signature_execution] table.
    /// </summary>
    [TableName("[dbo].[pm_signature_execution]")]
    [PrimaryKey("pmse_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_signature_executionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmse_id.
        /// </summary>
        [Column]
        public int pmse_id { get; set; }

        /// <summary>
        /// Gets or sets the pmse_executiontime.
        /// </summary>
        [Column]
        public DateTime pmse_executiontime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_signature_rejection] table.
    /// </summary>
    [TableName("[dbo].[pm_signature_rejection]")]
    [PrimaryKey("pmsr_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_signature_rejectionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmsr_id.
        /// </summary>
        [Column]
        public int pmsr_id { get; set; }

        /// <summary>
        /// Gets or sets the pmsr_reason.
        /// </summary>
        [Column]
        public string pmsr_reason { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_signature_transaction] table.
    /// </summary>
    [TableName("[dbo].[pm_signature_transaction]")]
    [PrimaryKey("pmst_id")]
    [ExplicitColumns]
    public partial class pm_signature_transactionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmst_id.
        /// </summary>
        [Column]
        public int pmst_id { get; set; }

        /// <summary>
        /// Gets or sets the pmst_requesttime.
        /// </summary>
        [Column]
        public DateTime pmst_requesttime { get; set; }

        /// <summary>
        /// Gets or sets the pmst_transaction_identifier.
        /// </summary>
        [Column]
        public string pmst_transaction_identifier { get; set; }

        /// <summary>
        /// Gets or sets the pmst_document_set_id.
        /// </summary>
        [Column]
        public string pmst_document_set_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_signature_transaction_document] table.
    /// </summary>
    [TableName("[dbo].[pm_signature_transaction_document]")]
    [PrimaryKey("pmstd_pmd_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_signature_transaction_documentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmstd_pmd_id.
        /// </summary>
        [Column]
        public int pmstd_pmd_id { get; set; }

        /// <summary>
        /// Gets or sets the pmstd_pmst_id.
        /// </summary>
        [Column]
        public int pmstd_pmst_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pm_workflow_attachment_document] table.
    /// </summary>
    [TableName("[dbo].[pm_workflow_attachment_document]")]
    [PrimaryKey("pmwad_ccpwa_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class pm_workflow_attachment_documentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pmwad_ccpwa_id.
        /// </summary>
        [Column]
        public int pmwad_ccpwa_id { get; set; }

        /// <summary>
        /// Gets or sets the pmwad_pmd_id.
        /// </summary>
        [Column]
        public int pmwad_pmd_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[post22786] table.
    /// </summary>
    [TableName("[dbo].[post22786]")]
    [ExplicitColumns]
    public partial class post22786Row : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsp_id.
        /// </summary>
        [Column]
        public int tsp_id { get; set; }

        /// <summary>
        /// Gets or sets the tsp_ts_id.
        /// </summary>
        [Column]
        public int tsp_ts_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[pre22786] table.
    /// </summary>
    [TableName("[dbo].[pre22786]")]
    [ExplicitColumns]
    public partial class pre22786Row : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsp_id.
        /// </summary>
        [Column]
        public int tsp_id { get; set; }

        /// <summary>
        /// Gets or sets the tsp_ts_id.
        /// </summary>
        [Column]
        public int tsp_ts_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ProcessFormActivity] table.
    /// </summary>
    [TableName("[dbo].[ProcessFormActivity]")]
    [PrimaryKey("ProcessFormActivityId")]
    [ExplicitColumns]
    public partial class ProcessFormActivityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessFormActivityId.
        /// </summary>
        [Column]
        public int ProcessFormActivityId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessActivityId.
        /// </summary>
        [Column]
        public int ProcessActivityId { get; set; }

        /// <summary>
        /// Gets or sets the FormLayoutId.
        /// </summary>
        [Column]
        public int FormLayoutId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[provider] table.
    /// </summary>
    [TableName("[dbo].[provider]")]
    [PrimaryKey("p_id")]
    [ExplicitColumns]
    public partial class providerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the p_id.
        /// </summary>
        [Column]
        public int p_id { get; set; }

        /// <summary>
        /// Gets or sets the p_name.
        /// </summary>
        [Column]
        public string p_name { get; set; }

        /// <summary>
        /// Gets or sets the p_ref_no.
        /// </summary>
        [Column]
        public string p_ref_no { get; set; }

        /// <summary>
        /// Gets or sets the p_con_lname.
        /// </summary>
        [Column]
        public string p_con_lname { get; set; }

        /// <summary>
        /// Gets or sets the p_con_fname.
        /// </summary>
        [Column]
        public string p_con_fname { get; set; }

        /// <summary>
        /// Gets or sets the p_con_phone.
        /// </summary>
        [Column]
        public string p_con_phone { get; set; }

        /// <summary>
        /// Gets or sets the p_con_fax.
        /// </summary>
        [Column]
        public string p_con_fax { get; set; }

        /// <summary>
        /// Gets or sets the p_con_email.
        /// </summary>
        [Column]
        public string p_con_email { get; set; }

        /// <summary>
        /// Gets or sets the p_con_mobile.
        /// </summary>
        [Column]
        public string p_con_mobile { get; set; }

        /// <summary>
        /// Gets or sets the p_con_pager.
        /// </summary>
        [Column]
        public string p_con_pager { get; set; }

        /// <summary>
        /// Gets or sets the p_addr_1.
        /// </summary>
        [Column]
        public string p_addr_1 { get; set; }

        /// <summary>
        /// Gets or sets the p_addr_2.
        /// </summary>
        [Column]
        public string p_addr_2 { get; set; }

        /// <summary>
        /// Gets or sets the p_city.
        /// </summary>
        [Column]
        public string p_city { get; set; }

        /// <summary>
        /// Gets or sets the p_state.
        /// </summary>
        [Column]
        public string p_state { get; set; }

        /// <summary>
        /// Gets or sets the p_zip.
        /// </summary>
        [Column]
        public string p_zip { get; set; }

        /// <summary>
        /// Gets or sets the p_title.
        /// </summary>
        [Column]
        public string p_title { get; set; }

        /// <summary>
        /// Gets or sets the p_website.
        /// </summary>
        [Column]
        public string p_website { get; set; }

        /// <summary>
        /// Gets or sets the p_cty_id.
        /// </summary>
        [Column]
        public int? p_cty_id { get; set; }

        /// <summary>
        /// Gets or sets the p_v_id.
        /// </summary>
        [Column]
        public int? p_v_id { get; set; }

        /// <summary>
        /// Gets or sets the p_tk.
        /// </summary>
        [Column]
        public bool? p_tk { get; set; }

        /// <summary>
        /// Gets or sets the p_def_fac.
        /// </summary>
        [Column]
        public int? p_def_fac { get; set; }

        /// <summary>
        /// Gets or sets the p_pt_id.
        /// </summary>
        [Column]
        public int? p_pt_id { get; set; }

        /// <summary>
        /// Gets or sets the p_spec_id.
        /// </summary>
        [Column]
        public int? p_spec_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[provider_comment] table.
    /// </summary>
    [TableName("[dbo].[provider_comment]")]
    [PrimaryKey("pc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class provider_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pc_id.
        /// </summary>
        [Column]
        public int pc_id { get; set; }

        /// <summary>
        /// Gets or sets the pc_p_id.
        /// </summary>
        [Column]
        public int pc_p_id { get; set; }

        /// <summary>
        /// Gets or sets the pc_add_date.
        /// </summary>
        [Column]
        public DateTime pc_add_date { get; set; }

        /// <summary>
        /// Gets or sets the pc_add_user.
        /// </summary>
        [Column]
        public string pc_add_user { get; set; }

        /// <summary>
        /// Gets or sets the pc_mod_date.
        /// </summary>
        [Column]
        public DateTime pc_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the pc_mod_user.
        /// </summary>
        [Column]
        public string pc_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the pc_subject.
        /// </summary>
        [Column]
        public string pc_subject { get; set; }

        /// <summary>
        /// Gets or sets the pc_text.
        /// </summary>
        [Column]
        public string pc_text { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[provider_exclusion] table.
    /// </summary>
    [TableName("[dbo].[provider_exclusion]")]
    [PrimaryKey("pe_id")]
    [ExplicitColumns]
    public partial class provider_exclusionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pe_id.
        /// </summary>
        [Column]
        public int pe_id { get; set; }

        /// <summary>
        /// Gets or sets the pe_p_id.
        /// </summary>
        [Column]
        public int pe_p_id { get; set; }

        /// <summary>
        /// Gets or sets the pe_exclusion_date.
        /// </summary>
        [Column]
        public DateTime pe_exclusion_date { get; set; }

        /// <summary>
        /// Gets or sets the pe_comment.
        /// </summary>
        [Column]
        public string pe_comment { get; set; }

        /// <summary>
        /// Gets or sets the pe_attachment.
        /// </summary>
        [Column]
        public string pe_attachment { get; set; }

        /// <summary>
        /// Gets or sets the pe_completed_by.
        /// </summary>
        [Column]
        public string pe_completed_by { get; set; }

        /// <summary>
        /// Gets or sets the pe_timestamp.
        /// </summary>
        [Column]
        public DateTime pe_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the pe_lastModifiedBy.
        /// </summary>
        [Column]
        public string pe_lastModifiedBy { get; set; }

        /// <summary>
        /// Gets or sets the pe_lastModifiedDate.
        /// </summary>
        [Column]
        public DateTime pe_lastModifiedDate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[provider_facilities] table.
    /// </summary>
    [TableName("[dbo].[provider_facilities]")]
    [PrimaryKey("pf_p_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class provider_facilityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pf_p_id.
        /// </summary>
        [Column]
        public int pf_p_id { get; set; }

        /// <summary>
        /// Gets or sets the pf_fac_id.
        /// </summary>
        [Column]
        public int pf_fac_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[provider_type] table.
    /// </summary>
    [TableName("[dbo].[provider_type]")]
    [PrimaryKey("pt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class provider_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the pt_id.
        /// </summary>
        [Column]
        public int pt_id { get; set; }

        /// <summary>
        /// Gets or sets the pt_name.
        /// </summary>
        [Column]
        public string pt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[qa_category] table.
    /// </summary>
    [TableName("[dbo].[qa_category]")]
    [PrimaryKey("qac_id")]
    [ExplicitColumns]
    public partial class qa_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the qac_id.
        /// </summary>
        [Column]
        public int qac_id { get; set; }

        /// <summary>
        /// Gets or sets the qac_name.
        /// </summary>
        [Column]
        public string qac_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[qa_detail] table.
    /// </summary>
    [TableName("[dbo].[qa_detail]")]
    [PrimaryKey("qad_id")]
    [ExplicitColumns]
    public partial class qa_detailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the qad_id.
        /// </summary>
        [Column]
        public int qad_id { get; set; }

        /// <summary>
        /// Gets or sets the qad_qah_id.
        /// </summary>
        [Column]
        public int qad_qah_id { get; set; }

        /// <summary>
        /// Gets or sets the qad_qac_id.
        /// </summary>
        [Column]
        public int qad_qac_id { get; set; }

        /// <summary>
        /// Gets or sets the qad_before.
        /// </summary>
        [Column]
        public string qad_before { get; set; }

        /// <summary>
        /// Gets or sets the qad_after.
        /// </summary>
        [Column]
        public string qad_after { get; set; }

        /// <summary>
        /// Gets or sets the qad_hookup_error.
        /// </summary>
        [Column]
        public short qad_hookup_error { get; set; }

        /// <summary>
        /// Gets or sets the qad_override_error.
        /// </summary>
        [Column]
        public bool qad_override_error { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[qa_header] table.
    /// </summary>
    [TableName("[dbo].[qa_header]")]
    [PrimaryKey("qah_id")]
    [ExplicitColumns]
    public partial class qa_headerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the qah_id.
        /// </summary>
        [Column]
        public int qah_id { get; set; }

        /// <summary>
        /// Gets or sets the qah_c_id.
        /// </summary>
        [Column]
        public int qah_c_id { get; set; }

        /// <summary>
        /// Gets or sets the qah_hookup_u_id.
        /// </summary>
        [Column]
        public int qah_hookup_u_id { get; set; }

        /// <summary>
        /// Gets or sets the qah_hookup_date.
        /// </summary>
        [Column]
        public DateTime qah_hookup_date { get; set; }

        /// <summary>
        /// Gets or sets the qah_qa_u_id.
        /// </summary>
        [Column]
        public int? qah_qa_u_id { get; set; }

        /// <summary>
        /// Gets or sets the qah_qa_complete.
        /// </summary>
        [Column]
        public short qah_qa_complete { get; set; }

        /// <summary>
        /// Gets or sets the qah_qa_date.
        /// </summary>
        [Column]
        public DateTime? qah_qa_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[qa_name_xref] table.
    /// </summary>
    [TableName("[dbo].[qa_name_xref]")]
    [ExplicitColumns]
    public partial class qa_name_xrefRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the qax_id.
        /// </summary>
        [Column]
        public int qax_id { get; set; }

        /// <summary>
        /// Gets or sets the qax_name.
        /// </summary>
        [Column]
        public string qax_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[report_archive] table.
    /// </summary>
    [TableName("[dbo].[report_archive]")]
    [PrimaryKey("ra_id")]
    [ExplicitColumns]
    public partial class report_archiveRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ra_id.
        /// </summary>
        [Column]
        public int ra_id { get; set; }

        /// <summary>
        /// Gets or sets the ra_rs_id.
        /// </summary>
        [Column]
        public int ra_rs_id { get; set; }

        /// <summary>
        /// Gets or sets the ra_u_id.
        /// </summary>
        [Column]
        public int ra_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ra_name.
        /// </summary>
        [Column]
        public string ra_name { get; set; }

        /// <summary>
        /// Gets or sets the ra_version.
        /// </summary>
        [Column]
        public int ra_version { get; set; }

        /// <summary>
        /// Gets or sets the ra_filename.
        /// </summary>
        [Column]
        public string ra_filename { get; set; }

        /// <summary>
        /// Gets or sets the ra_date_create.
        /// </summary>
        [Column]
        public DateTime ra_date_create { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[report_parameters] table.
    /// </summary>
    [TableName("[dbo].[report_parameters]")]
    [ExplicitColumns]
    public partial class report_parameterRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the rsp_rs_id.
        /// </summary>
        [Column]
        public int rsp_rs_id { get; set; }

        /// <summary>
        /// Gets or sets the rsp_rs_name.
        /// </summary>
        [Column]
        public string rsp_rs_name { get; set; }

        /// <summary>
        /// Gets or sets the rsp_rs_value.
        /// </summary>
        [Column]
        public string rsp_rs_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[report_schedule] table.
    /// </summary>
    [TableName("[dbo].[report_schedule]")]
    [PrimaryKey("rs_id")]
    [ExplicitColumns]
    public partial class report_scheduleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the rs_id.
        /// </summary>
        [Column]
        public int rs_id { get; set; }

        /// <summary>
        /// Gets or sets the rs_name.
        /// </summary>
        [Column]
        public string rs_name { get; set; }

        /// <summary>
        /// Gets or sets the rs_report_id.
        /// </summary>
        [Column]
        public int? rs_report_id { get; set; }

        /// <summary>
        /// Gets or sets the rs_path.
        /// </summary>
        [Column]
        public string rs_path { get; set; }

        /// <summary>
        /// Gets or sets the rs_application.
        /// </summary>
        [Column]
        public int rs_application { get; set; }

        /// <summary>
        /// Gets or sets the rs_u_id.
        /// </summary>
        [Column]
        public int rs_u_id { get; set; }

        /// <summary>
        /// Gets or sets the rs_o_id.
        /// </summary>
        [Column]
        public int rs_o_id { get; set; }

        /// <summary>
        /// Gets or sets the rs_type.
        /// </summary>
        [Column]
        public int rs_type { get; set; }

        /// <summary>
        /// Gets or sets the rs_interval.
        /// </summary>
        [Column]
        public int rs_interval { get; set; }

        /// <summary>
        /// Gets or sets the rs_period.
        /// </summary>
        [Column]
        public int rs_period { get; set; }

        /// <summary>
        /// Gets or sets the rs_repeat.
        /// </summary>
        [Column]
        public int rs_repeat { get; set; }

        /// <summary>
        /// Gets or sets the rs_format.
        /// </summary>
        [Column]
        public string rs_format { get; set; }

        /// <summary>
        /// Gets or sets the rs_deliveryType.
        /// </summary>
        [Column]
        public int rs_deliveryType { get; set; }

        /// <summary>
        /// Gets or sets the rs_to.
        /// </summary>
        [Column]
        public string rs_to { get; set; }

        /// <summary>
        /// Gets or sets the rs_cc.
        /// </summary>
        [Column]
        public string rs_cc { get; set; }

        /// <summary>
        /// Gets or sets the rs_bcc.
        /// </summary>
        [Column]
        public string rs_bcc { get; set; }

        /// <summary>
        /// Gets or sets the rs_subject.
        /// </summary>
        [Column]
        public string rs_subject { get; set; }

        /// <summary>
        /// Gets or sets the rs_link_type.
        /// </summary>
        [Column]
        public int? rs_link_type { get; set; }

        /// <summary>
        /// Gets or sets the rs_archive_name.
        /// </summary>
        [Column]
        public string rs_archive_name { get; set; }

        /// <summary>
        /// Gets or sets the rs_archive_type.
        /// </summary>
        [Column]
        public int? rs_archive_type { get; set; }

        /// <summary>
        /// Gets or sets the rs_date.
        /// </summary>
        [Column]
        public DateTime rs_date { get; set; }

        /// <summary>
        /// Gets or sets the rs_schedule_id.
        /// </summary>
        [Column]
        public int? rs_schedule_id { get; set; }

        /// <summary>
        /// Gets or sets the rs_body.
        /// </summary>
        [Column]
        public string rs_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[report_schedule_log] table.
    /// </summary>
    [TableName("[dbo].[report_schedule_log]")]
    [PrimaryKey("rsl_id")]
    [ExplicitColumns]
    public partial class report_schedule_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the rsl_id.
        /// </summary>
        [Column]
        public int rsl_id { get; set; }

        /// <summary>
        /// Gets or sets the rsl_rs_id.
        /// </summary>
        [Column]
        public int rsl_rs_id { get; set; }

        /// <summary>
        /// Gets or sets the rsl_ra_id.
        /// </summary>
        [Column]
        public int rsl_ra_id { get; set; }

        /// <summary>
        /// Gets or sets the rsl_filename.
        /// </summary>
        [Column]
        public string rsl_filename { get; set; }

        /// <summary>
        /// Gets or sets the rsl_size.
        /// </summary>
        [Column]
        public int rsl_size { get; set; }

        /// <summary>
        /// Gets or sets the rsl_time.
        /// </summary>
        [Column]
        public int rsl_time { get; set; }

        /// <summary>
        /// Gets or sets the rsl_date.
        /// </summary>
        [Column]
        public DateTime rsl_date { get; set; }

        /// <summary>
        /// Gets or sets the rsl_attempts.
        /// </summary>
        [Column]
        public int? rsl_attempts { get; set; }

        /// <summary>
        /// Gets or sets the rsl_success.
        /// </summary>
        [Column]
        public int? rsl_success { get; set; }

        /// <summary>
        /// Gets or sets the rsl_error.
        /// </summary>
        [Column]
        public string rsl_error { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[report_schedule_recipient] table.
    /// </summary>
    [TableName("[dbo].[report_schedule_recipient]")]
    [PrimaryKey("rsr_rs_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class report_schedule_recipientRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the rsr_rs_id.
        /// </summary>
        [Column]
        public int rsr_rs_id { get; set; }

        /// <summary>
        /// Gets or sets the rsr_u_id.
        /// </summary>
        [Column]
        public int rsr_u_id { get; set; }

        /// <summary>
        /// Gets or sets the rsr_recipient_type.
        /// </summary>
        [Column]
        public int rsr_recipient_type { get; set; }

        /// <summary>
        /// Gets or sets the rsr_initial_email.
        /// </summary>
        [Column]
        public string rsr_initial_email { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[requestor] table.
    /// </summary>
    [TableName("[dbo].[requestor]")]
    [PrimaryKey("rq_id")]
    [ExplicitColumns]
    public partial class requestorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the rq_id.
        /// </summary>
        [Column]
        public int rq_id { get; set; }

        /// <summary>
        /// Gets or sets the rq_name.
        /// </summary>
        [Column]
        public string rq_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[role_type] table.
    /// </summary>
    [TableName("[dbo].[role_type]")]
    [PrimaryKey("rt_id")]
    [ExplicitColumns]
    public partial class role_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the rt_id.
        /// </summary>
        [Column]
        public int rt_id { get; set; }

        /// <summary>
        /// Gets or sets the rt_name.
        /// </summary>
        [Column]
        public string rt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[security] table.
    /// </summary>
    [TableName("[dbo].[security]")]
    [ExplicitColumns]
    public partial class securityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the sec_id.
        /// </summary>
        [Column]
        public int sec_id { get; set; }

        /// <summary>
        /// Gets or sets the sec_name.
        /// </summary>
        [Column]
        public string sec_name { get; set; }

        /// <summary>
        /// Gets or sets the sec_encrypted.
        /// </summary>
        [Column]
        public string sec_encrypted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[selected_id] table.
    /// </summary>
    [TableName("[dbo].[selected_id]")]
    [ExplicitColumns]
    public partial class selected_idRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the si_id.
        /// </summary>
        [Column]
        public int si_id { get; set; }

        /// <summary>
        /// Gets or sets the si_time.
        /// </summary>
        [Column]
        public string si_time { get; set; }

        /// <summary>
        /// Gets or sets the si_string.
        /// </summary>
        [Column]
        public string si_string { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[session_log] table.
    /// </summary>
    [TableName("[dbo].[session_log]")]
    [PrimaryKey("sl_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class session_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the sl_id.
        /// </summary>
        [Column]
        public int sl_id { get; set; }

        /// <summary>
        /// Gets or sets the sl_app_id.
        /// </summary>
        [Column]
        public int sl_app_id { get; set; }

        /// <summary>
        /// Gets or sets the sl_session_id.
        /// </summary>
        [Column]
        public string sl_session_id { get; set; }

        /// <summary>
        /// Gets or sets the sl_account.
        /// </summary>
        [Column]
        public string sl_account { get; set; }

        /// <summary>
        /// Gets or sets the sl_timestamp.
        /// </summary>
        [Column]
        public DateTime sl_timestamp { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[site_comment] table.
    /// </summary>
    [TableName("[dbo].[site_comment]")]
    [PrimaryKey("sc_id")]
    [ExplicitColumns]
    public partial class site_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the sc_id.
        /// </summary>
        [Column]
        public int sc_id { get; set; }

        /// <summary>
        /// Gets or sets the sc_s_id.
        /// </summary>
        [Column]
        public int sc_s_id { get; set; }

        /// <summary>
        /// Gets or sets the sc_add_date.
        /// </summary>
        [Column]
        public DateTime sc_add_date { get; set; }

        /// <summary>
        /// Gets or sets the sc_add_user.
        /// </summary>
        [Column]
        public string sc_add_user { get; set; }

        /// <summary>
        /// Gets or sets the sc_mod_date.
        /// </summary>
        [Column]
        public DateTime sc_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the sc_mod_user.
        /// </summary>
        [Column]
        public string sc_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the sc_subject.
        /// </summary>
        [Column]
        public string sc_subject { get; set; }

        /// <summary>
        /// Gets or sets the sc_text.
        /// </summary>
        [Column]
        public string sc_text { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[site_contact] table.
    /// </summary>
    [TableName("[dbo].[site_contact]")]
    [PrimaryKey("sc_id")]
    [ExplicitColumns]
    public partial class site_contactRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the sc_id.
        /// </summary>
        [Column]
        public int sc_id { get; set; }

        /// <summary>
        /// Gets or sets the sc_s_id.
        /// </summary>
        [Column]
        public int sc_s_id { get; set; }

        /// <summary>
        /// Gets or sets the sc_type.
        /// </summary>
        [Column]
        public string sc_type { get; set; }

        /// <summary>
        /// Gets or sets the sc_lname.
        /// </summary>
        [Column]
        public string sc_lname { get; set; }

        /// <summary>
        /// Gets or sets the sc_fname.
        /// </summary>
        [Column]
        public string sc_fname { get; set; }

        /// <summary>
        /// Gets or sets the sc_phone.
        /// </summary>
        [Column]
        public string sc_phone { get; set; }

        /// <summary>
        /// Gets or sets the sc_fax.
        /// </summary>
        [Column]
        public string sc_fax { get; set; }

        /// <summary>
        /// Gets or sets the sc_email.
        /// </summary>
        [Column]
        public string sc_email { get; set; }

        /// <summary>
        /// Gets or sets the sc_mobile.
        /// </summary>
        [Column]
        public string sc_mobile { get; set; }

        /// <summary>
        /// Gets or sets the sc_pager.
        /// </summary>
        [Column]
        public string sc_pager { get; set; }

        /// <summary>
        /// Gets or sets the sc_addr_1.
        /// </summary>
        [Column]
        public string sc_addr_1 { get; set; }

        /// <summary>
        /// Gets or sets the sc_addr_2.
        /// </summary>
        [Column]
        public string sc_addr_2 { get; set; }

        /// <summary>
        /// Gets or sets the sc_city.
        /// </summary>
        [Column]
        public string sc_city { get; set; }

        /// <summary>
        /// Gets or sets the sc_state.
        /// </summary>
        [Column]
        public string sc_state { get; set; }

        /// <summary>
        /// Gets or sets the sc_zip.
        /// </summary>
        [Column]
        public string sc_zip { get; set; }

        /// <summary>
        /// Gets or sets the sc_notes.
        /// </summary>
        [Column]
        public string sc_notes { get; set; }

        /// <summary>
        /// Gets or sets the sc_international.
        /// </summary>
        [Column]
        public bool sc_international { get; set; }

        /// <summary>
        /// Gets or sets the sc_cty_id.
        /// </summary>
        [Column]
        public int? sc_cty_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[specialty] table.
    /// </summary>
    [TableName("[dbo].[specialty]")]
    [PrimaryKey("spec_id")]
    [ExplicitColumns]
    public partial class specialtyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the spec_id.
        /// </summary>
        [Column]
        public int spec_id { get; set; }

        /// <summary>
        /// Gets or sets the spec_name.
        /// </summary>
        [Column]
        public string spec_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[state_province] table.
    /// </summary>
    [TableName("[dbo].[state_province]")]
    [PrimaryKey("stp_id")]
    [ExplicitColumns]
    public partial class state_provinceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the stp_id.
        /// </summary>
        [Column]
        public int stp_id { get; set; }

        /// <summary>
        /// Gets or sets the stp_name.
        /// </summary>
        [Column]
        public string stp_name { get; set; }

        /// <summary>
        /// Gets or sets the stp_cty_id.
        /// </summary>
        [Column]
        public int stp_cty_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[status] table.
    /// </summary>
    [TableName("[dbo].[status]")]
    [PrimaryKey("stat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the stat_id.
        /// </summary>
        [Column]
        public int stat_id { get; set; }

        /// <summary>
        /// Gets or sets the stat_name.
        /// </summary>
        [Column]
        public string stat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[SubCategory] table.
    /// </summary>
    [TableName("[dbo].[SubCategory]")]
    [PrimaryKey("SubCategoryID", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SubCategoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the SubCategoryID.
        /// </summary>
        [Column]
        public int SubCategoryID { get; set; }

        /// <summary>
        /// Gets or sets the CategoryID.
        /// </summary>
        [Column]
        public int CategoryID { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[sysdiagrams] table.
    /// </summary>
    [TableName("[dbo].[sysdiagrams]")]
    [PrimaryKey("diagram_id")]
    [ExplicitColumns]
    public partial class sysdiagramRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        [Column]
        public string name { get; set; }

        /// <summary>
        /// Gets or sets the principal_id.
        /// </summary>
        [Column]
        public int principal_id { get; set; }

        /// <summary>
        /// Gets or sets the diagram_id.
        /// </summary>
        [Column]
        public int diagram_id { get; set; }

        /// <summary>
        /// Gets or sets the version.
        /// </summary>
        [Column]
        public int? version { get; set; }

        /// <summary>
        /// Gets or sets the definition.
        /// </summary>
        [Column]
        public byte[] definition { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc]")]
    [ExplicitColumns]
    public partial class terms_adhocRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the Attachment_Type.
        /// </summary>
        [Column("Attachment Type")] 
        public string Attachment_Type { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Subject.
        /// </summary>
        [Column("Attachment Subject")] 
        public string Attachment_Subject { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Added_By.
        /// </summary>
        [Column("Attachment Added By")] 
        public string Attachment_Added_By { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Added_On.
        /// </summary>
        [Column("Attachment Added On")] 
        public DateTime Attachment_Added_On { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Modified_By.
        /// </summary>
        [Column("Attachment Modified By")] 
        public string Attachment_Modified_By { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Modified_On.
        /// </summary>
        [Column("Attachment Modified On")] 
        public DateTime Attachment_Modified_On { get; set; }

        /// <summary>
        /// Gets or sets the Attachment_Body.
        /// </summary>
        [Column("Attachment Body")] 
        public string Attachment_Body { get; set; }

        /// <summary>
        /// Gets or sets the Compensation_Rate.
        /// </summary>
        [Column("Compensation Rate")] 
        public double Compensation_Rate { get; set; }

        /// <summary>
        /// Gets or sets the Compensation_Rate_Unit.
        /// </summary>
        [Column("Compensation Rate Unit")] 
        public string Compensation_Rate_Unit { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Identification_Number.
        /// </summary>
        [Column("Contract Identification Number")] 
        public int Contract_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Hyperlink.
        /// </summary>
        [Column("Contract Hyperlink")] 
        public string Contract_Hyperlink { get; set; }

        /// <summary>
        /// Gets or sets the Contract_Number.
        /// </summary>
        [Column("Contract Number")] 
        public string Contract_Number { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Name.
        /// </summary>
        [Column("Contracting Entity Name")] 
        public string Contracting_Entity_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Short_Name.
        /// </summary>
        [Column("Contracting Entity Short Name")] 
        public string Contracting_Entity_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Contracting_Entity_Reference_Number.
        /// </summary>
        [Column("Contracting Entity Reference Number")] 
        public string Contracting_Entity_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Department_Name.
        /// </summary>
        [Column("Department Name")] 
        public string Department_Name { get; set; }

        /// <summary>
        /// Gets or sets the Effective_Date.
        /// </summary>
        [Column("Effective Date")] 
        public DateTime Effective_Date { get; set; }

        /// <summary>
        /// Gets or sets the Expiration_Date.
        /// </summary>
        [Column("Expiration Date")] 
        public DateTime Expiration_Date { get; set; }

        /// <summary>
        /// Gets or sets the Group_Name.
        /// </summary>
        [Column("Group Name")] 
        public string Group_Name { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Required_Per_Month.
        /// </summary>
        [Column("Hours Required Per Month")] 
        public double Hours_Required_Per_Month { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Identification_Number.
        /// </summary>
        [Column("Organization Identification Number")] 
        public int Organization_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Name.
        /// </summary>
        [Column("Organization Name")] 
        public string Organization_Name { get; set; }

        /// <summary>
        /// Gets or sets the Organization_Short_Name.
        /// </summary>
        [Column("Organization Short Name")] 
        public string Organization_Short_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Display_Name.
        /// </summary>
        [Column("Reporting Party Display Name")] 
        public string Reporting_Party_Display_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Email_Address.
        /// </summary>
        [Column("Reporting Party Email Address")] 
        public string Reporting_Party_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_First_Name.
        /// </summary>
        [Column("Reporting Party First Name")] 
        public string Reporting_Party_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Identification_Number.
        /// </summary>
        [Column("Reporting Party Identification Number")] 
        public int Reporting_Party_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Last_Name.
        /// </summary>
        [Column("Reporting Party Last Name")] 
        public string Reporting_Party_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Middle_Name.
        /// </summary>
        [Column("Reporting Party Middle Name")] 
        public string Reporting_Party_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Salutation.
        /// </summary>
        [Column("Reporting Party Salutation")] 
        public string Reporting_Party_Salutation { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_Title.
        /// </summary>
        [Column("Reporting Party Title")] 
        public string Reporting_Party_Title { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Party_User_Name.
        /// </summary>
        [Column("Reporting Party User Name")] 
        public string Reporting_Party_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Reporting_Year.
        /// </summary>
        [Column("Reporting Year")] 
        public string Reporting_Year { get; set; }

        /// <summary>
        /// Gets or sets the Status.
        /// </summary>
        [Column]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Activity.
        /// </summary>
        [Column("Time Entry Activity")] 
        public string Time_Entry_Activity { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Activity_Sort_Order.
        /// </summary>
        [Column("Time Entry Activity Sort Order")] 
        public int? Time_Entry_Activity_Sort_Order { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Added_By.
        /// </summary>
        [Column("Time Entry Added By")] 
        public string Time_Entry_Added_By { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Added_On.
        /// </summary>
        [Column("Time Entry Added On")] 
        public DateTime Time_Entry_Added_On { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Approved_By.
        /// </summary>
        [Column("Time Entry Approved By")] 
        public string Time_Entry_Approved_By { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Approved_On.
        /// </summary>
        [Column("Time Entry Approved On")] 
        public DateTime? Time_Entry_Approved_On { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Approved_By_Secondary.
        /// </summary>
        [Column("Time Entry Approved By Secondary")] 
        public string Time_Entry_Approved_By_Secondary { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Approved_On_Secondary.
        /// </summary>
        [Column("Time Entry Approved On Secondary")] 
        public DateTime? Time_Entry_Approved_On_Secondary { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Certified_By.
        /// </summary>
        [Column("Time Entry Certified By")] 
        public string Time_Entry_Certified_By { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Certified_On.
        /// </summary>
        [Column("Time Entry Certified On")] 
        public DateTime? Time_Entry_Certified_On { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Date.
        /// </summary>
        [Column("Time Entry Date")] 
        public DateTime? Time_Entry_Date { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Description.
        /// </summary>
        [Column("Time Entry Description")] 
        public string Time_Entry_Description { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Hours.
        /// </summary>
        [Column("Time Entry Hours")] 
        public double Time_Entry_Hours { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Modified_By.
        /// </summary>
        [Column("Time Entry Modified By")] 
        public string Time_Entry_Modified_By { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Modified_On.
        /// </summary>
        [Column("Time Entry Modified On")] 
        public DateTime Time_Entry_Modified_On { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Period.
        /// </summary>
        [Column("Time Entry Period")] 
        public string Time_Entry_Period { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Reference_Number.
        /// </summary>
        [Column("Time Entry Reference Number")] 
        public int Time_Entry_Reference_Number { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Reset_By.
        /// </summary>
        [Column("Time Entry Reset By")] 
        public string Time_Entry_Reset_By { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Reset_On.
        /// </summary>
        [Column("Time Entry Reset On")] 
        public DateTime? Time_Entry_Reset_On { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Subactivity.
        /// </summary>
        [Column("Time Entry Subactivity")] 
        public string Time_Entry_Subactivity { get; set; }

        /// <summary>
        /// Gets or sets the Time_Entry_Subactivity_Sort_Order.
        /// </summary>
        [Column("Time Entry Subactivity Sort Order")] 
        public int? Time_Entry_Subactivity_Sort_Order { get; set; }

        /// <summary>
        /// Gets or sets the Timesheet_Identification_Number.
        /// </summary>
        [Column("Timesheet Identification Number")] 
        public int Timesheet_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Time_Sheet_Identification_Number.
        /// </summary>
        [Column("Time Sheet Identification Number")] 
        public int Time_Sheet_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [Column]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Display_Name.
        /// </summary>
        [Column("Viewing Party Display Name")] 
        public string Viewing_Party_Display_Name { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Email_Address.
        /// </summary>
        [Column("Viewing Party Email Address")] 
        public string Viewing_Party_Email_Address { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_First_Name.
        /// </summary>
        [Column("Viewing Party First Name")] 
        public string Viewing_Party_First_Name { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Identification_Number.
        /// </summary>
        [Column("Viewing Party Identification Number")] 
        public int Viewing_Party_Identification_Number { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Last_Name.
        /// </summary>
        [Column("Viewing Party Last Name")] 
        public string Viewing_Party_Last_Name { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Middle_Name.
        /// </summary>
        [Column("Viewing Party Middle Name")] 
        public string Viewing_Party_Middle_Name { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_Role.
        /// </summary>
        [Column("Viewing Party Role")] 
        public string Viewing_Party_Role { get; set; }

        /// <summary>
        /// Gets or sets the Viewing_Party_User_Name.
        /// </summary>
        [Column("Viewing Party User Name")] 
        public string Viewing_Party_User_Name { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___January.
        /// </summary>
        [Column("Compliance - January")] 
        public bool Compliance___January { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___February.
        /// </summary>
        [Column("Compliance - February")] 
        public bool Compliance___February { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___March.
        /// </summary>
        [Column("Compliance - March")] 
        public bool Compliance___March { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___April.
        /// </summary>
        [Column("Compliance - April")] 
        public bool Compliance___April { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___May.
        /// </summary>
        [Column("Compliance - May")] 
        public bool Compliance___May { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___June.
        /// </summary>
        [Column("Compliance - June")] 
        public bool Compliance___June { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___July.
        /// </summary>
        [Column("Compliance - July")] 
        public bool Compliance___July { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___August.
        /// </summary>
        [Column("Compliance - August")] 
        public bool Compliance___August { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___September.
        /// </summary>
        [Column("Compliance - September")] 
        public bool Compliance___September { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___October.
        /// </summary>
        [Column("Compliance - October")] 
        public bool Compliance___October { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___November.
        /// </summary>
        [Column("Compliance - November")] 
        public bool Compliance___November { get; set; }

        /// <summary>
        /// Gets or sets the Compliance___December.
        /// </summary>
        [Column("Compliance - December")] 
        public bool Compliance___December { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___January.
        /// </summary>
        [Column("Hours Certified - January")] 
        public string Hours_Certified___January { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___February.
        /// </summary>
        [Column("Hours Certified - February")] 
        public string Hours_Certified___February { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___March.
        /// </summary>
        [Column("Hours Certified - March")] 
        public string Hours_Certified___March { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___April.
        /// </summary>
        [Column("Hours Certified - April")] 
        public string Hours_Certified___April { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___May.
        /// </summary>
        [Column("Hours Certified - May")] 
        public string Hours_Certified___May { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___June.
        /// </summary>
        [Column("Hours Certified - June")] 
        public string Hours_Certified___June { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___July.
        /// </summary>
        [Column("Hours Certified - July")] 
        public string Hours_Certified___July { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___August.
        /// </summary>
        [Column("Hours Certified - August")] 
        public string Hours_Certified___August { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___September.
        /// </summary>
        [Column("Hours Certified - September")] 
        public string Hours_Certified___September { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___October.
        /// </summary>
        [Column("Hours Certified - October")] 
        public string Hours_Certified___October { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___November.
        /// </summary>
        [Column("Hours Certified - November")] 
        public string Hours_Certified___November { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___December.
        /// </summary>
        [Column("Hours Certified - December")] 
        public string Hours_Certified___December { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___Total.
        /// </summary>
        [Column("Hours Certified - Total")] 
        public string Hours_Certified___Total { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc_column] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc_column]")]
    [ExplicitColumns]
    public partial class terms_adhoc_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tac_id.
        /// </summary>
        [Column]
        public int tac_id { get; set; }

        /// <summary>
        /// Gets or sets the tac_name.
        /// </summary>
        [Column]
        public string tac_name { get; set; }

        /// <summary>
        /// Gets or sets the tac_format.
        /// </summary>
        [Column]
        public int tac_format { get; set; }

        /// <summary>
        /// Gets or sets the tac_rptmode.
        /// </summary>
        [Column]
        public int tac_rptmode { get; set; }

        /// <summary>
        /// Gets or sets the tac_reqsub.
        /// </summary>
        [Column]
        public int tac_reqsub { get; set; }

        /// <summary>
        /// Gets or sets the tac_fieldtype.
        /// </summary>
        [Column]
        public int tac_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the tac_select_expression.
        /// </summary>
        [Column]
        public string tac_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the tac_source.
        /// </summary>
        [Column]
        public string tac_source { get; set; }

        /// <summary>
        /// Gets or sets the tac_use_custom_expression.
        /// </summary>
        [Column]
        public bool tac_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the tac_extra_select_expression.
        /// </summary>
        [Column]
        public string tac_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc_field_source] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc_field_source]")]
    [PrimaryKey("tafs_id")]
    [ExplicitColumns]
    public partial class terms_adhoc_field_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tafs_id.
        /// </summary>
        [Column]
        public int tafs_id { get; set; }

        /// <summary>
        /// Gets or sets the tafs_source.
        /// </summary>
        [Column]
        public string tafs_source { get; set; }

        /// <summary>
        /// Gets or sets the tafs_preload_expression.
        /// </summary>
        [Column]
        public string tafs_preload_expression { get; set; }

        /// <summary>
        /// Gets or sets the tafs_subquery_expression.
        /// </summary>
        [Column]
        public string tafs_subquery_expression { get; set; }

        /// <summary>
        /// Gets or sets the tafs_table_name.
        /// </summary>
        [Column]
        public string tafs_table_name { get; set; }

        /// <summary>
        /// Gets or sets the tafs_parent_alias.
        /// </summary>
        [Column]
        public string tafs_parent_alias { get; set; }

        /// <summary>
        /// Gets or sets the tafs_join_type.
        /// </summary>
        [Column]
        public string tafs_join_type { get; set; }

        /// <summary>
        /// Gets or sets the tafs_left_column.
        /// </summary>
        [Column]
        public string tafs_left_column { get; set; }

        /// <summary>
        /// Gets or sets the tafs_right_column.
        /// </summary>
        [Column]
        public string tafs_right_column { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc_report] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc_report]")]
    [PrimaryKey("tar_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_adhoc_reportRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tar_rpt_id.
        /// </summary>
        [Column]
        public int tar_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the tar_rpt_date.
        /// </summary>
        [Column]
        public DateTime tar_rpt_date { get; set; }

        /// <summary>
        /// Gets or sets the tar_rpt_u_id.
        /// </summary>
        [Column]
        public int tar_rpt_u_id { get; set; }

        /// <summary>
        /// Gets or sets the tar_rpt_title.
        /// </summary>
        [Column]
        public string tar_rpt_title { get; set; }

        /// <summary>
        /// Gets or sets the tar_rpt_desc.
        /// </summary>
        [Column]
        public string tar_rpt_desc { get; set; }

        /// <summary>
        /// Gets or sets the tar_rpt_sql.
        /// </summary>
        [Column]
        public string tar_rpt_sql { get; set; }

        /// <summary>
        /// Gets or sets the tar_rpt_public.
        /// </summary>
        [Column]
        public bool tar_rpt_public { get; set; }

        /// <summary>
        /// Gets or sets the tar_rpt_template.
        /// </summary>
        [Column]
        public string tar_rpt_template { get; set; }

        /// <summary>
        /// Gets or sets the tar_rpt_o_id.
        /// </summary>
        [Column]
        public int? tar_rpt_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc_report_fields] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc_report_fields]")]
    [PrimaryKey("arf_id")]
    [ExplicitColumns]
    public partial class terms_adhoc_report_fieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arf_id.
        /// </summary>
        [Column]
        public int arf_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_tar_rpt_id.
        /// </summary>
        [Column]
        public int arf_tar_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arf_field.
        /// </summary>
        [Column]
        public string arf_field { get; set; }

        /// <summary>
        /// Gets or sets the arf_name.
        /// </summary>
        [Column]
        public string arf_name { get; set; }

        /// <summary>
        /// Gets or sets the arf_fieldtype.
        /// </summary>
        [Column]
        public int arf_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the arf_select_expression.
        /// </summary>
        [Column]
        public string arf_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_source.
        /// </summary>
        [Column]
        public string arf_source { get; set; }

        /// <summary>
        /// Gets or sets the arf_use_custom_expression.
        /// </summary>
        [Column]
        public bool arf_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the arf_extra_select_expression.
        /// </summary>
        [Column]
        public string arf_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc_report_query] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc_report_query]")]
    [PrimaryKey("arq_id")]
    [ExplicitColumns]
    public partial class terms_adhoc_report_queryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the arq_id.
        /// </summary>
        [Column]
        public int arq_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_tar_rpt_id.
        /// </summary>
        [Column]
        public int arq_tar_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the arq_type.
        /// </summary>
        [Column]
        public int arq_type { get; set; }

        /// <summary>
        /// Gets or sets the arq_value.
        /// </summary>
        [Column]
        public string arq_value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc_report_query_source] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc_report_query_source]")]
    [PrimaryKey("tarqs_id")]
    [ExplicitColumns]
    public partial class terms_adhoc_report_query_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tarqs_id.
        /// </summary>
        [Column]
        public int tarqs_id { get; set; }

        /// <summary>
        /// Gets or sets the tarqs_arq_id.
        /// </summary>
        [Column]
        public int tarqs_arq_id { get; set; }

        /// <summary>
        /// Gets or sets the tarqs_column_name.
        /// </summary>
        [Column]
        public string tarqs_column_name { get; set; }

        /// <summary>
        /// Gets or sets the tarqs_select_expression.
        /// </summary>
        [Column]
        public string tarqs_select_expression { get; set; }

        /// <summary>
        /// Gets or sets the tarqs_source.
        /// </summary>
        [Column]
        public string tarqs_source { get; set; }

        /// <summary>
        /// Gets or sets the tarqs_use_custom_expression.
        /// </summary>
        [Column]
        public bool tarqs_use_custom_expression { get; set; }

        /// <summary>
        /// Gets or sets the tarqs_fieldtype.
        /// </summary>
        [Column]
        public int? tarqs_fieldtype { get; set; }

        /// <summary>
        /// Gets or sets the tarqs_extra_select_expression.
        /// </summary>
        [Column]
        public string tarqs_extra_select_expression { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc_report_renamed_columns] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc_report_renamed_columns]")]
    [PrimaryKey("terms_arrc_id")]
    [ExplicitColumns]
    public partial class terms_adhoc_report_renamed_columnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the terms_arrc_id.
        /// </summary>
        [Column]
        public int terms_arrc_id { get; set; }

        /// <summary>
        /// Gets or sets the terms_arrc_rpt_id.
        /// </summary>
        [Column]
        public int terms_arrc_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the terms_arrc_column_name.
        /// </summary>
        [Column]
        public string terms_arrc_column_name { get; set; }

        /// <summary>
        /// Gets or sets the terms_arrc_display_name.
        /// </summary>
        [Column]
        public string terms_arrc_display_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_adhoc_report_users] table.
    /// </summary>
    [TableName("[dbo].[terms_adhoc_report_users]")]
    [PrimaryKey("aru_rpt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_adhoc_report_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the aru_rpt_id.
        /// </summary>
        [Column]
        public int aru_rpt_id { get; set; }

        /// <summary>
        /// Gets or sets the aru_u_id.
        /// </summary>
        [Column]
        public int aru_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_attachment] table.
    /// </summary>
    [TableName("[dbo].[terms_attachment]")]
    [PrimaryKey("ta_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_attachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ta_id.
        /// </summary>
        [Column]
        public int ta_id { get; set; }

        /// <summary>
        /// Gets or sets the ta_ts_id.
        /// </summary>
        [Column]
        public int ta_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the ta_tat_id.
        /// </summary>
        [Column]
        public int ta_tat_id { get; set; }

        /// <summary>
        /// Gets or sets the ta_subject.
        /// </summary>
        [Column]
        public string ta_subject { get; set; }

        /// <summary>
        /// Gets or sets the ta_add_user.
        /// </summary>
        [Column]
        public string ta_add_user { get; set; }

        /// <summary>
        /// Gets or sets the ta_add_date.
        /// </summary>
        [Column]
        public DateTime ta_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ta_mod_user.
        /// </summary>
        [Column]
        public string ta_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the ta_mod_date.
        /// </summary>
        [Column]
        public DateTime ta_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the ta_sort.
        /// </summary>
        [Column]
        public int ta_sort { get; set; }

        /// <summary>
        /// Gets or sets the ta_url.
        /// </summary>
        [Column]
        public string ta_url { get; set; }

        /// <summary>
        /// Gets or sets the ta_body.
        /// </summary>
        [Column]
        public string ta_body { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_attachment_type] table.
    /// </summary>
    [TableName("[dbo].[terms_attachment_type]")]
    [PrimaryKey("tat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_attachment_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tat_id.
        /// </summary>
        [Column]
        public int tat_id { get; set; }

        /// <summary>
        /// Gets or sets the tat_name.
        /// </summary>
        [Column]
        public string tat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_category] table.
    /// </summary>
    [TableName("[dbo].[terms_category]")]
    [PrimaryKey("tc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tc_id.
        /// </summary>
        [Column]
        public int tc_id { get; set; }

        /// <summary>
        /// Gets or sets the tc_name.
        /// </summary>
        [Column]
        public string tc_name { get; set; }

        /// <summary>
        /// Gets or sets the tc_tst_id.
        /// </summary>
        [Column]
        public int tc_tst_id { get; set; }

        /// <summary>
        /// Gets or sets the tc_sort.
        /// </summary>
        [Column]
        public int tc_sort { get; set; }

        /// <summary>
        /// Gets or sets the tc_rate.
        /// </summary>
        [Column]
        public decimal? tc_rate { get; set; }

        /// <summary>
        /// Gets or sets the tc_tu_id.
        /// </summary>
        [Column]
        public int tc_tu_id { get; set; }

        /// <summary>
        /// Gets or sets the tc_unit_min.
        /// </summary>
        [Column]
        public double? tc_unit_min { get; set; }

        /// <summary>
        /// Gets or sets the tc_unit_max.
        /// </summary>
        [Column]
        public double? tc_unit_max { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_notifications] table.
    /// </summary>
    [TableName("[dbo].[terms_notifications]")]
    [PrimaryKey("tn_id")]
    [ExplicitColumns]
    public partial class terms_notificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tn_id.
        /// </summary>
        [Column]
        public int tn_id { get; set; }

        /// <summary>
        /// Gets or sets the tn_name.
        /// </summary>
        [Column]
        public string tn_name { get; set; }

        /// <summary>
        /// Gets or sets the tn_from.
        /// </summary>
        [Column]
        public string tn_from { get; set; }

        /// <summary>
        /// Gets or sets the tn_subject.
        /// </summary>
        [Column]
        public string tn_subject { get; set; }

        /// <summary>
        /// Gets or sets the tn_body.
        /// </summary>
        [Column]
        public string tn_body { get; set; }

        /// <summary>
        /// Gets or sets the tn_body_links.
        /// </summary>
        [Column]
        public string tn_body_links { get; set; }

        /// <summary>
        /// Gets or sets the tn_day.
        /// </summary>
        [Column]
        public short tn_day { get; set; }

        /// <summary>
        /// Gets or sets the tn_interval.
        /// </summary>
        [Column]
        public short tn_interval { get; set; }

        /// <summary>
        /// Gets or sets the tn_cc_vp.
        /// </summary>
        [Column]
        public short tn_cc_vp { get; set; }

        /// <summary>
        /// Gets or sets the tn_cc_rp.
        /// </summary>
        [Column]
        public short tn_cc_rp { get; set; }

        /// <summary>
        /// Gets or sets the tn_send.
        /// </summary>
        [Column]
        public short tn_send { get; set; }

        /// <summary>
        /// Gets or sets the tn_sub.
        /// </summary>
        [Column]
        public short tn_sub { get; set; }

        /// <summary>
        /// Gets or sets the tn_triggered.
        /// </summary>
        [Column]
        public short tn_triggered { get; set; }

        /// <summary>
        /// Gets or sets the tn_period_type.
        /// </summary>
        [Column]
        public short tn_period_type { get; set; }

        /// <summary>
        /// Gets or sets the tn_type.
        /// </summary>
        [Column]
        public short tn_type { get; set; }

        /// <summary>
        /// Gets or sets the tn_email_driven_by.
        /// </summary>
        [Column]
        public int? tn_email_driven_by { get; set; }

        /// <summary>
        /// Gets or sets the tn_cc_rpp.
        /// </summary>
        [Column]
        public int tn_cc_rpp { get; set; }

        /// <summary>
        /// Gets or sets the tn_start_x_days_after_period.
        /// </summary>
        [Column]
        public int? tn_start_x_days_after_period { get; set; }

        /// <summary>
        /// Gets or sets the tn_total_emails.
        /// </summary>
        [Column]
        public int? tn_total_emails { get; set; }

        /// <summary>
        /// Gets or sets the tn_o_id.
        /// </summary>
        [Column]
        public int? tn_o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_option] table.
    /// </summary>
    [TableName("[dbo].[terms_option]")]
    [PrimaryKey("to_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_optionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the to_o_id.
        /// </summary>
        [Column]
        public int to_o_id { get; set; }

        /// <summary>
        /// Gets or sets the to_docpath.
        /// </summary>
        [Column]
        public string to_docpath { get; set; }

        /// <summary>
        /// Gets or sets the to_rptmode.
        /// </summary>
        [Column]
        public int to_rptmode { get; set; }

        /// <summary>
        /// Gets or sets the to_reqsub.
        /// </summary>
        [Column]
        public int to_reqsub { get; set; }

        /// <summary>
        /// Gets or sets the to_reqdesc.
        /// </summary>
        [Column]
        public int to_reqdesc { get; set; }

        /// <summary>
        /// Gets or sets the to_entry.
        /// </summary>
        [Column]
        public string to_entry { get; set; }

        /// <summary>
        /// Gets or sets the to_certification.
        /// </summary>
        [Column]
        public string to_certification { get; set; }

        /// <summary>
        /// Gets or sets the to_approval.
        /// </summary>
        [Column]
        public string to_approval { get; set; }

        /// <summary>
        /// Gets or sets the to_app_path.
        /// </summary>
        [Column]
        public string to_app_path { get; set; }

        /// <summary>
        /// Gets or sets the to_vp_add.
        /// </summary>
        [Column]
        public int to_vp_add { get; set; }

        /// <summary>
        /// Gets or sets the to_default_date.
        /// </summary>
        [Column]
        public int to_default_date { get; set; }

        /// <summary>
        /// Gets or sets the to_email_as_usernames.
        /// </summary>
        [Column]
        public int to_email_as_usernames { get; set; }

        /// <summary>
        /// Gets or sets the to_rejection.
        /// </summary>
        [Column]
        public string to_rejection { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_period_detail] table.
    /// </summary>
    [TableName("[dbo].[terms_period_detail]")]
    [PrimaryKey("tpd_id")]
    [ExplicitColumns]
    public partial class terms_period_detailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tpd_id.
        /// </summary>
        [Column]
        public int tpd_id { get; set; }

        /// <summary>
        /// Gets or sets the tpd_tsp_id.
        /// </summary>
        [Column]
        public int tpd_tsp_id { get; set; }

        /// <summary>
        /// Gets or sets the tpd_process_mode.
        /// </summary>
        [Column]
        public int tpd_process_mode { get; set; }

        /// <summary>
        /// Gets or sets the tpd_tc_id.
        /// </summary>
        [Column]
        public int tpd_tc_id { get; set; }

        /// <summary>
        /// Gets or sets the tpd_amount.
        /// </summary>
        [Column]
        public double? tpd_amount { get; set; }

        /// <summary>
        /// Gets or sets the tpd_action_order.
        /// </summary>
        [Column]
        public int tpd_action_order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_policy] table.
    /// </summary>
    [TableName("[dbo].[terms_policy]")]
    [PrimaryKey("tp_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_policyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tp_id.
        /// </summary>
        [Column]
        public int tp_id { get; set; }

        /// <summary>
        /// Gets or sets the tp_o_id.
        /// </summary>
        [Column]
        public int tp_o_id { get; set; }

        /// <summary>
        /// Gets or sets the tp_tst_id.
        /// </summary>
        [Column]
        public int tp_tst_id { get; set; }

        /// <summary>
        /// Gets or sets the tp_title.
        /// </summary>
        [Column]
        public string tp_title { get; set; }

        /// <summary>
        /// Gets or sets the tp_path.
        /// </summary>
        [Column]
        public string tp_path { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_setting] table.
    /// </summary>
    [TableName("[dbo].[terms_setting]")]
    [PrimaryKey("ts_id")]
    [ExplicitColumns]
    public partial class terms_settingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ts_id.
        /// </summary>
        [Column]
        public int ts_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_week_cutoff.
        /// </summary>
        [Column]
        public int ts_week_cutoff { get; set; }

        /// <summary>
        /// Gets or sets the ts_biweek_cutoff.
        /// </summary>
        [Column]
        public int ts_biweek_cutoff { get; set; }

        /// <summary>
        /// Gets or sets the ts_semimth_cutoff.
        /// </summary>
        [Column]
        public int ts_semimth_cutoff { get; set; }

        /// <summary>
        /// Gets or sets the ts_mth_cutoff.
        /// </summary>
        [Column]
        public int ts_mth_cutoff { get; set; }

        /// <summary>
        /// Gets or sets the ts_qtr_cutoff.
        /// </summary>
        [Column]
        public int ts_qtr_cutoff { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_subcategory] table.
    /// </summary>
    [TableName("[dbo].[terms_subcategory]")]
    [PrimaryKey("tsc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_subcategoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsc_id.
        /// </summary>
        [Column]
        public int tsc_id { get; set; }

        /// <summary>
        /// Gets or sets the tsc_name.
        /// </summary>
        [Column]
        public string tsc_name { get; set; }

        /// <summary>
        /// Gets or sets the tsc_tc_id.
        /// </summary>
        [Column]
        public int tsc_tc_id { get; set; }

        /// <summary>
        /// Gets or sets the tsc_sort.
        /// </summary>
        [Column]
        public int tsc_sort { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_time_entry] table.
    /// </summary>
    [TableName("[dbo].[terms_time_entry]")]
    [PrimaryKey("te_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_time_entryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the te_id.
        /// </summary>
        [Column]
        public int te_id { get; set; }

        /// <summary>
        /// Gets or sets the te_ts_id.
        /// </summary>
        [Column]
        public int te_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the te_tc_id.
        /// </summary>
        [Column]
        public int te_tc_id { get; set; }

        /// <summary>
        /// Gets or sets the te_tsc_id.
        /// </summary>
        [Column]
        public int? te_tsc_id { get; set; }

        /// <summary>
        /// Gets or sets the te_year.
        /// </summary>
        [Column]
        public int? te_year { get; set; }

        /// <summary>
        /// Gets or sets the te_month.
        /// </summary>
        [Column]
        public int? te_month { get; set; }

        /// <summary>
        /// Gets or sets the te_date.
        /// </summary>
        [Column]
        public DateTime? te_date { get; set; }

        /// <summary>
        /// Gets or sets the te_hours.
        /// </summary>
        [Column]
        public double te_hours { get; set; }

        /// <summary>
        /// Gets or sets the te_desc.
        /// </summary>
        [Column]
        public string te_desc { get; set; }

        /// <summary>
        /// Gets or sets the te_certified.
        /// </summary>
        [Column]
        public int te_certified { get; set; }

        /// <summary>
        /// Gets or sets the te_approved.
        /// </summary>
        [Column]
        public int te_approved { get; set; }

        /// <summary>
        /// Gets or sets the te_add_user.
        /// </summary>
        [Column]
        public string te_add_user { get; set; }

        /// <summary>
        /// Gets or sets the te_add_date.
        /// </summary>
        [Column]
        public DateTime te_add_date { get; set; }

        /// <summary>
        /// Gets or sets the te_mod_user.
        /// </summary>
        [Column]
        public string te_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the te_mod_date.
        /// </summary>
        [Column]
        public DateTime te_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the te_certified_user.
        /// </summary>
        [Column]
        public string te_certified_user { get; set; }

        /// <summary>
        /// Gets or sets the te_certified_date.
        /// </summary>
        [Column]
        public DateTime? te_certified_date { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_user.
        /// </summary>
        [Column]
        public string te_approved_user { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_date.
        /// </summary>
        [Column]
        public DateTime? te_approved_date { get; set; }

        /// <summary>
        /// Gets or sets the te_reset_user.
        /// </summary>
        [Column]
        public string te_reset_user { get; set; }

        /// <summary>
        /// Gets or sets the te_reset_date.
        /// </summary>
        [Column]
        public DateTime? te_reset_date { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_hours.
        /// </summary>
        [Column]
        public double? te_approved_hours { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_comment.
        /// </summary>
        [Column]
        public string te_approved_comment { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_second_comment.
        /// </summary>
        [Column]
        public string te_approved_second_comment { get; set; }

        /// <summary>
        /// Gets or sets the te_decertified_comment.
        /// </summary>
        [Column]
        public string te_decertified_comment { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_second_user.
        /// </summary>
        [Column]
        public string te_approved_second_user { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_second_date.
        /// </summary>
        [Column]
        public DateTime? te_approved_second_date { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_second_hours.
        /// </summary>
        [Column]
        public double? te_approved_second_hours { get; set; }

        /// <summary>
        /// Gets or sets the te_orig_id.
        /// </summary>
        [Column]
        public int? te_orig_id { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_second_amount.
        /// </summary>
        [Column]
        public double? te_approved_second_amount { get; set; }

        /// <summary>
        /// Gets or sets the te_approved_amount.
        /// </summary>
        [Column]
        public double? te_approved_amount { get; set; }

        /// <summary>
        /// Gets or sets the te_processed.
        /// </summary>
        [Column]
        public int te_processed { get; set; }

        /// <summary>
        /// Gets or sets the te_processed_user.
        /// </summary>
        [Column]
        public string te_processed_user { get; set; }

        /// <summary>
        /// Gets or sets the te_processed_date.
        /// </summary>
        [Column]
        public DateTime? te_processed_date { get; set; }

        /// <summary>
        /// Gets or sets the te_processed_amount.
        /// </summary>
        [Column]
        public double? te_processed_amount { get; set; }

        /// <summary>
        /// Gets or sets the te_processed_comment.
        /// </summary>
        [Column]
        public string te_processed_comment { get; set; }

        /// <summary>
        /// Gets or sets the te_tsp_id.
        /// </summary>
        [Column]
        public int? te_tsp_id { get; set; }

        /// <summary>
        /// Gets or sets the te_certified_rate.
        /// </summary>
        [Column]
        public decimal? te_certified_rate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_time_sheet_category] table.
    /// </summary>
    [TableName("[dbo].[terms_time_sheet_category]")]
    [PrimaryKey("tsc_ts_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class terms_time_sheet_categoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsc_ts_id.
        /// </summary>
        [Column]
        public int tsc_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the tsc_tc_id.
        /// </summary>
        [Column]
        public int tsc_tc_id { get; set; }

        /// <summary>
        /// Gets or sets the tsc_rate.
        /// </summary>
        [Column]
        public decimal? tsc_rate { get; set; }

        /// <summary>
        /// Gets or sets the tsc_unit_min.
        /// </summary>
        [Column]
        public double? tsc_unit_min { get; set; }

        /// <summary>
        /// Gets or sets the tsc_unit_max.
        /// </summary>
        [Column]
        public double? tsc_unit_max { get; set; }

        /// <summary>
        /// Gets or sets the tsc_tu_id.
        /// </summary>
        [Column]
        public int? tsc_tu_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_time_sheet_history] table.
    /// </summary>
    [TableName("[dbo].[terms_time_sheet_history]")]
    [PrimaryKey("tsh_id")]
    [ExplicitColumns]
    public partial class terms_time_sheet_historyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsh_id.
        /// </summary>
        [Column]
        public int tsh_id { get; set; }

        /// <summary>
        /// Gets or sets the tsh_ts_id.
        /// </summary>
        [Column]
        public int tsh_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the tsh_activity_evt.
        /// </summary>
        [Column]
        public int tsh_activity_evt { get; set; }

        /// <summary>
        /// Gets or sets the tsh_period_end_date.
        /// </summary>
        [Column]
        public DateTime tsh_period_end_date { get; set; }

        /// <summary>
        /// Gets or sets the tsh_activity_date.
        /// </summary>
        [Column]
        public DateTime tsh_activity_date { get; set; }

        /// <summary>
        /// Gets or sets the tsh_activity_user.
        /// </summary>
        [Column]
        public string tsh_activity_user { get; set; }

        /// <summary>
        /// Gets or sets the tsh_activity_hours.
        /// </summary>
        [Column]
        public double? tsh_activity_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsh_activity_amount.
        /// </summary>
        [Column]
        public double? tsh_activity_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsh_activity_comment.
        /// </summary>
        [Column]
        public string tsh_activity_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsh_tsp_id.
        /// </summary>
        [Column]
        public int? tsh_tsp_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_time_sheet_period] table.
    /// </summary>
    [TableName("[dbo].[terms_time_sheet_period]")]
    [PrimaryKey("tsp_id")]
    [ExplicitColumns]
    public partial class terms_time_sheet_periodRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsp_id.
        /// </summary>
        [Column]
        public int tsp_id { get; set; }

        /// <summary>
        /// Gets or sets the tsp_ts_id.
        /// </summary>
        [Column]
        public int tsp_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the tsp_period_start_date.
        /// </summary>
        [Column]
        public DateTime tsp_period_start_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_period_end_date.
        /// </summary>
        [Column]
        public DateTime tsp_period_end_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_certified.
        /// </summary>
        [Column]
        public int tsp_certified { get; set; }

        /// <summary>
        /// Gets or sets the tsp_certified_hours.
        /// </summary>
        [Column]
        public double? tsp_certified_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_certified_user.
        /// </summary>
        [Column]
        public string tsp_certified_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_certified_date.
        /// </summary>
        [Column]
        public DateTime? tsp_certified_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approval_count.
        /// </summary>
        [Column]
        public int tsp_approval_count { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_hours.
        /// </summary>
        [Column]
        public double? tsp_approved_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_user.
        /// </summary>
        [Column]
        public string tsp_approved_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_date.
        /// </summary>
        [Column]
        public DateTime? tsp_approved_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_comment.
        /// </summary>
        [Column]
        public string tsp_approved_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_amount.
        /// </summary>
        [Column]
        public double? tsp_approved_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_hours.
        /// </summary>
        [Column]
        public double? tsp_approved_second_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_user.
        /// </summary>
        [Column]
        public string tsp_approved_second_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_date.
        /// </summary>
        [Column]
        public DateTime? tsp_approved_second_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_comment.
        /// </summary>
        [Column]
        public string tsp_approved_second_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_amount.
        /// </summary>
        [Column]
        public double? tsp_approved_second_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_processed.
        /// </summary>
        [Column]
        public int tsp_processed { get; set; }

        /// <summary>
        /// Gets or sets the tsp_processed_user.
        /// </summary>
        [Column]
        public string tsp_processed_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_processed_date.
        /// </summary>
        [Column]
        public DateTime? tsp_processed_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_processed_amount.
        /// </summary>
        [Column]
        public double? tsp_processed_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_processed_comment.
        /// </summary>
        [Column]
        public string tsp_processed_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_decertified_user.
        /// </summary>
        [Column]
        public string tsp_decertified_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_decertified_date.
        /// </summary>
        [Column]
        public DateTime? tsp_decertified_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_decertified_comment.
        /// </summary>
        [Column]
        public string tsp_decertified_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_period_mode.
        /// </summary>
        [Column]
        public int tsp_period_mode { get; set; }

        /// <summary>
        /// Gets or sets the tsp_locked.
        /// </summary>
        [Column]
        public bool tsp_locked { get; set; }

        /// <summary>
        /// Gets or sets the tsp_unlock_user.
        /// </summary>
        [Column]
        public string tsp_unlock_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_unlock_comment.
        /// </summary>
        [Column]
        public string tsp_unlock_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_unlock_date.
        /// </summary>
        [Column]
        public DateTime? tsp_unlock_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_certified_amount.
        /// </summary>
        [Column]
        public double? tsp_certified_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approval_count_multi.
        /// </summary>
        [Column]
        public int? tsp_approval_count_multi { get; set; }

        /// <summary>
        /// Gets or sets the tsp_most_recent_approval_ttspa_id.
        /// </summary>
        [Column]
        public int? tsp_most_recent_approval_ttspa_id { get; set; }

        /// <summary>
        /// Gets or sets the tsp_original_tsp_id.
        /// </summary>
        [Column]
        public int? tsp_original_tsp_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_time_sheet_period_approval] table.
    /// </summary>
    [TableName("[dbo].[terms_time_sheet_period_approval]")]
    [PrimaryKey("ttspa_id")]
    [ExplicitColumns]
    public partial class terms_time_sheet_period_approvalRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ttspa_id.
        /// </summary>
        [Column]
        public int ttspa_id { get; set; }

        /// <summary>
        /// Gets or sets the ttspa_tsp_id.
        /// </summary>
        [Column]
        public int ttspa_tsp_id { get; set; }

        /// <summary>
        /// Gets or sets the ttspa_approved_user_account.
        /// </summary>
        [Column]
        public string ttspa_approved_user_account { get; set; }

        /// <summary>
        /// Gets or sets the ttspa_approved_date.
        /// </summary>
        [Column]
        public DateTime ttspa_approved_date { get; set; }

        /// <summary>
        /// Gets or sets the ttspa_approved_hours.
        /// </summary>
        [Column]
        public double? ttspa_approved_hours { get; set; }

        /// <summary>
        /// Gets or sets the ttspa_approved_amount.
        /// </summary>
        [Column]
        public double? ttspa_approved_amount { get; set; }

        /// <summary>
        /// Gets or sets the ttspa_approved_comment.
        /// </summary>
        [Column]
        public string ttspa_approved_comment { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_unit] table.
    /// </summary>
    [TableName("[dbo].[terms_unit]")]
    [PrimaryKey("tu_id")]
    [ExplicitColumns]
    public partial class terms_unitRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tu_id.
        /// </summary>
        [Column]
        public int tu_id { get; set; }

        /// <summary>
        /// Gets or sets the tu_name.
        /// </summary>
        [Column]
        public string tu_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[terms_user_permissions] table.
    /// </summary>
    [TableName("[dbo].[terms_user_permissions]")]
    [PrimaryKey("tup_id")]
    [ExplicitColumns]
    public partial class terms_user_permissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tup_id.
        /// </summary>
        [Column]
        public int tup_id { get; set; }

        /// <summary>
        /// Gets or sets the tup_u_id.
        /// </summary>
        [Column]
        public int tup_u_id { get; set; }

        /// <summary>
        /// Gets or sets the tup_tst_id.
        /// </summary>
        [Column]
        public int? tup_tst_id { get; set; }

        /// <summary>
        /// Gets or sets the tup_e_id.
        /// </summary>
        [Column]
        public int? tup_e_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[theme] table.
    /// </summary>
    [TableName("[dbo].[theme]")]
    [PrimaryKey("t_o_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class themeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the t_o_id.
        /// </summary>
        [Column]
        public int t_o_id { get; set; }

        /// <summary>
        /// Gets or sets the t_cssclass.
        /// </summary>
        [Column]
        public string t_cssclass { get; set; }

        /// <summary>
        /// Gets or sets the t_product.
        /// </summary>
        [Column]
        public int t_product { get; set; }

        /// <summary>
        /// Gets or sets the t_cssvalue.
        /// </summary>
        [Column]
        public string t_cssvalue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_sheet] table.
    /// </summary>
    [TableName("[dbo].[time_sheet]")]
    [PrimaryKey("ts_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class time_sheetRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ts_id.
        /// </summary>
        [Column]
        public int ts_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_e_id.
        /// </summary>
        [Column]
        public int ts_e_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_od_id.
        /// </summary>
        [Column]
        public int ts_od_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_tst_id.
        /// </summary>
        [Column]
        public int ts_tst_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_date_eff.
        /// </summary>
        [Column]
        public DateTime ts_date_eff { get; set; }

        /// <summary>
        /// Gets or sets the ts_date_exp.
        /// </summary>
        [Column]
        public DateTime ts_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the ts_hours.
        /// </summary>
        [Column]
        public double ts_hours { get; set; }

        /// <summary>
        /// Gets or sets the ts_active.
        /// </summary>
        [Column]
        public bool ts_active { get; set; }

        /// <summary>
        /// Gets or sets the ts_u_id_rpt.
        /// </summary>
        [Column]
        public int ts_u_id_rpt { get; set; }

        /// <summary>
        /// Gets or sets the ts_title.
        /// </summary>
        [Column]
        public string ts_title { get; set; }

        /// <summary>
        /// Gets or sets the ts_archive_allow.
        /// </summary>
        [Column]
        public int? ts_archive_allow { get; set; }

        /// <summary>
        /// Gets or sets the ts_salutation.
        /// </summary>
        [Column]
        public string ts_salutation { get; set; }

        /// <summary>
        /// Gets or sets the ts_c_id.
        /// </summary>
        [Column]
        public int? ts_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_available_months.
        /// </summary>
        [Column]
        public short ts_available_months { get; set; }

        /// <summary>
        /// Gets or sets the ts_group.
        /// </summary>
        [Column]
        public string ts_group { get; set; }

        /// <summary>
        /// Gets or sets the ts_rate.
        /// </summary>
        [Column]
        public double ts_rate { get; set; }

        /// <summary>
        /// Gets or sets the ts_rate_unit.
        /// </summary>
        [Column]
        public string ts_rate_unit { get; set; }

        /// <summary>
        /// Gets or sets the ts_o_id.
        /// </summary>
        [Column]
        public int ts_o_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_awo_id.
        /// </summary>
        [Column]
        public int ts_awo_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_desc.
        /// </summary>
        [Column]
        public string ts_desc { get; set; }

        /// <summary>
        /// Gets or sets the ts_date_irp.
        /// </summary>
        [Column]
        public DateTime? ts_date_irp { get; set; }

        /// <summary>
        /// Gets or sets the ts_add_date.
        /// </summary>
        [Column]
        public DateTime? ts_add_date { get; set; }

        /// <summary>
        /// Gets or sets the ts_add_u_id.
        /// </summary>
        [Column]
        public int ts_add_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ts_period_mode.
        /// </summary>
        [Column]
        public int ts_period_mode { get; set; }

        /// <summary>
        /// Gets or sets the ts_date_period_start.
        /// </summary>
        [Column]
        public DateTime? ts_date_period_start { get; set; }

        /// <summary>
        /// Gets or sets the ts_cert_cutoff.
        /// </summary>
        [Column]
        public int ts_cert_cutoff { get; set; }

        /// <summary>
        /// Gets or sets the ts_allow_nightly_notification_emails.
        /// </summary>
        [Column]
        public bool ts_allow_nightly_notification_emails { get; set; }

        /// <summary>
        /// Gets or sets the ts_accounting.
        /// </summary>
        [Column]
        public string ts_accounting { get; set; }

        /// <summary>
        /// Gets or sets the ts_approver_count.
        /// </summary>
        [Column]
        public int? ts_approver_count { get; set; }

        /// <summary>
        /// Gets or sets the ts_resp_proxy.
        /// </summary>
        [Column]
        public int? ts_resp_proxy { get; set; }

        /// <summary>
        /// Gets or sets the ts_max_annual_compensation.
        /// </summary>
        [Column]
        public decimal? ts_max_annual_compensation { get; set; }

        /// <summary>
        /// Gets or sets the ts_first_year_payment_to_date.
        /// </summary>
        [Column]
        public decimal ts_first_year_payment_to_date { get; set; }

        /// <summary>
        /// Gets or sets the ts_max_units_per_period.
        /// </summary>
        [Column]
        public double? ts_max_units_per_period { get; set; }

        /// <summary>
        /// Gets or sets the ts_min_units_per_period.
        /// </summary>
        [Column]
        public double? ts_min_units_per_period { get; set; }

        /// <summary>
        /// Gets or sets the ts_track_unit_min_max_by_period.
        /// </summary>
        [Column]
        public bool ts_track_unit_min_max_by_period { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_1.
        /// </summary>
        [Column]
        public string ts_field_1 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_2.
        /// </summary>
        [Column]
        public string ts_field_2 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_3.
        /// </summary>
        [Column]
        public string ts_field_3 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_4.
        /// </summary>
        [Column]
        public string ts_field_4 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_5.
        /// </summary>
        [Column]
        public string ts_field_5 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_6.
        /// </summary>
        [Column]
        public string ts_field_6 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_7.
        /// </summary>
        [Column]
        public string ts_field_7 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_8.
        /// </summary>
        [Column]
        public string ts_field_8 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_9.
        /// </summary>
        [Column]
        public string ts_field_9 { get; set; }

        /// <summary>
        /// Gets or sets the ts_field_10.
        /// </summary>
        [Column]
        public string ts_field_10 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_sheet_activity_type] table.
    /// </summary>
    [TableName("[dbo].[time_sheet_activity_type]")]
    [PrimaryKey("tsat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class time_sheet_activity_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsat_id.
        /// </summary>
        [Column]
        public int tsat_id { get; set; }

        /// <summary>
        /// Gets or sets the tsat_name.
        /// </summary>
        [Column]
        public string tsat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_sheet_email] table.
    /// </summary>
    [TableName("[dbo].[time_sheet_email]")]
    [PrimaryKey("tse_id")]
    [ExplicitColumns]
    public partial class time_sheet_emailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tse_id.
        /// </summary>
        [Column]
        public int tse_id { get; set; }

        /// <summary>
        /// Gets or sets the tse_ts_id.
        /// </summary>
        [Column]
        public int tse_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the tse_u_id.
        /// </summary>
        [Column]
        public string tse_u_id { get; set; }

        /// <summary>
        /// Gets or sets the tse_date.
        /// </summary>
        [Column]
        public DateTime tse_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_sheet_type] table.
    /// </summary>
    [TableName("[dbo].[time_sheet_type]")]
    [PrimaryKey("tst_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class time_sheet_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tst_id.
        /// </summary>
        [Column]
        public int tst_id { get; set; }

        /// <summary>
        /// Gets or sets the tst_name.
        /// </summary>
        [Column]
        public string tst_name { get; set; }

        /// <summary>
        /// Gets or sets the tst_o_id.
        /// </summary>
        [Column]
        public int tst_o_id { get; set; }

        /// <summary>
        /// Gets or sets the tst_max_units_per_period.
        /// </summary>
        [Column]
        public double? tst_max_units_per_period { get; set; }

        /// <summary>
        /// Gets or sets the tst_min_units_per_period.
        /// </summary>
        [Column]
        public double? tst_min_units_per_period { get; set; }

        /// <summary>
        /// Gets or sets the tst_track_unit_min_max_by_period.
        /// </summary>
        [Column]
        public bool tst_track_unit_min_max_by_period { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_sheet_user] table.
    /// </summary>
    [TableName("[dbo].[time_sheet_user]")]
    [PrimaryKey("tsu_id")]
    [ExplicitColumns]
    public partial class time_sheet_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsu_id.
        /// </summary>
        [Column]
        public int tsu_id { get; set; }

        /// <summary>
        /// Gets or sets the tsu_ts_id.
        /// </summary>
        [Column]
        public int tsu_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the tsu_u_id.
        /// </summary>
        [Column]
        public int tsu_u_id { get; set; }

        /// <summary>
        /// Gets or sets the tsu_tsut_id.
        /// </summary>
        [Column]
        public int tsu_tsut_id { get; set; }

        /// <summary>
        /// Gets or sets the tsu_order_of_approval.
        /// </summary>
        [Column]
        public int? tsu_order_of_approval { get; set; }

        /// <summary>
        /// Gets or sets the tsu_proxied_u_id.
        /// </summary>
        [Column]
        public int? tsu_proxied_u_id { get; set; }

        /// <summary>
        /// Gets or sets the tsu_proxy_start_date.
        /// </summary>
        [Column]
        public DateTime? tsu_proxy_start_date { get; set; }

        /// <summary>
        /// Gets or sets the tsu_proxy_end_date.
        /// </summary>
        [Column]
        public DateTime? tsu_proxy_end_date { get; set; }

        /// <summary>
        /// Gets or sets the tsu_cc_while_away.
        /// </summary>
        [Column]
        public bool tsu_cc_while_away { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_sheet_user_temporary] table.
    /// </summary>
    [TableName("[dbo].[time_sheet_user_temporary]")]
    [ExplicitColumns]
    public partial class time_sheet_user_temporaryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsu_ts_id.
        /// </summary>
        [Column]
        public int tsu_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the tsu_u_id.
        /// </summary>
        [Column]
        public int tsu_u_id { get; set; }

        /// <summary>
        /// Gets or sets the tsu_primary.
        /// </summary>
        [Column]
        public short tsu_primary { get; set; }

        /// <summary>
        /// Gets or sets the tsu_finance.
        /// </summary>
        [Column]
        public short tsu_finance { get; set; }

        /// <summary>
        /// Gets or sets the tsu_secondary.
        /// </summary>
        [Column]
        public int tsu_secondary { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_sheet_user_type] table.
    /// </summary>
    [TableName("[dbo].[time_sheet_user_type]")]
    [PrimaryKey("tsut_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class time_sheet_user_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsut_id.
        /// </summary>
        [Column]
        public int tsut_id { get; set; }

        /// <summary>
        /// Gets or sets the tsut_name.
        /// </summary>
        [Column]
        public string tsut_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_zone] table.
    /// </summary>
    [TableName("[dbo].[time_zone]")]
    [PrimaryKey("tz_id")]
    [ExplicitColumns]
    public partial class time_zoneRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tz_id.
        /// </summary>
        [Column]
        public int tz_id { get; set; }

        /// <summary>
        /// Gets or sets the tz_identifier.
        /// </summary>
        [Column]
        public string tz_identifier { get; set; }

        /// <summary>
        /// Gets or sets the tz_display.
        /// </summary>
        [Column]
        public string tz_display { get; set; }

        /// <summary>
        /// Gets or sets the tz_offset.
        /// </summary>
        [Column]
        public decimal tz_offset { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[time_zone_daylight_savings] table.
    /// </summary>
    [TableName("[dbo].[time_zone_daylight_savings]")]
    [PrimaryKey("tds_Year", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class time_zone_daylight_savingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tds_Year.
        /// </summary>
        [Column]
        public int tds_Year { get; set; }

        /// <summary>
        /// Gets or sets the tds_tz_id.
        /// </summary>
        [Column]
        public int tds_tz_id { get; set; }

        /// <summary>
        /// Gets or sets the tds_start_date.
        /// </summary>
        [Column]
        public DateTime tds_start_date { get; set; }

        /// <summary>
        /// Gets or sets the tds_end_date.
        /// </summary>
        [Column]
        public DateTime tds_end_date { get; set; }

        /// <summary>
        /// Gets or sets the tds_start_day_of_month.
        /// </summary>
        [Column]
        public int tds_start_day_of_month { get; set; }

        /// <summary>
        /// Gets or sets the tds_end_day_of_month.
        /// </summary>
        [Column]
        public int tds_end_day_of_month { get; set; }

        /// <summary>
        /// Gets or sets the tds_start_month_num.
        /// </summary>
        [Column]
        public int tds_start_month_num { get; set; }

        /// <summary>
        /// Gets or sets the tds_end_month_num.
        /// </summary>
        [Column]
        public int tds_end_month_num { get; set; }

        /// <summary>
        /// Gets or sets the tds_start_time_of_day.
        /// </summary>
        [Column]
        public DateTime tds_start_time_of_day { get; set; }

        /// <summary>
        /// Gets or sets the tds_end_time_of_day.
        /// </summary>
        [Column]
        public DateTime tds_end_time_of_day { get; set; }

        /// <summary>
        /// Gets or sets the tds_offset_for_dst.
        /// </summary>
        [Column]
        public decimal tds_offset_for_dst { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[TimesheetAccountingServiceProvider] table.
    /// </summary>
    [TableName("[dbo].[TimesheetAccountingServiceProvider]")]
    [PrimaryKey("TimesheetId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class TimesheetAccountingServiceProviderRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TimesheetId.
        /// </summary>
        [Column]
        public int TimesheetId { get; set; }

        /// <summary>
        /// Gets or sets the AccountingServiceProviderId.
        /// </summary>
        [Column]
        public int AccountingServiceProviderId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[TimeSheetAttachment] table.
    /// </summary>
    [TableName("[dbo].[TimeSheetAttachment]")]
    [PrimaryKey("TimeSheetAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class TimeSheetAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TimeSheetAttachmentId.
        /// </summary>
        [Column]
        public long TimeSheetAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the TermsAttachmentId.
        /// </summary>
        [Column]
        public int TermsAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the TimeSheetId.
        /// </summary>
        [Column]
        public int TimeSheetId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[title] table.
    /// </summary>
    [TableName("[dbo].[title]")]
    [PrimaryKey("t_id")]
    [ExplicitColumns]
    public partial class titleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the t_id.
        /// </summary>
        [Column]
        public int t_id { get; set; }

        /// <summary>
        /// Gets or sets the t_title.
        /// </summary>
        [Column]
        public string t_title { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[TrackedConversation] table.
    /// </summary>
    [TableName("[dbo].[TrackedConversation]")]
    [PrimaryKey("TrackedConversationId")]
    [ExplicitColumns]
    public partial class TrackedConversationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TrackedConversationId.
        /// </summary>
        [Column]
        public long TrackedConversationId { get; set; }

        /// <summary>
        /// Gets or sets the OriginalTrackedMessageId.
        /// </summary>
        [Column]
        public long OriginalTrackedMessageId { get; set; }

        /// <summary>
        /// Gets or sets the CurrentTrackedMessageId.
        /// </summary>
        [Column]
        public long CurrentTrackedMessageId { get; set; }

        /// <summary>
        /// Gets or sets the IsArchived.
        /// </summary>
        [Column]
        public bool IsArchived { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[TrackedMessage] table.
    /// </summary>
    [TableName("[dbo].[TrackedMessage]")]
    [PrimaryKey("TrackedMessageId")]
    [ExplicitColumns]
    public partial class TrackedMessageRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TrackedMessageId.
        /// </summary>
        [Column]
        public long TrackedMessageId { get; set; }

        /// <summary>
        /// Gets or sets the SentByPersonId.
        /// </summary>
        [Column]
        public int SentByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the SentByIdentifier.
        /// </summary>
        [Column]
        public string SentByIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the Content.
        /// </summary>
        [Column]
        public string Content { get; set; }

        /// <summary>
        /// Gets or sets the SentTime.
        /// </summary>
        [Column]
        public DateTimeOffset SentTime { get; set; }

        /// <summary>
        /// Gets or sets the LastEditedTime.
        /// </summary>
        [Column]
        public DateTimeOffset LastEditedTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedDateValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedDateValue]")]
    [PrimaryKey("UnifiedDateValueId")]
    [ExplicitColumns]
    public partial class UnifiedDateValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedDateValueId.
        /// </summary>
        [Column]
        public long UnifiedDateValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the DateValue.
        /// </summary>
        [Column]
        public DateTimeOffset DateValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedField] table.
    /// </summary>
    [TableName("[dbo].[UnifiedField]")]
    [PrimaryKey("UnifiedFieldId")]
    [ExplicitColumns]
    public partial class UnifiedFieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldTypeId.
        /// </summary>
        [Column]
        public int UnifiedFieldTypeId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedValueTypeId.
        /// </summary>
        [Column]
        public int UnifiedValueTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Caption.
        /// </summary>
        [Column]
        public string Caption { get; set; }

        /// <summary>
        /// Gets or sets the Label.
        /// </summary>
        [Column]
        public string Label { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldAttachment] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldAttachment]")]
    [PrimaryKey("UnifiedFieldAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UnifiedFieldAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldAttachmentId.
        /// </summary>
        [Column]
        public long UnifiedFieldAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the SortOrder.
        /// </summary>
        [Column]
        public int SortOrder { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldCategory] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldCategory]")]
    [PrimaryKey("UnifiedFieldId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UnifiedFieldCategoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the CategoryId.
        /// </summary>
        [Column]
        public int CategoryId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldCustomSource] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldCustomSource]")]
    [PrimaryKey("UnifiedFieldId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UnifiedFieldCustomSourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the CustomFieldId.
        /// </summary>
        [Column]
        public int CustomFieldId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldDocumentType] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldDocumentType]")]
    [PrimaryKey("UnifiedFieldDocumentTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UnifiedFieldDocumentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldDocumentTypeId.
        /// </summary>
        [Column]
        public int UnifiedFieldDocumentTypeId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentTypeId.
        /// </summary>
        [Column]
        public int DocumentTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldSystemSource] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldSystemSource]")]
    [PrimaryKey("UnifiedFieldId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UnifiedFieldSystemSourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the SystemFieldSourceId.
        /// </summary>
        [Column]
        public int SystemFieldSourceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldType] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldType]")]
    [PrimaryKey("UnifiedFieldTypeId")]
    [ExplicitColumns]
    public partial class UnifiedFieldTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldTypeId.
        /// </summary>
        [Column]
        public int UnifiedFieldTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFieldValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFieldValue]")]
    [PrimaryKey("UnifiedFieldValueId")]
    [ExplicitColumns]
    public partial class UnifiedFieldValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedPersonId.
        /// </summary>
        [Column]
        public int LastModifiedPersonId { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedTime.
        /// </summary>
        [Column]
        public DateTimeOffset LastModifiedTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedForm] table.
    /// </summary>
    [TableName("[dbo].[UnifiedForm]")]
    [PrimaryKey("UnifiedFormId")]
    [ExplicitColumns]
    public partial class UnifiedFormRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFormId.
        /// </summary>
        [Column]
        public int UnifiedFormId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedFormSubmission] table.
    /// </summary>
    [TableName("[dbo].[UnifiedFormSubmission]")]
    [PrimaryKey("UnifiedFormSubmissionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UnifiedFormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFormSubmissionId.
        /// </summary>
        [Column]
        public long UnifiedFormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the FormVersionId.
        /// </summary>
        [Column]
        public int FormVersionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedIntegerValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedIntegerValue]")]
    [PrimaryKey("UnifiedIntegerValueId")]
    [ExplicitColumns]
    public partial class UnifiedIntegerValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedIntegerValueId.
        /// </summary>
        [Column]
        public long UnifiedIntegerValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the IntegerValue.
        /// </summary>
        [Column]
        public long IntegerValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedNumericValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedNumericValue]")]
    [PrimaryKey("UnifiedNumericValueId")]
    [ExplicitColumns]
    public partial class UnifiedNumericValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedNumericValueId.
        /// </summary>
        [Column]
        public long UnifiedNumericValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the NumericValue.
        /// </summary>
        [Column]
        public double NumericValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedStringValue] table.
    /// </summary>
    [TableName("[dbo].[UnifiedStringValue]")]
    [PrimaryKey("UnifiedStringValueId")]
    [ExplicitColumns]
    public partial class UnifiedStringValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedStringValueId.
        /// </summary>
        [Column]
        public long UnifiedStringValueId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the StringValue.
        /// </summary>
        [Column]
        public string StringValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UnifiedValueType] table.
    /// </summary>
    [TableName("[dbo].[UnifiedValueType]")]
    [PrimaryKey("UnifiedValueTypeId")]
    [ExplicitColumns]
    public partial class UnifiedValueTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedValueTypeId.
        /// </summary>
        [Column]
        public int UnifiedValueTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[user] table.
    /// </summary>
    [TableName("[dbo].[user]")]
    [PrimaryKey("u_id")]
    [ExplicitColumns]
    public partial class userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the u_id.
        /// </summary>
        [Column]
        public int u_id { get; set; }

        /// <summary>
        /// Gets or sets the u_new.
        /// </summary>
        [Column]
        public int u_new { get; set; }

        /// <summary>
        /// Gets or sets the u_hidden.
        /// </summary>
        [Column]
        public int u_hidden { get; set; }

        /// <summary>
        /// Gets or sets the u_account.
        /// </summary>
        [Column]
        public string u_account { get; set; }

        /// <summary>
        /// Gets or sets the u_email.
        /// </summary>
        [Column]
        public string u_email { get; set; }

        /// <summary>
        /// Gets or sets the u_lname.
        /// </summary>
        [Column]
        public string u_lname { get; set; }

        /// <summary>
        /// Gets or sets the u_fname.
        /// </summary>
        [Column]
        public string u_fname { get; set; }

        /// <summary>
        /// Gets or sets the u_mname.
        /// </summary>
        [Column]
        public string u_mname { get; set; }

        /// <summary>
        /// Gets or sets the u_phone.
        /// </summary>
        [Column]
        public string u_phone { get; set; }

        /// <summary>
        /// Gets or sets the u_fax.
        /// </summary>
        [Column]
        public string u_fax { get; set; }

        /// <summary>
        /// Gets or sets the u_mobile.
        /// </summary>
        [Column]
        public string u_mobile { get; set; }

        /// <summary>
        /// Gets or sets the u_addr1.
        /// </summary>
        [Column]
        public string u_addr1 { get; set; }

        /// <summary>
        /// Gets or sets the u_addr2.
        /// </summary>
        [Column]
        public string u_addr2 { get; set; }

        /// <summary>
        /// Gets or sets the u_city.
        /// </summary>
        [Column]
        public string u_city { get; set; }

        /// <summary>
        /// Gets or sets the u_state.
        /// </summary>
        [Column]
        public string u_state { get; set; }

        /// <summary>
        /// Gets or sets the u_zip.
        /// </summary>
        [Column]
        public string u_zip { get; set; }

        /// <summary>
        /// Gets or sets the u_ssn.
        /// </summary>
        [Column]
        public string u_ssn { get; set; }

        /// <summary>
        /// Gets or sets the u_pin.
        /// </summary>
        [Column]
        public string u_pin { get; set; }

        /// <summary>
        /// Gets or sets the u_date_exp.
        /// </summary>
        [Column]
        public DateTime? u_date_exp { get; set; }

        /// <summary>
        /// Gets or sets the u_last_login_date.
        /// </summary>
        [Column]
        public DateTime? u_last_login_date { get; set; }

        /// <summary>
        /// Gets or sets the u_password_last_change_date.
        /// </summary>
        [Column]
        public DateTime? u_password_last_change_date { get; set; }

        /// <summary>
        /// Gets or sets the u_password_must_change_date.
        /// </summary>
        [Column]
        public DateTime? u_password_must_change_date { get; set; }

        /// <summary>
        /// Gets or sets the u_title.
        /// </summary>
        [Column]
        public string u_title { get; set; }

        /// <summary>
        /// Gets or sets the u_executive_admin.
        /// </summary>
        [Column]
        public bool u_executive_admin { get; set; }

        /// <summary>
        /// Gets or sets the u_use_my_tm.
        /// </summary>
        [Column]
        public bool u_use_my_tm { get; set; }

        /// <summary>
        /// Gets or sets the u_department.
        /// </summary>
        [Column]
        public string u_department { get; set; }

        /// <summary>
        /// Gets or sets the u_my_tm_theme.
        /// </summary>
        [Column]
        public string u_my_tm_theme { get; set; }

        /// <summary>
        /// Gets or sets the u_my_tm_cols.
        /// </summary>
        [Column]
        public int u_my_tm_cols { get; set; }

        /// <summary>
        /// Gets or sets the u_allow_remember_logins.
        /// </summary>
        [Column]
        public int u_allow_remember_logins { get; set; }

        /// <summary>
        /// Gets or sets the u_remember_logins.
        /// </summary>
        [Column]
        public int u_remember_logins { get; set; }

        /// <summary>
        /// Gets or sets the u_tz.
        /// </summary>
        [Column]
        public int u_tz { get; set; }

        /// <summary>
        /// Gets or sets the u_timezone.
        /// </summary>
        [Column]
        public int u_timezone { get; set; }

        /// <summary>
        /// Gets or sets the u_cty_id.
        /// </summary>
        [Column]
        public int? u_cty_id { get; set; }

        /// <summary>
        /// Gets or sets the u_esig_pwd.
        /// </summary>
        [Column]
        public string u_esig_pwd { get; set; }

        /// <summary>
        /// Gets or sets the u_allow_litera.
        /// </summary>
        [Column]
        public bool u_allow_litera { get; set; }

        /// <summary>
        /// Gets or sets the u_date_created.
        /// </summary>
        [Column]
        public DateTime? u_date_created { get; set; }

        /// <summary>
        /// Gets or sets the u_is_archived.
        /// </summary>
        [Column]
        public bool u_is_archived { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[user_group] table.
    /// </summary>
    [TableName("[dbo].[user_group]")]
    [PrimaryKey("ug_id")]
    [ExplicitColumns]
    public partial class user_groupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ug_id.
        /// </summary>
        [Column]
        public int ug_id { get; set; }

        /// <summary>
        /// Gets or sets the ug_include_new_user_by_default.
        /// </summary>
        [Column]
        public bool ug_include_new_user_by_default { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[user_group_user] table.
    /// </summary>
    [TableName("[dbo].[user_group_user]")]
    [PrimaryKey("ugu_ug_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class user_group_userRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ugu_ug_id.
        /// </summary>
        [Column]
        public int ugu_ug_id { get; set; }

        /// <summary>
        /// Gets or sets the ugu_u_id.
        /// </summary>
        [Column]
        public int ugu_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[user_person] table.
    /// </summary>
    [TableName("[dbo].[user_person]")]
    [PrimaryKey("up_id")]
    [ExplicitColumns]
    public partial class user_personRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the up_id.
        /// </summary>
        [Column]
        public int up_id { get; set; }

        /// <summary>
        /// Gets or sets the up_p_id.
        /// </summary>
        [Column]
        public int up_p_id { get; set; }

        /// <summary>
        /// Gets or sets the up_u_id.
        /// </summary>
        [Column]
        public int up_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[user_role] table.
    /// </summary>
    [TableName("[dbo].[user_role]")]
    [PrimaryKey("ur_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class user_roleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ur_id.
        /// </summary>
        [Column]
        public int ur_id { get; set; }

        /// <summary>
        /// Gets or sets the ur_name.
        /// </summary>
        [Column]
        public string ur_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[user_session_log] table.
    /// </summary>
    [TableName("[dbo].[user_session_log]")]
    [PrimaryKey("usl_id")]
    [ExplicitColumns]
    public partial class user_session_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the usl_id.
        /// </summary>
        [Column]
        public int usl_id { get; set; }

        /// <summary>
        /// Gets or sets the usl_app_id.
        /// </summary>
        [Column]
        public int usl_app_id { get; set; }

        /// <summary>
        /// Gets or sets the usl_session_id.
        /// </summary>
        [Column]
        public string usl_session_id { get; set; }

        /// <summary>
        /// Gets or sets the usl_account.
        /// </summary>
        [Column]
        public string usl_account { get; set; }

        /// <summary>
        /// Gets or sets the usl_page.
        /// </summary>
        [Column]
        public string usl_page { get; set; }

        /// <summary>
        /// Gets or sets the usl_querystring.
        /// </summary>
        [Column]
        public string usl_querystring { get; set; }

        /// <summary>
        /// Gets or sets the usl_timestamp.
        /// </summary>
        [Column]
        public DateTime usl_timestamp { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[user_sessions] table.
    /// </summary>
    [TableName("[dbo].[user_sessions]")]
    [ExplicitColumns]
    public partial class user_sessionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the us_id.
        /// </summary>
        [Column]
        public int us_id { get; set; }

        /// <summary>
        /// Gets or sets the us_u_account.
        /// </summary>
        [Column]
        public string us_u_account { get; set; }

        /// <summary>
        /// Gets or sets the us_o_id.
        /// </summary>
        [Column]
        public int us_o_id { get; set; }

        /// <summary>
        /// Gets or sets the us_timestamp.
        /// </summary>
        [Column]
        public DateTime us_timestamp { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[user_setting] table.
    /// </summary>
    [TableName("[dbo].[user_setting]")]
    [PrimaryKey("us_u_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class user_settingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the us_u_id.
        /// </summary>
        [Column]
        public int us_u_id { get; set; }

        /// <summary>
        /// Gets or sets the us_sort_by.
        /// </summary>
        [Column]
        public int us_sort_by { get; set; }

        /// <summary>
        /// Gets or sets the us_page_size.
        /// </summary>
        [Column]
        public int us_page_size { get; set; }

        /// <summary>
        /// Gets or sets the us_dir_page_size.
        /// </summary>
        [Column]
        public int us_dir_page_size { get; set; }

        /// <summary>
        /// Gets or sets the us_default_currency.
        /// </summary>
        [Column]
        public string us_default_currency { get; set; }

        /// <summary>
        /// Gets or sets the us_language.
        /// </summary>
        [Column]
        public string us_language { get; set; }

        /// <summary>
        /// Gets or sets the us_default_organization.
        /// </summary>
        [Column]
        public int us_default_organization { get; set; }

        /// <summary>
        /// Gets or sets the us_show_umbrella.
        /// </summary>
        [Column]
        public bool us_show_umbrella { get; set; }

        /// <summary>
        /// Gets or sets the us_show_contract_type.
        /// </summary>
        [Column]
        public bool us_show_contract_type { get; set; }

        /// <summary>
        /// Gets or sets the us_show_department.
        /// </summary>
        [Column]
        public bool us_show_department { get; set; }

        /// <summary>
        /// Gets or sets the us_show_entity.
        /// </summary>
        [Column]
        public bool us_show_entity { get; set; }

        /// <summary>
        /// Gets or sets the us_show_country.
        /// </summary>
        [Column]
        public bool us_show_country { get; set; }

        /// <summary>
        /// Gets or sets the us_show_state.
        /// </summary>
        [Column]
        public bool us_show_state { get; set; }

        /// <summary>
        /// Gets or sets the us_show_county.
        /// </summary>
        [Column]
        public bool us_show_county { get; set; }

        /// <summary>
        /// Gets or sets the us_default_department.
        /// </summary>
        [Column]
        public int? us_default_department { get; set; }

        /// <summary>
        /// Gets or sets the us_default_contract_type.
        /// </summary>
        [Column]
        public int? us_default_contract_type { get; set; }

        /// <summary>
        /// Gets or sets the us_default_entity.
        /// </summary>
        [Column]
        public int? us_default_entity { get; set; }

        /// <summary>
        /// Gets or sets the us_default_country.
        /// </summary>
        [Column]
        public int? us_default_country { get; set; }

        /// <summary>
        /// Gets or sets the us_default_state.
        /// </summary>
        [Column]
        public int? us_default_state { get; set; }

        /// <summary>
        /// Gets or sets the us_default_county.
        /// </summary>
        [Column]
        public int? us_default_county { get; set; }

        /// <summary>
        /// Gets or sets the us_no_esig.
        /// </summary>
        [Column]
        public bool us_no_esig { get; set; }

        /// <summary>
        /// Gets or sets the us_ios_icon.
        /// </summary>
        [Column]
        public string us_ios_icon { get; set; }

        /// <summary>
        /// Gets or sets the us_default_site.
        /// </summary>
        [Column]
        public int? us_default_site { get; set; }

        /// <summary>
        /// Gets or sets the us_contract_search_archived_default.
        /// </summary>
        [Column]
        public bool us_contract_search_archived_default { get; set; }

        /// <summary>
        /// Gets or sets the us_default_parent_organization.
        /// </summary>
        [Column]
        public int? us_default_parent_organization { get; set; }

        /// <summary>
        /// Gets or sets the us_default_facilities.
        /// </summary>
        [Column]
        public string us_default_facilities { get; set; }

        /// <summary>
        /// Gets or sets the us_default_markets.
        /// </summary>
        [Column]
        public string us_default_markets { get; set; }

        /// <summary>
        /// Gets or sets the us_default_fulltext_option.
        /// </summary>
        [Column]
        public int? us_default_fulltext_option { get; set; }

        /// <summary>
        /// Gets or sets the us_default_search_organization.
        /// </summary>
        [Column]
        public string us_default_search_organization { get; set; }

        /// <summary>
        /// Gets or sets the us_use_new_office_editor.
        /// </summary>
        [Column]
        public int us_use_new_office_editor { get; set; }

        /// <summary>
        /// Gets or sets the us_landing_page_fixed.
        /// </summary>
        [Column]
        public int? us_landing_page_fixed { get; set; }

        /// <summary>
        /// Gets or sets the us_landing_page_ccpni_id.
        /// </summary>
        [Column]
        public int? us_landing_page_ccpni_id { get; set; }

        /// <summary>
        /// Gets or sets the us_pm_landing_page_fixed.
        /// </summary>
        [Column]
        public int? us_pm_landing_page_fixed { get; set; }

        /// <summary>
        /// Gets or sets the us_pm_landing_page_ccpni_id.
        /// </summary>
        [Column]
        public int? us_pm_landing_page_ccpni_id { get; set; }

        /// <summary>
        /// Gets or sets the us_cc_search_omit_archived.
        /// </summary>
        [Column]
        public bool? us_cc_search_omit_archived { get; set; }

        /// <summary>
        /// Gets or sets the us_show_all_comments_in_workflow.
        /// </summary>
        [Column]
        public bool us_show_all_comments_in_workflow { get; set; }

        /// <summary>
        /// Gets or sets the us_landing_page_SavedFilterId.
        /// </summary>
        [Column]
        public int? us_landing_page_SavedFilterId { get; set; }

        /// <summary>
        /// Gets or sets the us_pm_landing_page_SavedFilterId.
        /// </summary>
        [Column]
        public int? us_pm_landing_page_SavedFilterId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UserActionEvent] table.
    /// </summary>
    [TableName("[dbo].[UserActionEvent]")]
    [PrimaryKey("UserActionEventId")]
    [ExplicitColumns]
    public partial class UserActionEventRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserActionEventId.
        /// </summary>
        [Column]
        public long UserActionEventId { get; set; }

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets or sets the UserActionStatusId.
        /// </summary>
        [Column]
        public int UserActionStatusId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTime.
        /// </summary>
        [Column]
        public DateTimeOffset ActionTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UserActionEventDetail] table.
    /// </summary>
    [TableName("[dbo].[UserActionEventDetail]")]
    [PrimaryKey("UserActionEventDetailId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UserActionEventDetailRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserActionEventDetailId.
        /// </summary>
        [Column]
        public long UserActionEventDetailId { get; set; }

        /// <summary>
        /// Gets or sets the ItemId.
        /// </summary>
        [Column]
        public long ItemId { get; set; }

        /// <summary>
        /// Gets or sets the ItemType.
        /// </summary>
        [Column]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or sets the ItemContent.
        /// </summary>
        [Column]
        public string ItemContent { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UserActionEventTransaction] table.
    /// </summary>
    [TableName("[dbo].[UserActionEventTransaction]")]
    [PrimaryKey("UserActionEventId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UserActionEventTransactionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserActionEventId.
        /// </summary>
        [Column]
        public long UserActionEventId { get; set; }

        /// <summary>
        /// Gets or sets the UserTransactionId.
        /// </summary>
        [Column]
        public long UserTransactionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UserActionStatus] table.
    /// </summary>
    [TableName("[dbo].[UserActionStatus]")]
    [PrimaryKey("UserActionStatusId")]
    [ExplicitColumns]
    public partial class UserActionStatusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserActionStatusId.
        /// </summary>
        [Column]
        public int UserActionStatusId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UserSavedReport] table.
    /// </summary>
    [TableName("[dbo].[UserSavedReport]")]
    [PrimaryKey("DashboardReportSettingId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UserSavedReportRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DashboardReportSettingId.
        /// </summary>
        [Column]
        public int DashboardReportSettingId { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[UserTransaction] table.
    /// </summary>
    [TableName("[dbo].[UserTransaction]")]
    [PrimaryKey("UserTransactionId")]
    [ExplicitColumns]
    public partial class UserTransactionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserTransactionId.
        /// </summary>
        [Column]
        public long UserTransactionId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor] table.
    /// </summary>
    [TableName("[dbo].[vendor]")]
    [PrimaryKey("v_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class vendorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the v_id.
        /// </summary>
        [Column]
        public int v_id { get; set; }

        /// <summary>
        /// Gets or sets the v_name.
        /// </summary>
        [Column]
        public string v_name { get; set; }

        /// <summary>
        /// Gets or sets the v_add_date.
        /// </summary>
        [Column]
        public DateTime v_add_date { get; set; }

        /// <summary>
        /// Gets or sets the v_add_user.
        /// </summary>
        [Column]
        public string v_add_user { get; set; }

        /// <summary>
        /// Gets or sets the v_mod_date.
        /// </summary>
        [Column]
        public DateTime v_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the v_mod_user.
        /// </summary>
        [Column]
        public string v_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the v_ref_no.
        /// </summary>
        [Column]
        public string v_ref_no { get; set; }

        /// <summary>
        /// Gets or sets the v_con_lname.
        /// </summary>
        [Column]
        public string v_con_lname { get; set; }

        /// <summary>
        /// Gets or sets the v_con_fname.
        /// </summary>
        [Column]
        public string v_con_fname { get; set; }

        /// <summary>
        /// Gets or sets the v_con_phone.
        /// </summary>
        [Column]
        public string v_con_phone { get; set; }

        /// <summary>
        /// Gets or sets the v_con_fax.
        /// </summary>
        [Column]
        public string v_con_fax { get; set; }

        /// <summary>
        /// Gets or sets the v_con_email.
        /// </summary>
        [Column]
        public string v_con_email { get; set; }

        /// <summary>
        /// Gets or sets the v_con_mobile.
        /// </summary>
        [Column]
        public string v_con_mobile { get; set; }

        /// <summary>
        /// Gets or sets the v_con_pager.
        /// </summary>
        [Column]
        public string v_con_pager { get; set; }

        /// <summary>
        /// Gets or sets the v_addr_1.
        /// </summary>
        [Column]
        public string v_addr_1 { get; set; }

        /// <summary>
        /// Gets or sets the v_addr_2.
        /// </summary>
        [Column]
        public string v_addr_2 { get; set; }

        /// <summary>
        /// Gets or sets the v_city.
        /// </summary>
        [Column]
        public string v_city { get; set; }

        /// <summary>
        /// Gets or sets the v_state.
        /// </summary>
        [Column]
        public string v_state { get; set; }

        /// <summary>
        /// Gets or sets the v_zip.
        /// </summary>
        [Column]
        public string v_zip { get; set; }

        /// <summary>
        /// Gets or sets the v_title.
        /// </summary>
        [Column]
        public string v_title { get; set; }

        /// <summary>
        /// Gets or sets the v_website.
        /// </summary>
        [Column]
        public string v_website { get; set; }

        /// <summary>
        /// Gets or sets the v_international.
        /// </summary>
        [Column]
        public bool v_international { get; set; }

        /// <summary>
        /// Gets or sets the v_vt_id.
        /// </summary>
        [Column]
        public int v_vt_id { get; set; }

        /// <summary>
        /// Gets or sets the v_latitude.
        /// </summary>
        [Column]
        public decimal? v_latitude { get; set; }

        /// <summary>
        /// Gets or sets the v_longitude.
        /// </summary>
        [Column]
        public decimal? v_longitude { get; set; }

        /// <summary>
        /// Gets or sets the v_cty_id.
        /// </summary>
        [Column]
        public int? v_cty_id { get; set; }

        /// <summary>
        /// Gets or sets the v_npi.
        /// </summary>
        [Column]
        public string v_npi { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_comment] table.
    /// </summary>
    [TableName("[dbo].[vendor_comment]")]
    [PrimaryKey("vc_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class vendor_commentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vc_id.
        /// </summary>
        [Column]
        public int vc_id { get; set; }

        /// <summary>
        /// Gets or sets the vc_v_id.
        /// </summary>
        [Column]
        public int vc_v_id { get; set; }

        /// <summary>
        /// Gets or sets the vc_add_date.
        /// </summary>
        [Column]
        public DateTime vc_add_date { get; set; }

        /// <summary>
        /// Gets or sets the vc_add_user.
        /// </summary>
        [Column]
        public string vc_add_user { get; set; }

        /// <summary>
        /// Gets or sets the vc_mod_date.
        /// </summary>
        [Column]
        public DateTime vc_mod_date { get; set; }

        /// <summary>
        /// Gets or sets the vc_mod_user.
        /// </summary>
        [Column]
        public string vc_mod_user { get; set; }

        /// <summary>
        /// Gets or sets the vc_subject.
        /// </summary>
        [Column]
        public string vc_subject { get; set; }

        /// <summary>
        /// Gets or sets the vc_text.
        /// </summary>
        [Column]
        public string vc_text { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_contact] table.
    /// </summary>
    [TableName("[dbo].[vendor_contact]")]
    [PrimaryKey("vc_id")]
    [ExplicitColumns]
    public partial class vendor_contactRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vc_id.
        /// </summary>
        [Column]
        public int vc_id { get; set; }

        /// <summary>
        /// Gets or sets the vc_v_id.
        /// </summary>
        [Column]
        public int vc_v_id { get; set; }

        /// <summary>
        /// Gets or sets the vc_type.
        /// </summary>
        [Column]
        public string vc_type { get; set; }

        /// <summary>
        /// Gets or sets the vc_lname.
        /// </summary>
        [Column]
        public string vc_lname { get; set; }

        /// <summary>
        /// Gets or sets the vc_fname.
        /// </summary>
        [Column]
        public string vc_fname { get; set; }

        /// <summary>
        /// Gets or sets the vc_phone.
        /// </summary>
        [Column]
        public string vc_phone { get; set; }

        /// <summary>
        /// Gets or sets the vc_fax.
        /// </summary>
        [Column]
        public string vc_fax { get; set; }

        /// <summary>
        /// Gets or sets the vc_email.
        /// </summary>
        [Column]
        public string vc_email { get; set; }

        /// <summary>
        /// Gets or sets the vc_mobile.
        /// </summary>
        [Column]
        public string vc_mobile { get; set; }

        /// <summary>
        /// Gets or sets the vc_pager.
        /// </summary>
        [Column]
        public string vc_pager { get; set; }

        /// <summary>
        /// Gets or sets the vc_addr_1.
        /// </summary>
        [Column]
        public string vc_addr_1 { get; set; }

        /// <summary>
        /// Gets or sets the vc_addr_2.
        /// </summary>
        [Column]
        public string vc_addr_2 { get; set; }

        /// <summary>
        /// Gets or sets the vc_city.
        /// </summary>
        [Column]
        public string vc_city { get; set; }

        /// <summary>
        /// Gets or sets the vc_state.
        /// </summary>
        [Column]
        public string vc_state { get; set; }

        /// <summary>
        /// Gets or sets the vc_zip.
        /// </summary>
        [Column]
        public string vc_zip { get; set; }

        /// <summary>
        /// Gets or sets the vc_notes.
        /// </summary>
        [Column]
        public string vc_notes { get; set; }

        /// <summary>
        /// Gets or sets the vc_international.
        /// </summary>
        [Column]
        public bool vc_international { get; set; }

        /// <summary>
        /// Gets or sets the vc_cty_id.
        /// </summary>
        [Column]
        public int? vc_cty_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_exclusion] table.
    /// </summary>
    [TableName("[dbo].[vendor_exclusion]")]
    [PrimaryKey("ve_id")]
    [ExplicitColumns]
    public partial class vendor_exclusionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ve_id.
        /// </summary>
        [Column]
        public int ve_id { get; set; }

        /// <summary>
        /// Gets or sets the ve_vid.
        /// </summary>
        [Column]
        public int ve_vid { get; set; }

        /// <summary>
        /// Gets or sets the ve_exclusion_date.
        /// </summary>
        [Column]
        public DateTime ve_exclusion_date { get; set; }

        /// <summary>
        /// Gets or sets the ve_comment.
        /// </summary>
        [Column]
        public string ve_comment { get; set; }

        /// <summary>
        /// Gets or sets the ve_attachment.
        /// </summary>
        [Column]
        public string ve_attachment { get; set; }

        /// <summary>
        /// Gets or sets the ve_completed_by.
        /// </summary>
        [Column]
        public string ve_completed_by { get; set; }

        /// <summary>
        /// Gets or sets the ve_timestamp.
        /// </summary>
        [Column]
        public DateTime ve_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the ve_lastModifiedBy.
        /// </summary>
        [Column]
        public string ve_lastModifiedBy { get; set; }

        /// <summary>
        /// Gets or sets the ve_lastModifiedDate.
        /// </summary>
        [Column]
        public DateTime ve_lastModifiedDate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_payable] table.
    /// </summary>
    [TableName("[dbo].[vendor_payable]")]
    [PrimaryKey("vp_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class vendor_payableRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vp_id.
        /// </summary>
        [Column]
        public int vp_id { get; set; }

        /// <summary>
        /// Gets or sets the vp_v_id.
        /// </summary>
        [Column]
        public int vp_v_id { get; set; }

        /// <summary>
        /// Gets or sets the vp_entity_ref.
        /// </summary>
        [Column]
        public string vp_entity_ref { get; set; }

        /// <summary>
        /// Gets or sets the vp_inv_no.
        /// </summary>
        [Column]
        public string vp_inv_no { get; set; }

        /// <summary>
        /// Gets or sets the vp_date_inv.
        /// </summary>
        [Column]
        public DateTime? vp_date_inv { get; set; }

        /// <summary>
        /// Gets or sets the vp_po_no.
        /// </summary>
        [Column]
        public string vp_po_no { get; set; }

        /// <summary>
        /// Gets or sets the vp_ref.
        /// </summary>
        [Column]
        public string vp_ref { get; set; }

        /// <summary>
        /// Gets or sets the vp_acct_no.
        /// </summary>
        [Column]
        public string vp_acct_no { get; set; }

        /// <summary>
        /// Gets or sets the vp_inv_amt.
        /// </summary>
        [Column]
        public decimal? vp_inv_amt { get; set; }

        /// <summary>
        /// Gets or sets the vp_discount_amt.
        /// </summary>
        [Column]
        public decimal? vp_discount_amt { get; set; }

        /// <summary>
        /// Gets or sets the vp_check_amt.
        /// </summary>
        [Column]
        public decimal? vp_check_amt { get; set; }

        /// <summary>
        /// Gets or sets the vp_date_check.
        /// </summary>
        [Column]
        public DateTime? vp_date_check { get; set; }

        /// <summary>
        /// Gets or sets the vp_check_no.
        /// </summary>
        [Column]
        public string vp_check_no { get; set; }

        /// <summary>
        /// Gets or sets the vp_c_id.
        /// </summary>
        [Column]
        public int? vp_c_id { get; set; }

        /// <summary>
        /// Gets or sets the vp_inv_amt_currency_code.
        /// </summary>
        [Column]
        public string vp_inv_amt_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the vp_discount_amt_currency_code.
        /// </summary>
        [Column]
        public string vp_discount_amt_currency_code { get; set; }

        /// <summary>
        /// Gets or sets the vp_check_amt_currency_code.
        /// </summary>
        [Column]
        public string vp_check_amt_currency_code { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_payment] table.
    /// </summary>
    [TableName("[dbo].[vendor_payment]")]
    [PrimaryKey("vp_id")]
    [ExplicitColumns]
    public partial class vendor_paymentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vp_id.
        /// </summary>
        [Column]
        public int vp_id { get; set; }

        /// <summary>
        /// Gets or sets the vp_pv_id.
        /// </summary>
        [Column]
        public int vp_pv_id { get; set; }

        /// <summary>
        /// Gets or sets the vp_vpc_id.
        /// </summary>
        [Column]
        public int vp_vpc_id { get; set; }

        /// <summary>
        /// Gets or sets the vp_amount.
        /// </summary>
        [Column]
        public decimal vp_amount { get; set; }

        /// <summary>
        /// Gets or sets the vp_pay_ref_number.
        /// </summary>
        [Column]
        public string vp_pay_ref_number { get; set; }

        /// <summary>
        /// Gets or sets the vp_po_number.
        /// </summary>
        [Column]
        public string vp_po_number { get; set; }

        /// <summary>
        /// Gets or sets the vp_vpi_id.
        /// </summary>
        [Column]
        public int vp_vpi_id { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_text1.
        /// </summary>
        [Column]
        public string vp_custom_text1 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_text2.
        /// </summary>
        [Column]
        public string vp_custom_text2 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_text3.
        /// </summary>
        [Column]
        public string vp_custom_text3 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_date1.
        /// </summary>
        [Column]
        public DateTime? vp_custom_date1 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_date2.
        /// </summary>
        [Column]
        public DateTime? vp_custom_date2 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_date3.
        /// </summary>
        [Column]
        public DateTime? vp_custom_date3 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_int1.
        /// </summary>
        [Column]
        public int? vp_custom_int1 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_int2.
        /// </summary>
        [Column]
        public int? vp_custom_int2 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_int3.
        /// </summary>
        [Column]
        public int? vp_custom_int3 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_currency1.
        /// </summary>
        [Column]
        public decimal? vp_custom_currency1 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_currency2.
        /// </summary>
        [Column]
        public decimal? vp_custom_currency2 { get; set; }

        /// <summary>
        /// Gets or sets the vp_custom_currency3.
        /// </summary>
        [Column]
        public decimal? vp_custom_currency3 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_payment_check] table.
    /// </summary>
    [TableName("[dbo].[vendor_payment_check]")]
    [PrimaryKey("vpc_id")]
    [ExplicitColumns]
    public partial class vendor_payment_checkRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vpc_id.
        /// </summary>
        [Column]
        public int vpc_id { get; set; }

        /// <summary>
        /// Gets or sets the vpc_vps_id.
        /// </summary>
        [Column]
        public int vpc_vps_id { get; set; }

        /// <summary>
        /// Gets or sets the vpc_no.
        /// </summary>
        [Column]
        public string vpc_no { get; set; }

        /// <summary>
        /// Gets or sets the vpc_amount.
        /// </summary>
        [Column]
        public decimal? vpc_amount { get; set; }

        /// <summary>
        /// Gets or sets the vpc_date.
        /// </summary>
        [Column]
        public DateTime? vpc_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_payment_contract] table.
    /// </summary>
    [TableName("[dbo].[vendor_payment_contract]")]
    [PrimaryKey("vpco_id")]
    [ExplicitColumns]
    public partial class vendor_payment_contractRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vpco_id.
        /// </summary>
        [Column]
        public int vpco_id { get; set; }

        /// <summary>
        /// Gets or sets the vpco_vp_id.
        /// </summary>
        [Column]
        public int vpco_vp_id { get; set; }

        /// <summary>
        /// Gets or sets the vpco_c_id.
        /// </summary>
        [Column]
        public int vpco_c_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_payment_customcolumn] table.
    /// </summary>
    [TableName("[dbo].[vendor_payment_customcolumn]")]
    [PrimaryKey("vpcc_id")]
    [ExplicitColumns]
    public partial class vendor_payment_customcolumnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vpcc_id.
        /// </summary>
        [Column]
        public int vpcc_id { get; set; }

        /// <summary>
        /// Gets or sets the vpcc_col_name.
        /// </summary>
        [Column]
        public string vpcc_col_name { get; set; }

        /// <summary>
        /// Gets or sets the vpcc_default_display.
        /// </summary>
        [Column]
        public string vpcc_default_display { get; set; }

        /// <summary>
        /// Gets or sets the vpcc_custom_display.
        /// </summary>
        [Column]
        public string vpcc_custom_display { get; set; }

        /// <summary>
        /// Gets or sets the vpcc_removable.
        /// </summary>
        [Column]
        public bool vpcc_removable { get; set; }

        /// <summary>
        /// Gets or sets the vpcc_inuse.
        /// </summary>
        [Column]
        public bool vpcc_inuse { get; set; }

        /// <summary>
        /// Gets or sets the vpcc_order.
        /// </summary>
        [Column]
        public int vpcc_order { get; set; }

        /// <summary>
        /// Gets or sets the vpcc_captionable.
        /// </summary>
        [Column]
        public bool vpcc_captionable { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_payment_invoice] table.
    /// </summary>
    [TableName("[dbo].[vendor_payment_invoice]")]
    [PrimaryKey("vpi_id")]
    [ExplicitColumns]
    public partial class vendor_payment_invoiceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vpi_id.
        /// </summary>
        [Column]
        public int vpi_id { get; set; }

        /// <summary>
        /// Gets or sets the vpi_pv_id.
        /// </summary>
        [Column]
        public int vpi_pv_id { get; set; }

        /// <summary>
        /// Gets or sets the vpi_ref_number.
        /// </summary>
        [Column]
        public string vpi_ref_number { get; set; }

        /// <summary>
        /// Gets or sets the vpi_amount.
        /// </summary>
        [Column]
        public decimal? vpi_amount { get; set; }

        /// <summary>
        /// Gets or sets the vpi_date.
        /// </summary>
        [Column]
        public DateTime? vpi_date { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_payment_source] table.
    /// </summary>
    [TableName("[dbo].[vendor_payment_source]")]
    [PrimaryKey("vps_id")]
    [ExplicitColumns]
    public partial class vendor_payment_sourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vps_id.
        /// </summary>
        [Column]
        public int vps_id { get; set; }

        /// <summary>
        /// Gets or sets the vps_name.
        /// </summary>
        [Column]
        public string vps_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_payment_vendor] table.
    /// </summary>
    [TableName("[dbo].[vendor_payment_vendor]")]
    [PrimaryKey("vpv_id")]
    [ExplicitColumns]
    public partial class vendor_payment_vendorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vpv_id.
        /// </summary>
        [Column]
        public int vpv_id { get; set; }

        /// <summary>
        /// Gets or sets the vpv_v_id.
        /// </summary>
        [Column]
        public int vpv_v_id { get; set; }

        /// <summary>
        /// Gets or sets the vpv_pv_id.
        /// </summary>
        [Column]
        public int vpv_pv_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vendor_type] table.
    /// </summary>
    [TableName("[dbo].[vendor_type]")]
    [PrimaryKey("vt_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class vendor_typeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the vt_id.
        /// </summary>
        [Column]
        public int vt_id { get; set; }

        /// <summary>
        /// Gets or sets the vt_name.
        /// </summary>
        [Column]
        public string vt_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewApplicationUserDocumentTypes] table.
    /// </summary>
    [TableName("[dbo].[ViewApplicationUserDocumentTypes]")]
    [ExplicitColumns]
    public partial class ViewApplicationUserDocumentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentTypeId.
        /// </summary>
        [Column]
        public int DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or sets the ApplicationId.
        /// </summary>
        [Column]
        public int ApplicationId { get; set; }

        /// <summary>
        /// Gets or sets the up_o_id.
        /// </summary>
        [Column]
        public int? up_o_id { get; set; }

        /// <summary>
        /// Gets or sets the up_u_id.
        /// </summary>
        [Column]
        public int? up_u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewContractWorkflows] table.
    /// </summary>
    [TableName("[dbo].[ViewContractWorkflows]")]
    [ExplicitColumns]
    public partial class ViewContractWorkflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpw_id.
        /// </summary>
        [Column]
        public int ccpw_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_subject.
        /// </summary>
        [Column]
        public string ccpw_subject { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_ccp_id.
        /// </summary>
        [Column]
        public int ccpw_ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_initiator_u_id.
        /// </summary>
        [Column]
        public int ccpw_initiator_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_start_date.
        /// </summary>
        [Column]
        public DateTime ccpw_start_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_end_date.
        /// </summary>
        [Column]
        public DateTime? ccpw_end_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_ccps_id.
        /// </summary>
        [Column]
        public int ccpw_ccps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_status_comment.
        /// </summary>
        [Column]
        public string ccpw_status_comment { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_u_id.
        /// </summary>
        [Column]
        public int? ccpw_u_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_ccd_id.
        /// </summary>
        [Column]
        public int ccpw_ccd_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_comment_date.
        /// </summary>
        [Column]
        public DateTime? ccpw_comment_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_is_draft.
        /// </summary>
        [Column]
        public bool? ccpw_is_draft { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_revive_date.
        /// </summary>
        [Column]
        public DateTime? ccpw_revive_date { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_on_reject_ccps_id.
        /// </summary>
        [Column]
        public int? ccpw_on_reject_ccps_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_c_id.
        /// </summary>
        [Column]
        public int? ccpw_c_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_c_import.
        /// </summary>
        [Column]
        public bool ccpw_c_import { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_od_id.
        /// </summary>
        [Column]
        public int? ccpw_od_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_is_corrupt.
        /// </summary>
        [Column]
        public bool ccpw_is_corrupt { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_taw_s_id.
        /// </summary>
        [Column]
        public int? ccpw_taw_s_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpw_expertrfp_pending.
        /// </summary>
        [Column]
        public bool ccpw_expertrfp_pending { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewDocumentActivitySource] table.
    /// </summary>
    [TableName("[dbo].[ViewDocumentActivitySource]")]
    [ExplicitColumns]
    public partial class ViewDocumentActivitySourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentActivityId.
        /// </summary>
        [Column]
        public int DocumentActivityId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentSourceId.
        /// </summary>
        [Column]
        public int DocumentSourceId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentSourceName.
        /// </summary>
        [Column]
        public string DocumentSourceName { get; set; }

        /// <summary>
        /// Gets or sets the IsDefault.
        /// </summary>
        [Column]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewExternalCommunicationAttachments] table.
    /// </summary>
    [TableName("[dbo].[ViewExternalCommunicationAttachments]")]
    [ExplicitColumns]
    public partial class ViewExternalCommunicationAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowId.
        /// </summary>
        [Column]
        public int WorkflowId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalCommunicationId.
        /// </summary>
        [Column]
        public long ExternalCommunicationId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentId.
        /// </summary>
        [Column]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentVersionId.
        /// </summary>
        [Column]
        public long DocumentVersionId { get; set; }

        /// <summary>
        /// Gets or sets the VersionNumber.
        /// </summary>
        [Column]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the MessageAttachmentId.
        /// </summary>
        [Column]
        public long MessageAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the TrackedMessageId.
        /// </summary>
        [Column]
        public long TrackedMessageId { get; set; }

        /// <summary>
        /// Gets or sets the SentTime.
        /// </summary>
        [Column]
        public DateTimeOffset SentTime { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        [Column]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        [Column]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the ResponseRequired.
        /// </summary>
        [Column]
        public bool? ResponseRequired { get; set; }

        /// <summary>
        /// Gets or sets the AttachmentStatus.
        /// </summary>
        [Column]
        public int? AttachmentStatus { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewExternalCommunications] table.
    /// </summary>
    [TableName("[dbo].[ViewExternalCommunications]")]
    [ExplicitColumns]
    public partial class ViewExternalCommunicationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalCommunicationId.
        /// </summary>
        [Column]
        public long ExternalCommunicationId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the RecipientPersonId.
        /// </summary>
        [Column]
        public int RecipientPersonId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionId.
        /// </summary>
        [Column]
        public int MessageDistributionId { get; set; }

        /// <summary>
        /// Gets or sets the TrackedConversationId.
        /// </summary>
        [Column]
        public long TrackedConversationId { get; set; }

        /// <summary>
        /// Gets or sets the OriginalTrackedMessageId.
        /// </summary>
        [Column]
        public long OriginalTrackedMessageId { get; set; }

        /// <summary>
        /// Gets or sets the CurrentTrackedMessageId.
        /// </summary>
        [Column]
        public long CurrentTrackedMessageId { get; set; }

        /// <summary>
        /// Gets or sets the IsArchived.
        /// </summary>
        [Column]
        public bool IsArchived { get; set; }

        /// <summary>
        /// Gets or sets the ExternalPartyUserId.
        /// </summary>
        [Column]
        public int? ExternalPartyUserId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalPartyAccountName.
        /// </summary>
        [Column]
        public string ExternalPartyAccountName { get; set; }

        /// <summary>
        /// Gets or sets the ExternalPartyFirstName.
        /// </summary>
        [Column]
        public string ExternalPartyFirstName { get; set; }

        /// <summary>
        /// Gets or sets the ExternalPartyMiddleName.
        /// </summary>
        [Column]
        public string ExternalPartyMiddleName { get; set; }

        /// <summary>
        /// Gets or sets the ExternalPartyLastName.
        /// </summary>
        [Column]
        public string ExternalPartyLastName { get; set; }

        /// <summary>
        /// Gets or sets the ExternalPartyEmail.
        /// </summary>
        [Column]
        public string ExternalPartyEmail { get; set; }

        /// <summary>
        /// Gets or sets the ExternalPartyTitle.
        /// </summary>
        [Column]
        public string ExternalPartyTitle { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowId.
        /// </summary>
        [Column]
        public int WorkflowId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessStatusId.
        /// </summary>
        [Column]
        public int ProcessStatusId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowSubject.
        /// </summary>
        [Column]
        public string WorkflowSubject { get; set; }

        /// <summary>
        /// Gets or sets the InitiatorUserId.
        /// </summary>
        [Column]
        public int InitiatorUserId { get; set; }

        /// <summary>
        /// Gets or sets the InitiatorAccountName.
        /// </summary>
        [Column]
        public string InitiatorAccountName { get; set; }

        /// <summary>
        /// Gets or sets the InitiatorPersonId.
        /// </summary>
        [Column]
        public int InitiatorPersonId { get; set; }

        /// <summary>
        /// Gets or sets the InitiatorEmail.
        /// </summary>
        [Column]
        public string InitiatorEmail { get; set; }

        /// <summary>
        /// Gets or sets the InitiatorTitle.
        /// </summary>
        [Column]
        public string InitiatorTitle { get; set; }

        /// <summary>
        /// Gets or sets the InitiatorLastName.
        /// </summary>
        [Column]
        public string InitiatorLastName { get; set; }

        /// <summary>
        /// Gets or sets the InitiatorFirstName.
        /// </summary>
        [Column]
        public string InitiatorFirstName { get; set; }

        /// <summary>
        /// Gets or sets the InitiatorMiddleName.
        /// </summary>
        [Column]
        public string InitiatorMiddleName { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseStatusId.
        /// </summary>
        [Column]
        public int ProcessPhaseStatusId { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerUserId.
        /// </summary>
        [Column]
        public int PhaseOwnerUserId { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerAccountName.
        /// </summary>
        [Column]
        public string PhaseOwnerAccountName { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerPersonId.
        /// </summary>
        [Column]
        public int PhaseOwnerPersonId { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerEmail.
        /// </summary>
        [Column]
        public string PhaseOwnerEmail { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerTitle.
        /// </summary>
        [Column]
        public string PhaseOwnerTitle { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerLastName.
        /// </summary>
        [Column]
        public string PhaseOwnerLastName { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerFirstName.
        /// </summary>
        [Column]
        public string PhaseOwnerFirstName { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerMiddleName.
        /// </summary>
        [Column]
        public string PhaseOwnerMiddleName { get; set; }

        /// <summary>
        /// Gets or sets the PhaseTypeId.
        /// </summary>
        [Column]
        public int PhaseTypeId { get; set; }

        /// <summary>
        /// Gets or sets the VendorId.
        /// </summary>
        [Column]
        public int? VendorId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedByUserId.
        /// </summary>
        [Column]
        public int MessageDistributionCreatedByUserId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionName.
        /// </summary>
        [Column]
        public string MessageDistributionName { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedTime.
        /// </summary>
        [Column]
        public DateTimeOffset MessageDistributionCreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedByPersonId.
        /// </summary>
        [Column]
        public int MessageDistributionCreatedByPersonId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedByAccountName.
        /// </summary>
        [Column]
        public string MessageDistributionCreatedByAccountName { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedByFirstName.
        /// </summary>
        [Column]
        public string MessageDistributionCreatedByFirstName { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedByMiddleName.
        /// </summary>
        [Column]
        public string MessageDistributionCreatedByMiddleName { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedByLastName.
        /// </summary>
        [Column]
        public string MessageDistributionCreatedByLastName { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedByEmail.
        /// </summary>
        [Column]
        public string MessageDistributionCreatedByEmail { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionCreatedByTitle.
        /// </summary>
        [Column]
        public string MessageDistributionCreatedByTitle { get; set; }

        /// <summary>
        /// Gets or sets the OrgId.
        /// </summary>
        [Column]
        public int OrgId { get; set; }

        /// <summary>
        /// Gets or sets the VendorName.
        /// </summary>
        [Column]
        public string VendorName { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewOrganizations] table.
    /// </summary>
    [TableName("[dbo].[ViewOrganizations]")]
    [ExplicitColumns]
    public partial class ViewOrganizationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the OrganizationId.
        /// </summary>
        [Column]
        public int OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewPersons] table.
    /// </summary>
    [TableName("[dbo].[ViewPersons]")]
    [ExplicitColumns]
    public partial class ViewPersonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        [Column]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the MiddleName.
        /// </summary>
        [Column]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        [Column]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [Column]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the Department.
        /// </summary>
        [Column]
        public string Department { get; set; }

        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        [Column]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the Address1.
        /// </summary>
        [Column]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets the Address2.
        /// </summary>
        [Column]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        [Column]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the PostalCode.
        /// </summary>
        [Column]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the StateOrProvince.
        /// </summary>
        [Column]
        public string StateOrProvince { get; set; }

        /// <summary>
        /// Gets or sets the PhoneNumber.
        /// </summary>
        [Column]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets the FaxNumber.
        /// </summary>
        [Column]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or sets the MobileNumber.
        /// </summary>
        [Column]
        public string MobileNumber { get; set; }

        /// <summary>
        /// Gets or sets the AllowSignatory.
        /// </summary>
        [Column]
        public bool AllowSignatory { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or sets the AccountName.
        /// </summary>
        [Column]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or sets the IsNewUser.
        /// </summary>
        [Column]
        public int? IsNewUser { get; set; }

        /// <summary>
        /// Gets or sets the IsHidden.
        /// </summary>
        [Column]
        public int? IsHidden { get; set; }

        /// <summary>
        /// Gets or sets the AllowLitera.
        /// </summary>
        [Column]
        public bool? AllowLitera { get; set; }

        /// <summary>
        /// Gets or sets the ESignaturePassword.
        /// </summary>
        [Column]
        public string ESignaturePassword { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        [Column]
        public int? CountryId { get; set; }

        /// <summary>
        /// Gets or sets the TimeZone.
        /// </summary>
        [Column]
        public int? TimeZone { get; set; }

        /// <summary>
        /// Gets or sets the TimeZoneOffset.
        /// </summary>
        [Column]
        public int? TimeZoneOffset { get; set; }

        /// <summary>
        /// Gets or sets the RememberLogin.
        /// </summary>
        [Column]
        public int? RememberLogin { get; set; }

        /// <summary>
        /// Gets or sets the AllowRememberLogin.
        /// </summary>
        [Column]
        public int? AllowRememberLogin { get; set; }

        /// <summary>
        /// Gets or sets the NextPasswordChangeDate.
        /// </summary>
        [Column]
        public DateTime? NextPasswordChangeDate { get; set; }

        /// <summary>
        /// Gets or sets the LastPasswordChangeDate.
        /// </summary>
        [Column]
        public DateTime? LastPasswordChangeDate { get; set; }

        /// <summary>
        /// Gets or sets the LastLoginDate.
        /// </summary>
        [Column]
        public DateTime? LastLoginDate { get; set; }

        /// <summary>
        /// Gets or sets the AccountExpirationDate.
        /// </summary>
        [Column]
        public DateTime? AccountExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets the PersonalIdentificationNumber.
        /// </summary>
        [Column]
        public string PersonalIdentificationNumber { get; set; }

        /// <summary>
        /// Gets or sets the CreationDate.
        /// </summary>
        [Column]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewPhaseOwnerStartEndDates] table.
    /// </summary>
    [TableName("[dbo].[ViewPhaseOwnerStartEndDates]")]
    [ExplicitColumns]
    public partial class ViewPhaseOwnerStartEndDateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseTypeId.
        /// </summary>
        [Column]
        public int PhaseTypeId { get; set; }

        /// <summary>
        /// Gets or sets the CcpId.
        /// </summary>
        [Column]
        public int CcpId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowID.
        /// </summary>
        [Column]
        public int WorkflowID { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets the StartDate.
        /// </summary>
        [Column]
        public DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// Gets or sets the EndDate.
        /// </summary>
        [Column]
        public DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewReportingParty] table.
    /// </summary>
    [TableName("[dbo].[ViewReportingParty]")]
    [ExplicitColumns]
    public partial class ViewReportingPartyRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        [Column]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the MiddleName.
        /// </summary>
        [Column]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        [Column]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [Column]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the Department.
        /// </summary>
        [Column]
        public string Department { get; set; }

        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        [Column]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the Address1.
        /// </summary>
        [Column]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets the Address2.
        /// </summary>
        [Column]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        [Column]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the PostalCode.
        /// </summary>
        [Column]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the StateOrProvince.
        /// </summary>
        [Column]
        public string StateOrProvince { get; set; }

        /// <summary>
        /// Gets or sets the PhoneNumber.
        /// </summary>
        [Column]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets the FaxNumber.
        /// </summary>
        [Column]
        public string FaxNumber { get; set; }

        /// <summary>
        /// Gets or sets the MobileNumber.
        /// </summary>
        [Column]
        public string MobileNumber { get; set; }

        /// <summary>
        /// Gets or sets the AllowSignatory.
        /// </summary>
        [Column]
        public bool AllowSignatory { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or sets the AccountName.
        /// </summary>
        [Column]
        public string AccountName { get; set; }

        /// <summary>
        /// Gets or sets the IsNewUser.
        /// </summary>
        [Column]
        public int? IsNewUser { get; set; }

        /// <summary>
        /// Gets or sets the IsHidden.
        /// </summary>
        [Column]
        public int? IsHidden { get; set; }

        /// <summary>
        /// Gets or sets the AllowLitera.
        /// </summary>
        [Column]
        public bool? AllowLitera { get; set; }

        /// <summary>
        /// Gets or sets the ESignaturePassword.
        /// </summary>
        [Column]
        public string ESignaturePassword { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        [Column]
        public int? CountryId { get; set; }

        /// <summary>
        /// Gets or sets the TimeZone.
        /// </summary>
        [Column]
        public int? TimeZone { get; set; }

        /// <summary>
        /// Gets or sets the TimeZoneOffset.
        /// </summary>
        [Column]
        public int? TimeZoneOffset { get; set; }

        /// <summary>
        /// Gets or sets the RememberLogin.
        /// </summary>
        [Column]
        public int? RememberLogin { get; set; }

        /// <summary>
        /// Gets or sets the AllowRememberLogin.
        /// </summary>
        [Column]
        public int? AllowRememberLogin { get; set; }

        /// <summary>
        /// Gets or sets the NextPasswordChangeDate.
        /// </summary>
        [Column]
        public DateTime? NextPasswordChangeDate { get; set; }

        /// <summary>
        /// Gets or sets the LastPasswordChangeDate.
        /// </summary>
        [Column]
        public DateTime? LastPasswordChangeDate { get; set; }

        /// <summary>
        /// Gets or sets the LastLoginDate.
        /// </summary>
        [Column]
        public DateTime? LastLoginDate { get; set; }

        /// <summary>
        /// Gets or sets the AccountExpirationDate.
        /// </summary>
        [Column]
        public DateTime? AccountExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets the PersonalIdentificationNumber.
        /// </summary>
        [Column]
        public string PersonalIdentificationNumber { get; set; }

        /// <summary>
        /// Gets or sets the CreationDate.
        /// </summary>
        [Column]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Gets or sets the AccountingServiceProviderUserId.
        /// </summary>
        [Column]
        public int? AccountingServiceProviderUserId { get; set; }

        /// <summary>
        /// Gets or sets the AccountingCode.
        /// </summary>
        [Column]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationId.
        /// </summary>
        [Column]
        public int OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the RoleInTERMS.
        /// </summary>
        [Column]
        public int RoleInTERMS { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewReviewerApproverStartEndDates] table.
    /// </summary>
    [TableName("[dbo].[ViewReviewerApproverStartEndDates]")]
    [ExplicitColumns]
    public partial class ViewReviewerApproverStartEndDateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseTypeId.
        /// </summary>
        [Column]
        public int PhaseTypeId { get; set; }

        /// <summary>
        /// Gets or sets the CcpId.
        /// </summary>
        [Column]
        public int CcpId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowID.
        /// </summary>
        [Column]
        public int WorkflowID { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets the IsApprover.
        /// </summary>
        [Column]
        public bool IsApprover { get; set; }

        /// <summary>
        /// Gets or sets the StartDate.
        /// </summary>
        [Column]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets the EndDate.
        /// </summary>
        [Column]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets the ReviewStatus.
        /// </summary>
        [Column]
        public int ReviewStatus { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[views_rollup] table.
    /// </summary>
    [TableName("[dbo].[views_rollup]")]
    [ExplicitColumns]
    public partial class views_rollupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the Number.
        /// </summary>
        [Column]
        public string Number { get; set; }

        /// <summary>
        /// Gets or sets the Tenant.
        /// </summary>
        [Column]
        public string Tenant { get; set; }

        /// <summary>
        /// Gets or sets the LeftPart.
        /// </summary>
        [Column]
        public int? LeftPart { get; set; }

        /// <summary>
        /// Gets or sets the RightPart.
        /// </summary>
        [Column]
        public int? RightPart { get; set; }

        /// <summary>
        /// Gets or sets the Portfolio.
        /// </summary>
        [Column]
        public string Portfolio { get; set; }

        /// <summary>
        /// Gets or sets the PortfolioID.
        /// </summary>
        [Column]
        public int PortfolioID { get; set; }

        /// <summary>
        /// Gets or sets the CommencementDate.
        /// </summary>
        [Column]
        public string CommencementDate { get; set; }

        /// <summary>
        /// Gets or sets the TerminationDate.
        /// </summary>
        [Column]
        public string TerminationDate { get; set; }

        /// <summary>
        /// Gets or sets the ContractID.
        /// </summary>
        [Column]
        public int ContractID { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationID.
        /// </summary>
        [Column]
        public int OrganizationID { get; set; }

        /// <summary>
        /// Gets or sets the ContractUser.
        /// </summary>
        [Column]
        public int ContractUser { get; set; }

        /// <summary>
        /// Gets or sets the TypeID.
        /// </summary>
        [Column]
        public int TypeID { get; set; }

        /// <summary>
        /// Gets or sets the StatusID.
        /// </summary>
        [Column]
        public int StatusID { get; set; }

        /// <summary>
        /// Gets or sets the Vendor.
        /// </summary>
        [Column]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or sets the Entity.
        /// </summary>
        [Column]
        public string Entity { get; set; }

        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [Column]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the AutoRenewal.
        /// </summary>
        [Column]
        public string AutoRenewal { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        [Column]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        [Column]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the LastName2.
        /// </summary>
        [Column]
        public string LastName2 { get; set; }

        /// <summary>
        /// Gets or sets the FirstName2.
        /// </summary>
        [Column]
        public string FirstName2 { get; set; }

        /// <summary>
        /// Gets or sets the LastName3.
        /// </summary>
        [Column]
        public string LastName3 { get; set; }

        /// <summary>
        /// Gets or sets the FirstName3.
        /// </summary>
        [Column]
        public string FirstName3 { get; set; }

        /// <summary>
        /// Gets or sets the Status.
        /// </summary>
        [Column]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the VendorSignatory.
        /// </summary>
        [Column]
        public string VendorSignatory { get; set; }

        /// <summary>
        /// Gets or sets the VendorSignatoryTitle.
        /// </summary>
        [Column]
        public string VendorSignatoryTitle { get; set; }

        /// <summary>
        /// Gets or sets the PrimaryTitle.
        /// </summary>
        [Column]
        public string PrimaryTitle { get; set; }

        /// <summary>
        /// Gets or sets the SecondaryTitle.
        /// </summary>
        [Column]
        public string SecondaryTitle { get; set; }

        /// <summary>
        /// Gets or sets the GroupName.
        /// </summary>
        [Column]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or sets the Product.
        /// </summary>
        [Column]
        public string Product { get; set; }

        /// <summary>
        /// Gets or sets the ProductDescription.
        /// </summary>
        [Column]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Gets or sets the PONumber.
        /// </summary>
        [Column]
        public string PONumber { get; set; }

        /// <summary>
        /// Gets or sets the ActionList.
        /// </summary>
        [Column]
        public bool ActionList { get; set; }

        /// <summary>
        /// Gets or sets the Occupancy.
        /// </summary>
        [Column]
        public int Occupancy { get; set; }

        /// <summary>
        /// Gets or sets the Term.
        /// </summary>
        [Column]
        public string Term { get; set; }

        /// <summary>
        /// Gets or sets the KeyTerms.
        /// </summary>
        [Column]
        public string KeyTerms { get; set; }

        /// <summary>
        /// Gets or sets the NoteSubject.
        /// </summary>
        [Column]
        public string NoteSubject { get; set; }

        /// <summary>
        /// Gets or sets the NoteBody.
        /// </summary>
        [Column]
        public string NoteBody { get; set; }

        /// <summary>
        /// Gets or sets the CriticalDateSubject.
        /// </summary>
        [Column]
        public string CriticalDateSubject { get; set; }

        /// <summary>
        /// Gets or sets the CriticalDateComment.
        /// </summary>
        [Column]
        public string CriticalDateComment { get; set; }

        /// <summary>
        /// Gets or sets the PrimaryID.
        /// </summary>
        [Column]
        public int PrimaryID { get; set; }

        /// <summary>
        /// Gets or sets the SecondaryID.
        /// </summary>
        [Column]
        public int SecondaryID { get; set; }

        /// <summary>
        /// Gets or sets the ThirdID.
        /// </summary>
        [Column]
        public int ThirdID { get; set; }

        /// <summary>
        /// Gets or sets the VendorID.
        /// </summary>
        [Column]
        public int VendorID { get; set; }

        /// <summary>
        /// Gets or sets the LandlordID.
        /// </summary>
        [Column]
        public int LandlordID { get; set; }

        /// <summary>
        /// Gets or sets the SiteID.
        /// </summary>
        [Column]
        public int SiteID { get; set; }

        /// <summary>
        /// Gets or sets the Building.
        /// </summary>
        [Column]
        public string Building { get; set; }

        /// <summary>
        /// Gets or sets the ExpirationCertificate.
        /// </summary>
        [Column]
        public DateTime? ExpirationCertificate { get; set; }

        /// <summary>
        /// Gets or sets the ExecutionDate.
        /// </summary>
        [Column]
        public DateTime? ExecutionDate { get; set; }

        /// <summary>
        /// Gets or sets the CriticalDate.
        /// </summary>
        [Column]
        public DateTime? CriticalDate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewSignatoryStartEndDates] table.
    /// </summary>
    [TableName("[dbo].[ViewSignatoryStartEndDates]")]
    [ExplicitColumns]
    public partial class ViewSignatoryStartEndDateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseTypeId.
        /// </summary>
        [Column]
        public int PhaseTypeId { get; set; }

        /// <summary>
        /// Gets or sets the CcpId.
        /// </summary>
        [Column]
        public int CcpId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowID.
        /// </summary>
        [Column]
        public int WorkflowID { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or sets the StartDate.
        /// </summary>
        [Column]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or sets the EndDate.
        /// </summary>
        [Column]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewTERMSHoursApproved] table.
    /// </summary>
    [TableName("[dbo].[ViewTERMSHoursApproved]")]
    [ExplicitColumns]
    public partial class ViewTERMSHoursApprovedRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ts_id.
        /// </summary>
        [Column]
        public int ts_id { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___January.
        /// </summary>
        [Column("Hours Approved - January")] 
        public string Hours_Approved___January { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___February.
        /// </summary>
        [Column("Hours Approved - February")] 
        public string Hours_Approved___February { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___March.
        /// </summary>
        [Column("Hours Approved - March")] 
        public string Hours_Approved___March { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___April.
        /// </summary>
        [Column("Hours Approved - April")] 
        public string Hours_Approved___April { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___May.
        /// </summary>
        [Column("Hours Approved - May")] 
        public string Hours_Approved___May { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___June.
        /// </summary>
        [Column("Hours Approved - June")] 
        public string Hours_Approved___June { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___July.
        /// </summary>
        [Column("Hours Approved - July")] 
        public string Hours_Approved___July { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___August.
        /// </summary>
        [Column("Hours Approved - August")] 
        public string Hours_Approved___August { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___September.
        /// </summary>
        [Column("Hours Approved - September")] 
        public string Hours_Approved___September { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___October.
        /// </summary>
        [Column("Hours Approved - October")] 
        public string Hours_Approved___October { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___November.
        /// </summary>
        [Column("Hours Approved - November")] 
        public string Hours_Approved___November { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___December.
        /// </summary>
        [Column("Hours Approved - December")] 
        public string Hours_Approved___December { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Approved___Total.
        /// </summary>
        [Column("Hours Approved - Total")] 
        public string Hours_Approved___Total { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewTERMSHoursCertified] table.
    /// </summary>
    [TableName("[dbo].[ViewTERMSHoursCertified]")]
    [ExplicitColumns]
    public partial class ViewTERMSHoursCertifiedRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ts_id.
        /// </summary>
        [Column]
        public int ts_id { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___January.
        /// </summary>
        [Column("Hours Certified - January")] 
        public string Hours_Certified___January { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___February.
        /// </summary>
        [Column("Hours Certified - February")] 
        public string Hours_Certified___February { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___March.
        /// </summary>
        [Column("Hours Certified - March")] 
        public string Hours_Certified___March { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___April.
        /// </summary>
        [Column("Hours Certified - April")] 
        public string Hours_Certified___April { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___May.
        /// </summary>
        [Column("Hours Certified - May")] 
        public string Hours_Certified___May { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___June.
        /// </summary>
        [Column("Hours Certified - June")] 
        public string Hours_Certified___June { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___July.
        /// </summary>
        [Column("Hours Certified - July")] 
        public string Hours_Certified___July { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___August.
        /// </summary>
        [Column("Hours Certified - August")] 
        public string Hours_Certified___August { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___September.
        /// </summary>
        [Column("Hours Certified - September")] 
        public string Hours_Certified___September { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___October.
        /// </summary>
        [Column("Hours Certified - October")] 
        public string Hours_Certified___October { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___November.
        /// </summary>
        [Column("Hours Certified - November")] 
        public string Hours_Certified___November { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___December.
        /// </summary>
        [Column("Hours Certified - December")] 
        public string Hours_Certified___December { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Certified___Total.
        /// </summary>
        [Column("Hours Certified - Total")] 
        public string Hours_Certified___Total { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewTERMSHoursReported] table.
    /// </summary>
    [TableName("[dbo].[ViewTERMSHoursReported]")]
    [ExplicitColumns]
    public partial class ViewTERMSHoursReportedRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ts_id.
        /// </summary>
        [Column]
        public int ts_id { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___January.
        /// </summary>
        [Column("Hours Reported - January")] 
        public string Hours_Reported___January { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___February.
        /// </summary>
        [Column("Hours Reported - February")] 
        public string Hours_Reported___February { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___March.
        /// </summary>
        [Column("Hours Reported - March")] 
        public string Hours_Reported___March { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___April.
        /// </summary>
        [Column("Hours Reported - April")] 
        public string Hours_Reported___April { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___May.
        /// </summary>
        [Column("Hours Reported - May")] 
        public string Hours_Reported___May { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___June.
        /// </summary>
        [Column("Hours Reported - June")] 
        public string Hours_Reported___June { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___July.
        /// </summary>
        [Column("Hours Reported - July")] 
        public string Hours_Reported___July { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___August.
        /// </summary>
        [Column("Hours Reported - August")] 
        public string Hours_Reported___August { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___September.
        /// </summary>
        [Column("Hours Reported - September")] 
        public string Hours_Reported___September { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___October.
        /// </summary>
        [Column("Hours Reported - October")] 
        public string Hours_Reported___October { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___November.
        /// </summary>
        [Column("Hours Reported - November")] 
        public string Hours_Reported___November { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___December.
        /// </summary>
        [Column("Hours Reported - December")] 
        public string Hours_Reported___December { get; set; }

        /// <summary>
        /// Gets or sets the Hours_Reported___Total.
        /// </summary>
        [Column("Hours Reported - Total")] 
        public string Hours_Reported___Total { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewTERMSVendorCodes] table.
    /// </summary>
    [TableName("[dbo].[ViewTERMSVendorCodes]")]
    [ExplicitColumns]
    public partial class ViewTERMSVendorCodeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TimesheetId.
        /// </summary>
        [Column]
        public int TimesheetId { get; set; }

        /// <summary>
        /// Gets or sets the VendorId.
        /// </summary>
        [Column]
        public int? VendorId { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or sets the VendorCode.
        /// </summary>
        [Column]
        public string VendorCode { get; set; }

        /// <summary>
        /// Gets or sets the VendorCodeFormatted.
        /// </summary>
        [Column]
        public string VendorCodeFormatted { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewUser] table.
    /// </summary>
    [TableName("[dbo].[ViewUser]")]
    [ExplicitColumns]
    public partial class ViewUserRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserID.
        /// </summary>
        [Column]
        public int UserID { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationID.
        /// </summary>
        [Column]
        public int OrganizationID { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationUserProfileID.
        /// </summary>
        [Column]
        public int OrganizationUserProfileID { get; set; }

        /// <summary>
        /// Gets or sets the FirstName.
        /// </summary>
        [Column]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets the MiddleName.
        /// </summary>
        [Column]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or sets the LastName.
        /// </summary>
        [Column]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        [Column]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [Column]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the PhoneNumber.
        /// </summary>
        [Column]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets the ExecAdmin.
        /// </summary>
        [Column]
        public bool ExecAdmin { get; set; }

        /// <summary>
        /// Gets or sets the ContractsRole.
        /// </summary>
        [Column]
        public int ContractsRole { get; set; }

        /// <summary>
        /// Gets or sets the ProcessManagerRole.
        /// </summary>
        [Column]
        public int ProcessManagerRole { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewUserOrganizationPermissions] table.
    /// </summary>
    [TableName("[dbo].[ViewUserOrganizationPermissions]")]
    [ExplicitColumns]
    public partial class ViewUserOrganizationPermissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets the OrganizationId.
        /// </summary>
        [Column]
        public int OrganizationId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ContractsRole.
        /// </summary>
        [Column]
        public int ContractsRole { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowRole.
        /// </summary>
        [Column]
        public int WorkflowRole { get; set; }

        /// <summary>
        /// Gets or sets the ExecCommRole.
        /// </summary>
        [Column]
        public int ExecCommRole { get; set; }

        /// <summary>
        /// Gets or sets the CollaboratorRole.
        /// </summary>
        [Column]
        public int CollaboratorRole { get; set; }

        /// <summary>
        /// Gets or sets the GiftAccumulatorRole.
        /// </summary>
        [Column]
        public int GiftAccumulatorRole { get; set; }

        /// <summary>
        /// Gets or sets the ProcessManagerRole.
        /// </summary>
        [Column]
        public int ProcessManagerRole { get; set; }

        /// <summary>
        /// Gets or sets the TermsRole.
        /// </summary>
        [Column]
        public int TermsRole { get; set; }

        /// <summary>
        /// Gets or sets the CoidsRole.
        /// </summary>
        [Column]
        public int CoidsRole { get; set; }

        /// <summary>
        /// Gets or sets the VefRole.
        /// </summary>
        [Column]
        public int VefRole { get; set; }

        /// <summary>
        /// Gets or sets the OverrideProcessManagerMinimumRole.
        /// </summary>
        [Column]
        public bool OverrideProcessManagerMinimumRole { get; set; }

        /// <summary>
        /// Gets or sets the ProcessManagerMinimumRole.
        /// </summary>
        [Column]
        public short ProcessManagerMinimumRole { get; set; }

        /// <summary>
        /// Gets or sets the ArchiveContractMinimumRole.
        /// </summary>
        [Column]
        public short ArchiveContractMinimumRole { get; set; }

        /// <summary>
        /// Gets or sets the ProductId.
        /// </summary>
        [Column]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or sets the CoidsOrgId.
        /// </summary>
        [Column]
        public int? CoidsOrgId { get; set; }

        /// <summary>
        /// Gets or sets the VefOrgId.
        /// </summary>
        [Column]
        public int? VefOrgId { get; set; }

        /// <summary>
        /// Gets or sets the TermsOrgId.
        /// </summary>
        [Column]
        public int? TermsOrgId { get; set; }

        /// <summary>
        /// Gets or sets the ExplicitDashboardAccess.
        /// </summary>
        [Column]
        public bool? ExplicitDashboardAccess { get; set; }

        /// <summary>
        /// Gets or sets the CanSuppress.
        /// </summary>
        [Column]
        public bool? CanSuppress { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewUserSettings] table.
    /// </summary>
    [TableName("[dbo].[ViewUserSettings]")]
    [ExplicitColumns]
    public partial class ViewUserSettingRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets or sets the SortBy.
        /// </summary>
        [Column]
        public int SortBy { get; set; }

        /// <summary>
        /// Gets or sets the PageSize.
        /// </summary>
        [Column]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or sets the DirPageSize.
        /// </summary>
        [Column]
        public int DirPageSize { get; set; }

        /// <summary>
        /// Gets or sets the DefaultCurrency.
        /// </summary>
        [Column]
        public string DefaultCurrency { get; set; }

        /// <summary>
        /// Gets or sets the Language.
        /// </summary>
        [Column]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets the DefaultOrganization.
        /// </summary>
        [Column]
        public int DefaultOrganization { get; set; }

        /// <summary>
        /// Gets or sets the ShowUmbrella.
        /// </summary>
        [Column]
        public bool ShowUmbrella { get; set; }

        /// <summary>
        /// Gets or sets the ShowContractType.
        /// </summary>
        [Column]
        public bool ShowContractType { get; set; }

        /// <summary>
        /// Gets or sets the ShowDepartment.
        /// </summary>
        [Column]
        public bool ShowDepartment { get; set; }

        /// <summary>
        /// Gets or sets the ShowEntity.
        /// </summary>
        [Column]
        public bool ShowEntity { get; set; }

        /// <summary>
        /// Gets or sets the ShowCountry.
        /// </summary>
        [Column]
        public bool ShowCountry { get; set; }

        /// <summary>
        /// Gets or sets the ShowState.
        /// </summary>
        [Column]
        public bool ShowState { get; set; }

        /// <summary>
        /// Gets or sets the ShowCounty.
        /// </summary>
        [Column]
        public bool ShowCounty { get; set; }

        /// <summary>
        /// Gets or sets the DefaultDepartment.
        /// </summary>
        [Column]
        public int? DefaultDepartment { get; set; }

        /// <summary>
        /// Gets or sets the DefaultContractType.
        /// </summary>
        [Column]
        public int? DefaultContractType { get; set; }

        /// <summary>
        /// Gets or sets the DefaultEntity.
        /// </summary>
        [Column]
        public int? DefaultEntity { get; set; }

        /// <summary>
        /// Gets or sets the DefaultCountry.
        /// </summary>
        [Column]
        public int? DefaultCountry { get; set; }

        /// <summary>
        /// Gets or sets the DefaultState.
        /// </summary>
        [Column]
        public int? DefaultState { get; set; }

        /// <summary>
        /// Gets or sets the DefaultCounty.
        /// </summary>
        [Column]
        public int? DefaultCounty { get; set; }

        /// <summary>
        /// Gets or sets the NoEsig.
        /// </summary>
        [Column]
        public bool NoEsig { get; set; }

        /// <summary>
        /// Gets or sets the IosIcon.
        /// </summary>
        [Column]
        public string IosIcon { get; set; }

        /// <summary>
        /// Gets or sets the DefaultSite.
        /// </summary>
        [Column]
        public int? DefaultSite { get; set; }

        /// <summary>
        /// Gets or sets the ContractSearchArchivedDefault.
        /// </summary>
        [Column]
        public bool ContractSearchArchivedDefault { get; set; }

        /// <summary>
        /// Gets or sets the DefaultParentOrganization.
        /// </summary>
        [Column]
        public int? DefaultParentOrganization { get; set; }

        /// <summary>
        /// Gets or sets the DefaultFacilities.
        /// </summary>
        [Column]
        public string DefaultFacilities { get; set; }

        /// <summary>
        /// Gets or sets the DefaultMarkets.
        /// </summary>
        [Column]
        public string DefaultMarkets { get; set; }

        /// <summary>
        /// Gets or sets the DefaultFullTextOption.
        /// </summary>
        [Column]
        public int? DefaultFullTextOption { get; set; }

        /// <summary>
        /// Gets or sets the DefaultSearchOrganization.
        /// </summary>
        [Column]
        public string DefaultSearchOrganization { get; set; }

        /// <summary>
        /// Gets or sets the UseNewOfficeEditor.
        /// </summary>
        [Column]
        public int UseNewOfficeEditor { get; set; }

        /// <summary>
        /// Gets or sets the LandingPageFixed.
        /// </summary>
        [Column]
        public int? LandingPageFixed { get; set; }

        /// <summary>
        /// Gets or sets the LandingPageCcpniId.
        /// </summary>
        [Column]
        public int? LandingPageCcpniId { get; set; }

        /// <summary>
        /// Gets or sets the PMLandingPageFixed.
        /// </summary>
        [Column]
        public int? PMLandingPageFixed { get; set; }

        /// <summary>
        /// Gets or sets the PMLandingPageCcpniId.
        /// </summary>
        [Column]
        public int? PMLandingPageCcpniId { get; set; }

        /// <summary>
        /// Gets or sets the CCSearchOmitArchived.
        /// </summary>
        [Column]
        public bool? CCSearchOmitArchived { get; set; }

        /// <summary>
        /// Gets or sets the ShowAllCommentsInWorkflow.
        /// </summary>
        [Column]
        public bool ShowAllCommentsInWorkflow { get; set; }

        /// <summary>
        /// Gets or sets the LandingPageSavedFilterId.
        /// </summary>
        [Column]
        public int? LandingPageSavedFilterId { get; set; }

        /// <summary>
        /// Gets or sets the PMLandingPageSavedFilterId.
        /// </summary>
        [Column]
        public int? PMLandingPageSavedFilterId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewVendor] table.
    /// </summary>
    [TableName("[dbo].[ViewVendor]")]
    [ExplicitColumns]
    public partial class ViewVendorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the VendorId.
        /// </summary>
        [Column]
        public int VendorId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the CreatedTime.
        /// </summary>
        [Column]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the CreatedByName.
        /// </summary>
        [Column]
        public string CreatedByName { get; set; }

        /// <summary>
        /// Gets or sets the ModifiedTime.
        /// </summary>
        [Column]
        public DateTime ModifiedTime { get; set; }

        /// <summary>
        /// Gets or sets the ModifiedByName.
        /// </summary>
        [Column]
        public string ModifiedByName { get; set; }

        /// <summary>
        /// Gets or sets the ReferenceNumber.
        /// </summary>
        [Column]
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Gets or sets the ContactLastName.
        /// </summary>
        [Column]
        public string ContactLastName { get; set; }

        /// <summary>
        /// Gets or sets the ContactFirstName.
        /// </summary>
        [Column]
        public string ContactFirstName { get; set; }

        /// <summary>
        /// Gets or sets the ContactPhoneNumber.
        /// </summary>
        [Column]
        public string ContactPhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets the ContactEmail.
        /// </summary>
        [Column]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or sets the ContactFax.
        /// </summary>
        [Column]
        public string ContactFax { get; set; }

        /// <summary>
        /// Gets or sets the ContactPager.
        /// </summary>
        [Column]
        public string ContactPager { get; set; }

        /// <summary>
        /// Gets or sets the ContactMobile.
        /// </summary>
        [Column]
        public string ContactMobile { get; set; }

        /// <summary>
        /// Gets or sets the AddressLine1.
        /// </summary>
        [Column]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or sets the AddressLine2.
        /// </summary>
        [Column]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or sets the City.
        /// </summary>
        [Column]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets the State.
        /// </summary>
        [Column]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets the Zip.
        /// </summary>
        [Column]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or sets the Title.
        /// </summary>
        [Column]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the Website.
        /// </summary>
        [Column]
        public string Website { get; set; }

        /// <summary>
        /// Gets or sets the International.
        /// </summary>
        [Column]
        public bool International { get; set; }

        /// <summary>
        /// Gets or sets the VendorTypeId.
        /// </summary>
        [Column]
        public int VendorTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Latitude.
        /// </summary>
        [Column]
        public decimal? Latitude { get; set; }

        /// <summary>
        /// Gets or sets the Longitude.
        /// </summary>
        [Column]
        public decimal? Longitude { get; set; }

        /// <summary>
        /// Gets or sets the CountryId.
        /// </summary>
        [Column]
        public int? CountryId { get; set; }

        /// <summary>
        /// Gets or sets the NPI.
        /// </summary>
        [Column]
        public string NPI { get; set; }

        /// <summary>
        /// Gets or sets the AccountingServiceProviderVendorId.
        /// </summary>
        [Column]
        public int? AccountingServiceProviderVendorId { get; set; }

        /// <summary>
        /// Gets or sets the AccountingCode.
        /// </summary>
        [Column]
        public string AccountingCode { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[ViewVendorContracts] table.
    /// </summary>
    [TableName("[dbo].[ViewVendorContracts]")]
    [ExplicitColumns]
    public partial class ViewVendorContractRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the VendorId.
        /// </summary>
        [Column]
        public int VendorId { get; set; }

        /// <summary>
        /// Gets or sets the Vendor.
        /// </summary>
        [Column]
        public string Vendor { get; set; }

        /// <summary>
        /// Gets or sets the ContractId.
        /// </summary>
        [Column]
        public int? ContractId { get; set; }

        /// <summary>
        /// Gets or sets the ContractNumber.
        /// </summary>
        [Column]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Gets or sets the Organization.
        /// </summary>
        [Column]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or sets the ContractType.
        /// </summary>
        [Column]
        public string ContractType { get; set; }

        /// <summary>
        /// Gets or sets the EffectiveDate.
        /// </summary>
        [Column]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets the ExpirationDate.
        /// </summary>
        [Column]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowId.
        /// </summary>
        [Column]
        public string WorkflowId { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the ActionType.
        /// </summary>
        [Column]
        public string ActionType { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowStartDate.
        /// </summary>
        [Column]
        public DateTime? WorkflowStartDate { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vwCOIDSLaunchArchive] table.
    /// </summary>
    [TableName("[dbo].[vwCOIDSLaunchArchive]")]
    [ExplicitColumns]
    public partial class vwCOIDSLaunchArchiveRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the launchID.
        /// </summary>
        [Column]
        public int? launchID { get; set; }

        /// <summary>
        /// Gets or sets the categoryID.
        /// </summary>
        [Column]
        public int categoryID { get; set; }

        /// <summary>
        /// Gets or sets the reportingPartyName.
        /// </summary>
        [Column]
        public string reportingPartyName { get; set; }

        /// <summary>
        /// Gets or sets the reportingPartyEmail.
        /// </summary>
        [Column]
        public string reportingPartyEmail { get; set; }

        /// <summary>
        /// Gets or sets the reportingPartyUsername.
        /// </summary>
        [Column]
        public string reportingPartyUsername { get; set; }

        /// <summary>
        /// Gets or sets the statementID.
        /// </summary>
        [Column]
        public int statementID { get; set; }

        /// <summary>
        /// Gets or sets the statementEffectiveDate.
        /// </summary>
        [Column]
        public DateTime statementEffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets the statementExpirationDate.
        /// </summary>
        [Column]
        public DateTime statementExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets the statementOverrideEmail.
        /// </summary>
        [Column]
        public string statementOverrideEmail { get; set; }

        /// <summary>
        /// Gets or sets the statementStatus.
        /// </summary>
        [Column]
        public int? statementStatus { get; set; }

        /// <summary>
        /// Gets or sets the relationshipEntity.
        /// </summary>
        [Column]
        public string relationshipEntity { get; set; }

        /// <summary>
        /// Gets or sets the relationshipDepartment.
        /// </summary>
        [Column]
        public string relationshipDepartment { get; set; }

        /// <summary>
        /// Gets or sets the relationshipCategory.
        /// </summary>
        [Column]
        public string relationshipCategory { get; set; }

        /// <summary>
        /// Gets or sets the relationshipTitle.
        /// </summary>
        [Column]
        public string relationshipTitle { get; set; }

        /// <summary>
        /// Gets or sets the relationshipPrimary.
        /// </summary>
        [Column]
        public bool relationshipPrimary { get; set; }

        /// <summary>
        /// Gets or sets the viewingPartyName.
        /// </summary>
        [Column]
        public string viewingPartyName { get; set; }

        /// <summary>
        /// Gets or sets the viewingPartyEmail.
        /// </summary>
        [Column]
        public string viewingPartyEmail { get; set; }

        /// <summary>
        /// Gets or sets the viewingPartyUsername.
        /// </summary>
        [Column]
        public string viewingPartyUsername { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vwTERMS_time_sheet_period] table.
    /// </summary>
    [TableName("[dbo].[vwTERMS_time_sheet_period]")]
    [ExplicitColumns]
    public partial class vwTERMS_time_sheet_periodRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the tsp_id.
        /// </summary>
        [Column]
        public int tsp_id { get; set; }

        /// <summary>
        /// Gets or sets the tsp_ts_id.
        /// </summary>
        [Column]
        public int tsp_ts_id { get; set; }

        /// <summary>
        /// Gets or sets the tsp_certified_user.
        /// </summary>
        [Column]
        public string tsp_certified_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_certified_date.
        /// </summary>
        [Column]
        public DateTime? tsp_certified_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_certified_hours.
        /// </summary>
        [Column]
        public double? tsp_certified_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_decertified_comment.
        /// </summary>
        [Column]
        public string tsp_decertified_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_decertified_user.
        /// </summary>
        [Column]
        public string tsp_decertified_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_decertified_date.
        /// </summary>
        [Column]
        public DateTime? tsp_decertified_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_period_start_date.
        /// </summary>
        [Column]
        public DateTime tsp_period_start_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_period_end_date.
        /// </summary>
        [Column]
        public DateTime tsp_period_end_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_processed_amount.
        /// </summary>
        [Column]
        public double? tsp_processed_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_processed_date.
        /// </summary>
        [Column]
        public DateTime? tsp_processed_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_first_user.
        /// </summary>
        [Column]
        public string tsp_approved_first_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_first_date.
        /// </summary>
        [Column]
        public DateTime? tsp_approved_first_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_first_hours.
        /// </summary>
        [Column]
        public double? tsp_approved_first_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_first_amount.
        /// </summary>
        [Column]
        public double? tsp_approved_first_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_first_comment.
        /// </summary>
        [Column]
        public string tsp_approved_first_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_user.
        /// </summary>
        [Column]
        public string tsp_approved_second_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_date.
        /// </summary>
        [Column]
        public DateTime? tsp_approved_second_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_hours.
        /// </summary>
        [Column]
        public double? tsp_approved_second_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_amount.
        /// </summary>
        [Column]
        public double? tsp_approved_second_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_second_comment.
        /// </summary>
        [Column]
        public string tsp_approved_second_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_third_user.
        /// </summary>
        [Column]
        public string tsp_approved_third_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_third_date.
        /// </summary>
        [Column]
        public DateTime? tsp_approved_third_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_third_hours.
        /// </summary>
        [Column]
        public double? tsp_approved_third_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_third_amount.
        /// </summary>
        [Column]
        public double? tsp_approved_third_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_third_comment.
        /// </summary>
        [Column]
        public string tsp_approved_third_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fourth_user.
        /// </summary>
        [Column]
        public string tsp_approved_fourth_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fourth_date.
        /// </summary>
        [Column]
        public DateTime? tsp_approved_fourth_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fourth_hours.
        /// </summary>
        [Column]
        public double? tsp_approved_fourth_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fourth_amount.
        /// </summary>
        [Column]
        public double? tsp_approved_fourth_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fourth_comment.
        /// </summary>
        [Column]
        public string tsp_approved_fourth_comment { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fifth_user.
        /// </summary>
        [Column]
        public string tsp_approved_fifth_user { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fifth_date.
        /// </summary>
        [Column]
        public DateTime? tsp_approved_fifth_date { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fifth_hours.
        /// </summary>
        [Column]
        public double? tsp_approved_fifth_hours { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fifth_amount.
        /// </summary>
        [Column]
        public double? tsp_approved_fifth_amount { get; set; }

        /// <summary>
        /// Gets or sets the tsp_approved_fifth_comment.
        /// </summary>
        [Column]
        public string tsp_approved_fifth_comment { get; set; }

        /// <summary>
        /// Gets or sets the most_recent_approved_user.
        /// </summary>
        [Column]
        public string most_recent_approved_user { get; set; }

        /// <summary>
        /// Gets or sets the most_recent_approved_date.
        /// </summary>
        [Column]
        public DateTime? most_recent_approved_date { get; set; }

        /// <summary>
        /// Gets or sets the most_recent_approved_hours.
        /// </summary>
        [Column]
        public double? most_recent_approved_hours { get; set; }

        /// <summary>
        /// Gets or sets the most_recent_approved_amount.
        /// </summary>
        [Column]
        public double? most_recent_approved_amount { get; set; }

        /// <summary>
        /// Gets or sets the most_recent_approved_comment.
        /// </summary>
        [Column]
        public string most_recent_approved_comment { get; set; }

        /// <summary>
        /// Gets or sets the total_certified_amount.
        /// </summary>
        [Column]
        public double? total_certified_amount { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[vwUnifiedFieldValues] table.
    /// </summary>
    [TableName("[dbo].[vwUnifiedFieldValues]")]
    [ExplicitColumns]
    public partial class vwUnifiedFieldValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessWorkflowId.
        /// </summary>
        [Column]
        public int ProcessWorkflowId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public string Value { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[web_service_log] table.
    /// </summary>
    [TableName("[dbo].[web_service_log]")]
    [PrimaryKey("wsl_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class web_service_logRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the wsl_id.
        /// </summary>
        [Column]
        public int wsl_id { get; set; }

        /// <summary>
        /// Gets or sets the wsl_code.
        /// </summary>
        [Column]
        public int wsl_code { get; set; }

        /// <summary>
        /// Gets or sets the wsl_message.
        /// </summary>
        [Column]
        public string wsl_message { get; set; }

        /// <summary>
        /// Gets or sets the wsl_type.
        /// </summary>
        [Column]
        public string wsl_type { get; set; }

        /// <summary>
        /// Gets or sets the wsl_database.
        /// </summary>
        [Column]
        public string wsl_database { get; set; }

        /// <summary>
        /// Gets or sets the wsl_organization.
        /// </summary>
        [Column]
        public string wsl_organization { get; set; }

        /// <summary>
        /// Gets or sets the wsl_username.
        /// </summary>
        [Column]
        public string wsl_username { get; set; }

        /// <summary>
        /// Gets or sets the wsl_source.
        /// </summary>
        [Column]
        public string wsl_source { get; set; }

        /// <summary>
        /// Gets or sets the wsl_timestamp.
        /// </summary>
        [Column]
        public DateTime wsl_timestamp { get; set; }

        /// <summary>
        /// Gets or sets the wsl_count_success.
        /// </summary>
        [Column]
        public int wsl_count_success { get; set; }

        /// <summary>
        /// Gets or sets the wsl_count_failure.
        /// </summary>
        [Column]
        public int wsl_count_failure { get; set; }

        /// <summary>
        /// Gets or sets the wsl_data_success.
        /// </summary>
        [Column]
        public string wsl_data_success { get; set; }

        /// <summary>
        /// Gets or sets the wsl_data_failure.
        /// </summary>
        [Column]
        public string wsl_data_failure { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[workflow] table.
    /// </summary>
    [TableName("[dbo].[workflow]")]
    [PrimaryKey("w_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class workflowRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the w_id.
        /// </summary>
        [Column]
        public int w_id { get; set; }

        /// <summary>
        /// Gets or sets the w_category.
        /// </summary>
        [Column]
        public string w_category { get; set; }

        /// <summary>
        /// Gets or sets the w_subject.
        /// </summary>
        [Column]
        public string w_subject { get; set; }

        /// <summary>
        /// Gets or sets the w_up_id_author.
        /// </summary>
        [Column]
        public int w_up_id_author { get; set; }

        /// <summary>
        /// Gets or sets the w_date_author.
        /// </summary>
        [Column]
        public DateTime w_date_author { get; set; }

        /// <summary>
        /// Gets or sets the w_status.
        /// </summary>
        [Column]
        public int w_status { get; set; }

        /// <summary>
        /// Gets or sets the w_status_date.
        /// </summary>
        [Column]
        public DateTime w_status_date { get; set; }

        /// <summary>
        /// Gets or sets the w_opt_type.
        /// </summary>
        [Column]
        public int w_opt_type { get; set; }

        /// <summary>
        /// Gets or sets the w_opt_limit.
        /// </summary>
        [Column]
        public int w_opt_limit { get; set; }

        /// <summary>
        /// Gets or sets the w_opt_limit_time.
        /// </summary>
        [Column]
        public int w_opt_limit_time { get; set; }

        /// <summary>
        /// Gets or sets the w_opt_notify.
        /// </summary>
        [Column]
        public int w_opt_notify { get; set; }

        /// <summary>
        /// Gets or sets the w_url.
        /// </summary>
        [Column]
        public string w_url { get; set; }

        /// <summary>
        /// Gets or sets the w_url_attach1.
        /// </summary>
        [Column]
        public string w_url_attach1 { get; set; }

        /// <summary>
        /// Gets or sets the w_url_attach2.
        /// </summary>
        [Column]
        public string w_url_attach2 { get; set; }

        /// <summary>
        /// Gets or sets the w_comment.
        /// </summary>
        [Column]
        public string w_comment { get; set; }

        /// <summary>
        /// Gets or sets the w_url_attach3.
        /// </summary>
        [Column]
        public string w_url_attach3 { get; set; }

        /// <summary>
        /// Gets or sets the w_url_attach4.
        /// </summary>
        [Column]
        public string w_url_attach4 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[workflow_review] table.
    /// </summary>
    [TableName("[dbo].[workflow_review]")]
    [PrimaryKey("wrev_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class workflow_reviewRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the wrev_id.
        /// </summary>
        [Column]
        public int wrev_id { get; set; }

        /// <summary>
        /// Gets or sets the wrev_wr_id.
        /// </summary>
        [Column]
        public int wrev_wr_id { get; set; }

        /// <summary>
        /// Gets or sets the wrev_date_start.
        /// </summary>
        [Column]
        public DateTime wrev_date_start { get; set; }

        /// <summary>
        /// Gets or sets the wrev_date_end.
        /// </summary>
        [Column]
        public DateTime? wrev_date_end { get; set; }

        /// <summary>
        /// Gets or sets the wrev_url.
        /// </summary>
        [Column]
        public string wrev_url { get; set; }

        /// <summary>
        /// Gets or sets the wrev_url_attach1.
        /// </summary>
        [Column]
        public string wrev_url_attach1 { get; set; }

        /// <summary>
        /// Gets or sets the wrev_url_attach2.
        /// </summary>
        [Column]
        public string wrev_url_attach2 { get; set; }

        /// <summary>
        /// Gets or sets the wrev_comment.
        /// </summary>
        [Column]
        public string wrev_comment { get; set; }

        /// <summary>
        /// Gets or sets the wrev_url_attach3.
        /// </summary>
        [Column]
        public string wrev_url_attach3 { get; set; }

        /// <summary>
        /// Gets or sets the wrev_url_attach4.
        /// </summary>
        [Column]
        public string wrev_url_attach4 { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[workflow_reviewer] table.
    /// </summary>
    [TableName("[dbo].[workflow_reviewer]")]
    [PrimaryKey("wr_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class workflow_reviewerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the wr_id.
        /// </summary>
        [Column]
        public int wr_id { get; set; }

        /// <summary>
        /// Gets or sets the wr_w_id.
        /// </summary>
        [Column]
        public int wr_w_id { get; set; }

        /// <summary>
        /// Gets or sets the wr_seq.
        /// </summary>
        [Column]
        public int wr_seq { get; set; }

        /// <summary>
        /// Gets or sets the wr_up_id.
        /// </summary>
        [Column]
        public int wr_up_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [dbo].[workflow_status] table.
    /// </summary>
    [TableName("[dbo].[workflow_status]")]
    [PrimaryKey("wstat_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class workflow_statusRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the wstat_id.
        /// </summary>
        [Column]
        public int wstat_id { get; set; }

        /// <summary>
        /// Gets or sets the wstat_name.
        /// </summary>
        [Column]
        public string wstat_name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTrigger] table.
    /// </summary>
    [TableName("[pm].[ActionTrigger]")]
    [PrimaryKey("ActionTriggerId")]
    [ExplicitColumns]
    public partial class ActionTriggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets or sets the StopWorkflow.
        /// </summary>
        [Column]
        public bool StopWorkflow { get; set; }

        /// <summary>
        /// Gets or sets the AllowPhaseOwnerWorkflowResolution.
        /// </summary>
        [Column]
        public bool AllowPhaseOwnerWorkflowResolution { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerDefaultTemplate] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerDefaultTemplate]")]
    [PrimaryKey("ActionTriggerId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActionTriggerDefaultTemplateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentTemplateId.
        /// </summary>
        [Column]
        public int DocumentTemplateId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerDocumentActivityTemplate] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerDocumentActivityTemplate]")]
    [PrimaryKey("ActionTriggerDocumentActivityTemplateId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActionTriggerDocumentActivityTemplateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerDocumentActivityTemplateId.
        /// </summary>
        [Column]
        public int ActionTriggerDocumentActivityTemplateId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentActivityTemplateId.
        /// </summary>
        [Column]
        public int DocumentActivityTemplateId { get; set; }

        /// <summary>
        /// Gets or sets the OverrideExisting.
        /// </summary>
        [Column]
        public bool OverrideExisting { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerEmailNotification] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerEmailNotification]")]
    [PrimaryKey("ActionTriggerId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActionTriggerEmailNotificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the IncludePhaseOwner.
        /// </summary>
        [Column]
        public bool IncludePhaseOwner { get; set; }

        /// <summary>
        /// Gets or sets the IncludeOtherReviewers.
        /// </summary>
        [Column]
        public bool IncludeOtherReviewers { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerFieldOption] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerFieldOption]")]
    [PrimaryKey("ActionTriggerFieldOptionId")]
    [ExplicitColumns]
    public partial class ActionTriggerFieldOptionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerFieldOptionId.
        /// </summary>
        [Column]
        public int ActionTriggerFieldOptionId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerRoleInsertionId.
        /// </summary>
        [Column]
        public int ActionTriggerRoleInsertionId { get; set; }

        /// <summary>
        /// Gets or sets the Editable.
        /// </summary>
        [Column]
        public bool Editable { get; set; }

        /// <summary>
        /// Gets or sets the Hidden.
        /// </summary>
        [Column]
        public bool Hidden { get; set; }

        /// <summary>
        /// Gets or sets the Required.
        /// </summary>
        [Column]
        public bool Required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerHistory] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerHistory]")]
    [PrimaryKey("ActionTriggerHistoryId")]
    [ExplicitColumns]
    public partial class ActionTriggerHistoryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerHistoryId.
        /// </summary>
        [Column]
        public int ActionTriggerHistoryId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerHistoryTypeId.
        /// </summary>
        [Column]
        public int ActionTriggerHistoryTypeId { get; set; }

        /// <summary>
        /// Gets or sets the p_id.
        /// </summary>
        [Column]
        public int p_id { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTime.
        /// </summary>
        [Column]
        public DateTime ActionTime { get; set; }

        /// <summary>
        /// Gets or sets the Action.
        /// </summary>
        [Column]
        public string Action { get; set; }

        /// <summary>
        /// Gets or sets the FieldCaption.
        /// </summary>
        [Column]
        public string FieldCaption { get; set; }

        /// <summary>
        /// Gets or sets the FieldValue.
        /// </summary>
        [Column]
        public string FieldValue { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerHistoryFormPhase] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerHistoryFormPhase]")]
    [PrimaryKey("ActionTriggerHistoryId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActionTriggerHistoryFormPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerHistoryId.
        /// </summary>
        [Column]
        public int ActionTriggerHistoryId { get; set; }

        /// <summary>
        /// Gets or sets the ccpfw_id.
        /// </summary>
        [Column]
        public int ccpfw_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerHistoryInitiationPhase] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerHistoryInitiationPhase]")]
    [PrimaryKey("ActionTriggerHistoryId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActionTriggerHistoryInitiationPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerHistoryId.
        /// </summary>
        [Column]
        public int ActionTriggerHistoryId { get; set; }

        /// <summary>
        /// Gets or sets the ccpiw_id.
        /// </summary>
        [Column]
        public int ccpiw_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerHistoryType] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerHistoryType]")]
    [PrimaryKey("ActionTriggerHistoryTypeId")]
    [ExplicitColumns]
    public partial class ActionTriggerHistoryTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerHistoryTypeId.
        /// </summary>
        [Column]
        public int ActionTriggerHistoryTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerProcessActivity] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerProcessActivity]")]
    [PrimaryKey("ActionTriggerProcessActivityId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActionTriggerProcessActivityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerProcessActivityId.
        /// </summary>
        [Column]
        public int ActionTriggerProcessActivityId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessActivityId.
        /// </summary>
        [Column]
        public int ProcessActivityId { get; set; }

        /// <summary>
        /// Gets or sets the OverrideExisting.
        /// </summary>
        [Column]
        public bool OverrideExisting { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerRoleAssignment] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerRoleAssignment]")]
    [PrimaryKey("ActionTriggerRoleAssignmentId")]
    [ExplicitColumns]
    public partial class ActionTriggerRoleAssignmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerRoleAssignmentId.
        /// </summary>
        [Column]
        public int ActionTriggerRoleAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the RoleAssignmentId.
        /// </summary>
        [Column]
        public int RoleAssignmentId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerRoleAssignmentPhase] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerRoleAssignmentPhase]")]
    [PrimaryKey("ActionTriggerRoleAssignmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActionTriggerRoleAssignmentPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerRoleAssignmentId.
        /// </summary>
        [Column]
        public int ActionTriggerRoleAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerRoleInsertion] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerRoleInsertion]")]
    [PrimaryKey("ActionTriggerRoleInsertionId")]
    [ExplicitColumns]
    public partial class ActionTriggerRoleInsertionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerRoleInsertionId.
        /// </summary>
        [Column]
        public int ActionTriggerRoleInsertionId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessRoleTypeId.
        /// </summary>
        [Column]
        public int ProcessRoleTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActionTriggerRoleInsertionPhase] table.
    /// </summary>
    [TableName("[pm].[ActionTriggerRoleInsertionPhase]")]
    [PrimaryKey("ActionTriggerRoleInsertionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActionTriggerRoleInsertionPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerRoleInsertionId.
        /// </summary>
        [Column]
        public int ActionTriggerRoleInsertionId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ActivityComment] table.
    /// </summary>
    [TableName("[pm].[ActivityComment]")]
    [PrimaryKey("ActivityCommentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ActivityCommentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActivityCommentId.
        /// </summary>
        [Column]
        public long ActivityCommentId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowParticipantRequestId.
        /// </summary>
        [Column]
        public long WorkflowParticipantRequestId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[AttachmentResponse] table.
    /// </summary>
    [TableName("[pm].[AttachmentResponse]")]
    [PrimaryKey("AttachmentResponseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AttachmentResponseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentResponseId.
        /// </summary>
        [Column]
        public long AttachmentResponseId { get; set; }

        /// <summary>
        /// Gets or sets the AttachmentResponseActionId.
        /// </summary>
        [Column]
        public int AttachmentResponseActionId { get; set; }

        /// <summary>
        /// Gets or sets the Reason.
        /// </summary>
        [Column]
        public string Reason { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[AttachmentResponseAction] table.
    /// </summary>
    [TableName("[pm].[AttachmentResponseAction]")]
    [PrimaryKey("AttachmentResponseActionId")]
    [ExplicitColumns]
    public partial class AttachmentResponseActionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentResponseActionId.
        /// </summary>
        [Column]
        public int AttachmentResponseActionId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[AttachmentResponseDocument] table.
    /// </summary>
    [TableName("[pm].[AttachmentResponseDocument]")]
    [PrimaryKey("AttachmentResponseDocumentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AttachmentResponseDocumentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentResponseDocumentId.
        /// </summary>
        [Column]
        public long AttachmentResponseDocumentId { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[AttachmentResponseRevision] table.
    /// </summary>
    [TableName("[pm].[AttachmentResponseRevision]")]
    [PrimaryKey("AttachmentResponseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AttachmentResponseRevisionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentResponseId.
        /// </summary>
        [Column]
        public long AttachmentResponseId { get; set; }

        /// <summary>
        /// Gets or sets the AttachmentResponseDocumentId.
        /// </summary>
        [Column]
        public long AttachmentResponseDocumentId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[AttachmentReviewRequest] table.
    /// </summary>
    [TableName("[pm].[AttachmentReviewRequest]")]
    [PrimaryKey("AttachmentReviewRequestId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class AttachmentReviewRequestRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the AttachmentReviewRequestId.
        /// </summary>
        [Column]
        public long AttachmentReviewRequestId { get; set; }

        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        [Column]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets the ResponseRequired.
        /// </summary>
        [Column]
        public bool ResponseRequired { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[CommunicationType] table.
    /// </summary>
    [TableName("[pm].[CommunicationType]")]
    [PrimaryKey("CommunicationTypeId")]
    [ExplicitColumns]
    public partial class CommunicationTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the CommunicationTypeId.
        /// </summary>
        [Column]
        public int CommunicationTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ConditionEvaluation] table.
    /// </summary>
    [TableName("[pm].[ConditionEvaluation]")]
    [PrimaryKey("ConditionEvaluationId")]
    [ExplicitColumns]
    public partial class ConditionEvaluationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ConditionEvaluationId.
        /// </summary>
        [Column]
        public int ConditionEvaluationId { get; set; }

        /// <summary>
        /// Gets or sets the ConditionEvaluationTypeId.
        /// </summary>
        [Column]
        public int ConditionEvaluationTypeId { get; set; }

        /// <summary>
        /// Gets or sets the FieldEvaluationId.
        /// </summary>
        [Column]
        public int FieldEvaluationId { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the EvaluateIndependently.
        /// </summary>
        [Column]
        public bool EvaluateIndependently { get; set; }

        /// <summary>
        /// Gets or sets the DisplayOrder.
        /// </summary>
        [Column]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ConditionEvaluationType] table.
    /// </summary>
    [TableName("[pm].[ConditionEvaluationType]")]
    [PrimaryKey("ConditionEvaluationTypeId")]
    [ExplicitColumns]
    public partial class ConditionEvaluationTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ConditionEvaluationTypeId.
        /// </summary>
        [Column]
        public int ConditionEvaluationTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Operation.
        /// </summary>
        [Column]
        public string Operation { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[CustomFieldAttachmentType] table.
    /// </summary>
    [TableName("[pm].[CustomFieldAttachmentType]")]
    [PrimaryKey("cf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CustomFieldAttachmentTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the cf_id.
        /// </summary>
        [Column]
        public int cf_id { get; set; }

        /// <summary>
        /// Gets or sets the o_id.
        /// </summary>
        [Column]
        public int o_id { get; set; }

        /// <summary>
        /// Gets or sets the ccpwat_id.
        /// </summary>
        [Column]
        public int ccpwat_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[CustomFieldDisplayAction] table.
    /// </summary>
    [TableName("[pm].[CustomFieldDisplayAction]")]
    [PrimaryKey("FieldDisplayActionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CustomFieldDisplayActionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldDisplayActionId.
        /// </summary>
        [Column]
        public int FieldDisplayActionId { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_id.
        /// </summary>
        [Column]
        public int ccrfcf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[CustomFormFieldEvaluation] table.
    /// </summary>
    [TableName("[pm].[CustomFormFieldEvaluation]")]
    [PrimaryKey("FieldEvaluationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CustomFormFieldEvaluationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldEvaluationId.
        /// </summary>
        [Column]
        public int FieldEvaluationId { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_id.
        /// </summary>
        [Column]
        public int ccrfcf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[CustomFormFieldSource] table.
    /// </summary>
    [TableName("[pm].[CustomFormFieldSource]")]
    [PrimaryKey("ActionTriggerFieldOptionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class CustomFormFieldSourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerFieldOptionId.
        /// </summary>
        [Column]
        public int ActionTriggerFieldOptionId { get; set; }

        /// <summary>
        /// Gets or sets the ccrfcf_id.
        /// </summary>
        [Column]
        public int ccrfcf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[DistributionProcessRole] table.
    /// </summary>
    [TableName("[pm].[DistributionProcessRole]")]
    [PrimaryKey("DistributionProcessRoleId")]
    [ExplicitColumns]
    public partial class DistributionProcessRoleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DistributionProcessRoleId.
        /// </summary>
        [Column]
        public long DistributionProcessRoleId { get; set; }

        /// <summary>
        /// Gets or sets the DistributionRecipientId.
        /// </summary>
        [Column]
        public long DistributionRecipientId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessRoleTypeId.
        /// </summary>
        [Column]
        public int ProcessRoleTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[DistributionProcessRolePhase] table.
    /// </summary>
    [TableName("[pm].[DistributionProcessRolePhase]")]
    [PrimaryKey("DistributionProcessRoleId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DistributionProcessRolePhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DistributionProcessRoleId.
        /// </summary>
        [Column]
        public long DistributionProcessRoleId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[DocumentActivity] table.
    /// </summary>
    [TableName("[pm].[DocumentActivity]")]
    [PrimaryKey("DocumentActivityId")]
    [ExplicitColumns]
    public partial class DocumentActivityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentActivityId.
        /// </summary>
        [Column]
        public int DocumentActivityId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentTypeId.
        /// </summary>
        [Column]
        public int DocumentTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Priority.
        /// </summary>
        [Column]
        public short Priority { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[DocumentActivityDefaultSource] table.
    /// </summary>
    [TableName("[pm].[DocumentActivityDefaultSource]")]
    [PrimaryKey("DocumentActivityId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DocumentActivityDefaultSourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentActivityId.
        /// </summary>
        [Column]
        public int DocumentActivityId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentSourceId.
        /// </summary>
        [Column]
        public int DocumentSourceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[DocumentActivitySource] table.
    /// </summary>
    [TableName("[pm].[DocumentActivitySource]")]
    [PrimaryKey("DocumentActivityId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class DocumentActivitySourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentActivityId.
        /// </summary>
        [Column]
        public int DocumentActivityId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentSourceId.
        /// </summary>
        [Column]
        public int DocumentSourceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[DocumentActivityTemplate] table.
    /// </summary>
    [TableName("[pm].[DocumentActivityTemplate]")]
    [PrimaryKey("DocumentActivityTemplateId")]
    [ExplicitColumns]
    public partial class DocumentActivityTemplateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentActivityTemplateId.
        /// </summary>
        [Column]
        public int DocumentActivityTemplateId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentActivityId.
        /// </summary>
        [Column]
        public int DocumentActivityId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentTemplateId.
        /// </summary>
        [Column]
        public int DocumentTemplateId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[EffectiveDateEmailOption] table.
    /// </summary>
    [TableName("[pm].[EffectiveDateEmailOption]")]
    [PrimaryKey("ccp_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class EffectiveDateEmailOptionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccp_id.
        /// </summary>
        [Column]
        public int ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [Column]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or sets the IncludeInitiator.
        /// </summary>
        [Column]
        public bool IncludeInitiator { get; set; }

        /// <summary>
        /// Gets or sets the IncludePhaseOwner.
        /// </summary>
        [Column]
        public bool IncludePhaseOwner { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[EffectiveDateEmailOptionUser] table.
    /// </summary>
    [TableName("[pm].[EffectiveDateEmailOptionUser]")]
    [PrimaryKey("ccp_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class EffectiveDateEmailOptionUserRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccp_id.
        /// </summary>
        [Column]
        public int ccp_id { get; set; }

        /// <summary>
        /// Gets or sets the u_id.
        /// </summary>
        [Column]
        public int u_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[EffectiveDateEmailSchedule] table.
    /// </summary>
    [TableName("[pm].[EffectiveDateEmailSchedule]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class EffectiveDateEmailScheduleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public int Value { get; set; }

        /// <summary>
        /// Gets or sets the o_id.
        /// </summary>
        [Column]
        public int o_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[EmailNotificationProcessRole] table.
    /// </summary>
    [TableName("[pm].[EmailNotificationProcessRole]")]
    [PrimaryKey("EmailNotificationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class EmailNotificationProcessRoleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessRoleTypeId.
        /// </summary>
        [Column]
        public int ProcessRoleTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[EmailNotificationTemplate] table.
    /// </summary>
    [TableName("[pm].[EmailNotificationTemplate]")]
    [PrimaryKey("EmailNotificationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class EmailNotificationTemplateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the ccn_id.
        /// </summary>
        [Column]
        public int ccn_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[EmailNotificationUser] table.
    /// </summary>
    [TableName("[pm].[EmailNotificationUser]")]
    [PrimaryKey("EmailNotificationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class EmailNotificationUserRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the UserId.
        /// </summary>
        [Column]
        public int UserId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ExternalCommunication] table.
    /// </summary>
    [TableName("[pm].[ExternalCommunication]")]
    [PrimaryKey("ExternalCommunicationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ExternalCommunicationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalCommunicationId.
        /// </summary>
        [Column]
        public long ExternalCommunicationId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the RecipientPersonId.
        /// </summary>
        [Column]
        public int RecipientPersonId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionId.
        /// </summary>
        [Column]
        public int MessageDistributionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ExternalCommunicationDistribution] table.
    /// </summary>
    [TableName("[pm].[ExternalCommunicationDistribution]")]
    [PrimaryKey("ExternalCommunicationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ExternalCommunicationDistributionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalCommunicationId.
        /// </summary>
        [Column]
        public long ExternalCommunicationId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionWorkflowEventId.
        /// </summary>
        [Column]
        public long MessageDistributionWorkflowEventId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ExternalParticipantToken] table.
    /// </summary>
    [TableName("[pm].[ExternalParticipantToken]")]
    [PrimaryKey("ExternalParticipantTokenId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ExternalParticipantTokenRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalParticipantTokenId.
        /// </summary>
        [Column]
        public long ExternalParticipantTokenId { get; set; }

        /// <summary>
        /// Gets or sets the ExternalAccessTokenId.
        /// </summary>
        [Column]
        public long ExternalAccessTokenId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ExternalPartyRequest] table.
    /// </summary>
    [TableName("[pm].[ExternalPartyRequest]")]
    [PrimaryKey("ExternalPartyRequestId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ExternalPartyRequestRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalPartyRequestId.
        /// </summary>
        [Column]
        public long ExternalPartyRequestId { get; set; }

        /// <summary>
        /// Gets or sets the SecurityToken.
        /// </summary>
        [Column]
        public Guid SecurityToken { get; set; }

        /// <summary>
        /// Gets or sets the OneTimePin.
        /// </summary>
        [Column]
        public byte[] OneTimePin { get; set; }

        /// <summary>
        /// Gets or sets the IsRecalled.
        /// </summary>
        [Column]
        public bool IsRecalled { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ExternalPartyResponse] table.
    /// </summary>
    [TableName("[pm].[ExternalPartyResponse]")]
    [PrimaryKey("ExternalPartyResponseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ExternalPartyResponseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ExternalPartyResponseId.
        /// </summary>
        [Column]
        public long ExternalPartyResponseId { get; set; }

        /// <summary>
        /// Gets or sets the TrackedMessageId.
        /// </summary>
        [Column]
        public long TrackedMessageId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[FairMarketValueSubmission] table.
    /// </summary>
    [TableName("[pm].[FairMarketValueSubmission]")]
    [PrimaryKey("FairMarketValueSubmissionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class FairMarketValueSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FairMarketValueSubmissionId.
        /// </summary>
        [Column]
        public long FairMarketValueSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the CalculationResponseId.
        /// </summary>
        [Column]
        public long CalculationResponseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[FieldDisplayAction] table.
    /// </summary>
    [TableName("[pm].[FieldDisplayAction]")]
    [PrimaryKey("FieldDisplayActionId")]
    [ExplicitColumns]
    public partial class FieldDisplayActionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldDisplayActionId.
        /// </summary>
        [Column]
        public int FieldDisplayActionId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the FieldDisplayActionTypeId.
        /// </summary>
        [Column]
        public int FieldDisplayActionTypeId { get; set; }

        /// <summary>
        /// Gets or sets the DisplayOrder.
        /// </summary>
        [Column]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Gets or sets the DisplayMessage.
        /// </summary>
        [Column]
        public string DisplayMessage { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[FieldDisplayActionType] table.
    /// </summary>
    [TableName("[pm].[FieldDisplayActionType]")]
    [PrimaryKey("FieldDisplayActionTypeId")]
    [ExplicitColumns]
    public partial class FieldDisplayActionTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldDisplayActionTypeId.
        /// </summary>
        [Column]
        public int FieldDisplayActionTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[FieldEvaluation] table.
    /// </summary>
    [TableName("[pm].[FieldEvaluation]")]
    [PrimaryKey("FieldEvaluationId")]
    [ExplicitColumns]
    public partial class FieldEvaluationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldEvaluationId.
        /// </summary>
        [Column]
        public int FieldEvaluationId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets or sets the EvaluateIndependently.
        /// </summary>
        [Column]
        public bool EvaluateIndependently { get; set; }

        /// <summary>
        /// Gets or sets the DisplayOrder.
        /// </summary>
        [Column]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[FormActionTrigger] table.
    /// </summary>
    [TableName("[pm].[FormActionTrigger]")]
    [PrimaryKey("ccpf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class FormActionTriggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpf_id.
        /// </summary>
        [Column]
        public int ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[FormRoleInsert] table.
    /// </summary>
    [TableName("[pm].[FormRoleInsert]")]
    [PrimaryKey("ccpf_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class FormRoleInsertRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpf_id.
        /// </summary>
        [Column]
        public int ccpf_id { get; set; }

        /// <summary>
        /// Gets or sets the RoleInsertionId.
        /// </summary>
        [Column]
        public int RoleInsertionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[GroupProcessRole] table.
    /// </summary>
    [TableName("[pm].[GroupProcessRole]")]
    [PrimaryKey("GroupId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class GroupProcessRoleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the GroupId.
        /// </summary>
        [Column]
        public int GroupId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessRoleTypeId.
        /// </summary>
        [Column]
        public int ProcessRoleTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[InitiationActionTrigger] table.
    /// </summary>
    [TableName("[pm].[InitiationActionTrigger]")]
    [PrimaryKey("ccpi_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class InitiationActionTriggerRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpi_id.
        /// </summary>
        [Column]
        public int ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerId.
        /// </summary>
        [Column]
        public int ActionTriggerId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[InitiationRoleInsert] table.
    /// </summary>
    [TableName("[pm].[InitiationRoleInsert]")]
    [PrimaryKey("ccpi_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class InitiationRoleInsertRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpi_id.
        /// </summary>
        [Column]
        public int ccpi_id { get; set; }

        /// <summary>
        /// Gets or sets the RoleInsertionId.
        /// </summary>
        [Column]
        public int RoleInsertionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[MessageDistributionWorkflowEvent] table.
    /// </summary>
    [TableName("[pm].[MessageDistributionWorkflowEvent]")]
    [PrimaryKey("MessageDistributionWorkflowEventId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class MessageDistributionWorkflowEventRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the MessageDistributionWorkflowEventId.
        /// </summary>
        [Column]
        public long MessageDistributionWorkflowEventId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionId.
        /// </summary>
        [Column]
        public int MessageDistributionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[PhaseActionDeadline] table.
    /// </summary>
    [TableName("[pm].[PhaseActionDeadline]")]
    [PrimaryKey("PhaseActionDeadlineId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class PhaseActionDeadlineRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseActionDeadlineId.
        /// </summary>
        [Column]
        public int PhaseActionDeadlineId { get; set; }

        /// <summary>
        /// Gets or sets the DeadlineActionTypeId.
        /// </summary>
        [Column]
        public int DeadlineActionTypeId { get; set; }

        /// <summary>
        /// Gets or sets the DeadlineDays.
        /// </summary>
        [Column]
        public short DeadlineDays { get; set; }

        /// <summary>
        /// Gets or sets the RoutingTypeId.
        /// </summary>
        [Column]
        public int? RoutingTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[PhaseType] table.
    /// </summary>
    [TableName("[pm].[PhaseType]")]
    [PrimaryKey("PhaseTypeId")]
    [ExplicitColumns]
    public partial class PhaseTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the PhaseTypeId.
        /// </summary>
        [Column]
        public int PhaseTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessActionTypeCaption] table.
    /// </summary>
    [TableName("[pm].[ProcessActionTypeCaption]")]
    [PrimaryKey("ProcessActionTypeId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessActionTypeCaptionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessActionTypeId.
        /// </summary>
        [Column]
        public int ProcessActionTypeId { get; set; }

        /// <summary>
        /// Gets or sets the ClientCaptionId.
        /// </summary>
        [Column]
        public int ClientCaptionId { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [Column]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the Enabled.
        /// </summary>
        [Column]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessActivationPhase] table.
    /// </summary>
    [TableName("[pm].[ProcessActivationPhase]")]
    [PrimaryKey("ProcessActivationPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessActivationPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessActivationPhaseId.
        /// </summary>
        [Column]
        public int ProcessActivationPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessActivationId.
        /// </summary>
        [Column]
        public int ProcessActivationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessActivity] table.
    /// </summary>
    [TableName("[pm].[ProcessActivity]")]
    [PrimaryKey("ProcessActivityId")]
    [ExplicitColumns]
    public partial class ProcessActivityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessActivityId.
        /// </summary>
        [Column]
        public int ProcessActivityId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets or sets the AllowAddingRoleAssignment.
        /// </summary>
        [Column]
        public bool AllowAddingRoleAssignment { get; set; }

        /// <summary>
        /// Gets or sets the AllowRemovingRoleAssignment.
        /// </summary>
        [Column]
        public bool AllowRemovingRoleAssignment { get; set; }

        /// <summary>
        /// Gets or sets the AllowOrderingRoleAssignment.
        /// </summary>
        [Column]
        public bool AllowOrderingRoleAssignment { get; set; }

        /// <summary>
        /// Gets or sets the RequirePhaseOwnerApproval.
        /// </summary>
        [Column]
        public bool RequirePhaseOwnerApproval { get; set; }

        /// <summary>
        /// Gets or sets the Instructions.
        /// </summary>
        [Column]
        public string Instructions { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessActivityRoleAssignment] table.
    /// </summary>
    [TableName("[pm].[ProcessActivityRoleAssignment]")]
    [PrimaryKey("ProcessActivityId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessActivityRoleAssignmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessActivityId.
        /// </summary>
        [Column]
        public int ProcessActivityId { get; set; }

        /// <summary>
        /// Gets or sets the RoleAssignmentId.
        /// </summary>
        [Column]
        public int RoleAssignmentId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessCommunicationType] table.
    /// </summary>
    [TableName("[pm].[ProcessCommunicationType]")]
    [PrimaryKey("ProcessCommunicationTypeId")]
    [ExplicitColumns]
    public partial class ProcessCommunicationTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessCommunicationTypeId.
        /// </summary>
        [Column]
        public int ProcessCommunicationTypeId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the CommunicationTypeId.
        /// </summary>
        [Column]
        public int CommunicationTypeId { get; set; }

        /// <summary>
        /// Gets or sets the RequireCompletion.
        /// </summary>
        [Column]
        public bool RequireCompletion { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessDocumentActivity] table.
    /// </summary>
    [TableName("[pm].[ProcessDocumentActivity]")]
    [PrimaryKey("ProcessActivityId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessDocumentActivityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessActivityId.
        /// </summary>
        [Column]
        public int ProcessActivityId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentActivityId.
        /// </summary>
        [Column]
        public int DocumentActivityId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessFieldAccess] table.
    /// </summary>
    [TableName("[pm].[ProcessFieldAccess]")]
    [PrimaryKey("ProcessFieldAccessId")]
    [ExplicitColumns]
    public partial class ProcessFieldAccessRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessFieldAccessId.
        /// </summary>
        [Column]
        public long ProcessFieldAccessId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the Editable.
        /// </summary>
        [Column]
        public bool Editable { get; set; }

        /// <summary>
        /// Gets or sets the Hidden.
        /// </summary>
        [Column]
        public bool Hidden { get; set; }

        /// <summary>
        /// Gets or sets the Required.
        /// </summary>
        [Column]
        public bool Required { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessForm] table.
    /// </summary>
    [TableName("[pm].[ProcessForm]")]
    [PrimaryKey("ProcessFormId")]
    [ExplicitColumns]
    public partial class ProcessFormRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessFormId.
        /// </summary>
        [Column]
        public int ProcessFormId { get; set; }

        /// <summary>
        /// Gets or sets the RequisitionFormId.
        /// </summary>
        [Column]
        public int RequisitionFormId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ValidateOnSubmit.
        /// </summary>
        [Column]
        public bool ValidateOnSubmit { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessFormActivity] table.
    /// </summary>
    [TableName("[pm].[ProcessFormActivity]")]
    [PrimaryKey("ProcessFormActivityId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessFormActivityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessFormActivityId.
        /// </summary>
        [Column]
        public int ProcessFormActivityId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessActivityId.
        /// </summary>
        [Column]
        public int ProcessActivityId { get; set; }

        /// <summary>
        /// Gets or sets the FormLayoutId.
        /// </summary>
        [Column]
        public int FormLayoutId { get; set; }

        /// <summary>
        /// Gets or sets the Order.
        /// </summary>
        [Column]
        public short Order { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessFormPhase] table.
    /// </summary>
    [TableName("[pm].[ProcessFormPhase]")]
    [PrimaryKey("ProcessFormPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessFormPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessFormPhaseId.
        /// </summary>
        [Column]
        public int ProcessFormPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessFormId.
        /// </summary>
        [Column]
        public int ProcessFormId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessFormSubmission] table.
    /// </summary>
    [TableName("[pm].[ProcessFormSubmission]")]
    [PrimaryKey("ProcessFormSubmissionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessFormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessFormSubmissionId.
        /// </summary>
        [Column]
        public long ProcessFormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessFormId.
        /// </summary>
        [Column]
        public int ProcessFormId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessInitiationPhase] table.
    /// </summary>
    [TableName("[pm].[ProcessInitiationPhase]")]
    [PrimaryKey("ProcessInitiationPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessInitiationPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessInitiationPhaseId.
        /// </summary>
        [Column]
        public int ProcessInitiationPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessInitiationId.
        /// </summary>
        [Column]
        public int ProcessInitiationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessNotification] table.
    /// </summary>
    [TableName("[pm].[ProcessNotification]")]
    [PrimaryKey("ProcessNotificationId")]
    [ExplicitColumns]
    public partial class ProcessNotificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessNotificationId.
        /// </summary>
        [Column]
        public long ProcessNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the AllowAdd.
        /// </summary>
        [Column]
        public bool AllowAdd { get; set; }

        /// <summary>
        /// Gets or sets the AllowRemove.
        /// </summary>
        [Column]
        public bool AllowRemove { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessPhase] table.
    /// </summary>
    [TableName("[pm].[ProcessPhase]")]
    [PrimaryKey("ProcessPhaseId")]
    [ExplicitColumns]
    public partial class ProcessPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessVersionId.
        /// </summary>
        [Column]
        public int ProcessVersionId { get; set; }

        /// <summary>
        /// Gets or sets the PhaseTypeId.
        /// </summary>
        [Column]
        public int PhaseTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowOrder.
        /// </summary>
        [Column]
        public short WorkflowOrder { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessReviewPhase] table.
    /// </summary>
    [TableName("[pm].[ProcessReviewPhase]")]
    [PrimaryKey("ProcessReviewPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessReviewPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessReviewPhaseId.
        /// </summary>
        [Column]
        public int ProcessReviewPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessReviewId.
        /// </summary>
        [Column]
        public int ProcessReviewId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessRoleAssignment] table.
    /// </summary>
    [TableName("[pm].[ProcessRoleAssignment]")]
    [PrimaryKey("ProcessPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessRoleAssignmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the RoleAssignmentId.
        /// </summary>
        [Column]
        public int RoleAssignmentId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessRoleType] table.
    /// </summary>
    [TableName("[pm].[ProcessRoleType]")]
    [PrimaryKey("ProcessRoleTypeId")]
    [ExplicitColumns]
    public partial class ProcessRoleTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessRoleTypeId.
        /// </summary>
        [Column]
        public int ProcessRoleTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessSignatoryNotification] table.
    /// </summary>
    [TableName("[pm].[ProcessSignatoryNotification]")]
    [PrimaryKey("ProcessSignatoryNotificationId")]
    [ExplicitColumns]
    public partial class ProcessSignatoryNotificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessSignatoryNotificationId.
        /// </summary>
        [Column]
        public int ProcessSignatoryNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessSignatoryId.
        /// </summary>
        [Column]
        public int ProcessSignatoryId { get; set; }

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the AllowOverride.
        /// </summary>
        [Column]
        public bool AllowOverride { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessSignatoryPhase] table.
    /// </summary>
    [TableName("[pm].[ProcessSignatoryPhase]")]
    [PrimaryKey("ProcessSignatoryPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessSignatoryPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessSignatoryPhaseId.
        /// </summary>
        [Column]
        public int ProcessSignatoryPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessSignatoryId.
        /// </summary>
        [Column]
        public int ProcessSignatoryId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessSourcePhase] table.
    /// </summary>
    [TableName("[pm].[ProcessSourcePhase]")]
    [PrimaryKey("ProcessSourcePhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessSourcePhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessSourcePhaseId.
        /// </summary>
        [Column]
        public int ProcessSourcePhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessSourceId.
        /// </summary>
        [Column]
        public int ProcessSourceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessSubPhase] table.
    /// </summary>
    [TableName("[pm].[ProcessSubPhase]")]
    [PrimaryKey("ProcessSubPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessSubPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessSubPhaseId.
        /// </summary>
        [Column]
        public int ProcessSubPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ParentProcessPhaseId.
        /// </summary>
        [Column]
        public int ParentProcessPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessTemplates] table.
    /// </summary>
    [TableName("[pm].[ProcessTemplates]")]
    [PrimaryKey("DocumentTemplateId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessTemplateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the DocumentTemplateId.
        /// </summary>
        [Column]
        public int DocumentTemplateId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentSourcePhaseId.
        /// </summary>
        [Column]
        public int DocumentSourcePhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessTerminationPhase] table.
    /// </summary>
    [TableName("[pm].[ProcessTerminationPhase]")]
    [PrimaryKey("ProcessTerminationPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessTerminationPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessTerminationPhaseId.
        /// </summary>
        [Column]
        public int ProcessTerminationPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessTerminationId.
        /// </summary>
        [Column]
        public int ProcessTerminationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessVersion] table.
    /// </summary>
    [TableName("[pm].[ProcessVersion]")]
    [PrimaryKey("ProcessVersionId")]
    [ExplicitColumns]
    public partial class ProcessVersionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessVersionId.
        /// </summary>
        [Column]
        public int ProcessVersionId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessId.
        /// </summary>
        [Column]
        public int ProcessId { get; set; }

        /// <summary>
        /// Gets or sets the VersionNumber.
        /// </summary>
        [Column]
        public int VersionNumber { get; set; }

        /// <summary>
        /// Gets or sets the UseProcessActivities.
        /// </summary>
        [Column]
        public bool UseProcessActivities { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ProcessWorkflowFieldValue] table.
    /// </summary>
    [TableName("[pm].[ProcessWorkflowFieldValue]")]
    [PrimaryKey("UnifiedFieldValueId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class ProcessWorkflowFieldValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldValueId.
        /// </summary>
        [Column]
        public long UnifiedFieldValueId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessWorkflowId.
        /// </summary>
        [Column]
        public int ProcessWorkflowId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RoleAssignment] table.
    /// </summary>
    [TableName("[pm].[RoleAssignment]")]
    [PrimaryKey("RoleAssignmentId")]
    [ExplicitColumns]
    public partial class RoleAssignmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoleAssignmentId.
        /// </summary>
        [Column]
        public int RoleAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessRoleTypeId.
        /// </summary>
        [Column]
        public int ProcessRoleTypeId { get; set; }

        /// <summary>
        /// Gets or sets the GroupOrder.
        /// </summary>
        [Column]
        public short GroupOrder { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RoleAssignmentGroup] table.
    /// </summary>
    [TableName("[pm].[RoleAssignmentGroup]")]
    [PrimaryKey("RoleAssignmentGroupId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class RoleAssignmentGroupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoleAssignmentGroupId.
        /// </summary>
        [Column]
        public int RoleAssignmentGroupId { get; set; }

        /// <summary>
        /// Gets or sets the GroupId.
        /// </summary>
        [Column]
        public int GroupId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RoleAssignmentPerson] table.
    /// </summary>
    [TableName("[pm].[RoleAssignmentPerson]")]
    [PrimaryKey("RoleAssignmentPersonId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class RoleAssignmentPersonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoleAssignmentPersonId.
        /// </summary>
        [Column]
        public int RoleAssignmentPersonId { get; set; }

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RoleAssignmentProcessRole] table.
    /// </summary>
    [TableName("[pm].[RoleAssignmentProcessRole]")]
    [PrimaryKey("RoleAssignmentProcessRoleId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class RoleAssignmentProcessRoleRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoleAssignmentProcessRoleId.
        /// </summary>
        [Column]
        public int RoleAssignmentProcessRoleId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessRoleTypeId.
        /// </summary>
        [Column]
        public int ProcessRoleTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RoleFieldPermission] table.
    /// </summary>
    [TableName("[pm].[RoleFieldPermission]")]
    [PrimaryKey("RoleFieldPermissionId")]
    [ExplicitColumns]
    public partial class RoleFieldPermissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoleFieldPermissionId.
        /// </summary>
        [Column]
        public int RoleFieldPermissionId { get; set; }

        /// <summary>
        /// Gets or sets the RoleAssignmentId.
        /// </summary>
        [Column]
        public int RoleAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessFieldAccessId.
        /// </summary>
        [Column]
        public long ProcessFieldAccessId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessFormId.
        /// </summary>
        [Column]
        public int ProcessFormId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RoleInsertion] table.
    /// </summary>
    [TableName("[pm].[RoleInsertion]")]
    [PrimaryKey("RoleInsertionId")]
    [ExplicitColumns]
    public partial class RoleInsertionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoleInsertionId.
        /// </summary>
        [Column]
        public int RoleInsertionId { get; set; }

        /// <summary>
        /// Gets or sets the ActionTriggerRoleInsertionId.
        /// </summary>
        [Column]
        public int ActionTriggerRoleInsertionId { get; set; }

        /// <summary>
        /// Gets or sets the DisplayOrder.
        /// </summary>
        [Column]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RolePrincipalGroup] table.
    /// </summary>
    [TableName("[pm].[RolePrincipalGroup]")]
    [PrimaryKey("RoleInsertionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class RolePrincipalGroupRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoleInsertionId.
        /// </summary>
        [Column]
        public int RoleInsertionId { get; set; }

        /// <summary>
        /// Gets or sets the ort_id.
        /// </summary>
        [Column]
        public int ort_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RolePrincipalPerson] table.
    /// </summary>
    [TableName("[pm].[RolePrincipalPerson]")]
    [PrimaryKey("RoleInsertionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class RolePrincipalPersonRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoleInsertionId.
        /// </summary>
        [Column]
        public int RoleInsertionId { get; set; }

        /// <summary>
        /// Gets or sets the p_id.
        /// </summary>
        [Column]
        public int p_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[RoutingType] table.
    /// </summary>
    [TableName("[pm].[RoutingType]")]
    [PrimaryKey("RoutingTypeId")]
    [ExplicitColumns]
    public partial class RoutingTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the RoutingTypeId.
        /// </summary>
        [Column]
        public int RoutingTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[SignatureOption] table.
    /// </summary>
    [TableName("[pm].[SignatureOption]")]
    [PrimaryKey("SignatureOptionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SignatureOptionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the SignatureOptionId.
        /// </summary>
        [Column]
        public int SignatureOptionId { get; set; }

        /// <summary>
        /// Gets or sets the SignatureTypeId.
        /// </summary>
        [Column]
        public int SignatureTypeId { get; set; }

        /// <summary>
        /// Gets or sets the SignatureRejectionBehaviorId.
        /// </summary>
        [Column]
        public int SignatureRejectionBehaviorId { get; set; }

        /// <summary>
        /// Gets or sets the AllowExternalSigners.
        /// </summary>
        [Column]
        public bool AllowExternalSigners { get; set; }

        /// <summary>
        /// Gets or sets the EnableSignedDocumentRecipients.
        /// </summary>
        [Column]
        public bool EnableSignedDocumentRecipients { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[SignatureRejectionBehavior] table.
    /// </summary>
    [TableName("[pm].[SignatureRejectionBehavior]")]
    [PrimaryKey("SignatureRejectionBehaviorId")]
    [ExplicitColumns]
    public partial class SignatureRejectionBehaviorRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the SignatureRejectionBehaviorId.
        /// </summary>
        [Column]
        public int SignatureRejectionBehaviorId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[SignatureRoleInsert] table.
    /// </summary>
    [TableName("[pm].[SignatureRoleInsert]")]
    [PrimaryKey("ccpds_id", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SignatureRoleInsertRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ccpds_id.
        /// </summary>
        [Column]
        public int ccpds_id { get; set; }

        /// <summary>
        /// Gets or sets the RoleInsertionId.
        /// </summary>
        [Column]
        public int RoleInsertionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[SignatureType] table.
    /// </summary>
    [TableName("[pm].[SignatureType]")]
    [PrimaryKey("SignatureTypeId")]
    [ExplicitColumns]
    public partial class SignatureTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the SignatureTypeId.
        /// </summary>
        [Column]
        public int SignatureTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[SignixTransaction] table.
    /// </summary>
    [TableName("[pm].[SignixTransaction]")]
    [PrimaryKey("SignixTransactionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SignixTransactionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the SignixTransactionId.
        /// </summary>
        [Column]
        public long SignixTransactionId { get; set; }

        /// <summary>
        /// Gets or sets the TransactionIdentifier.
        /// </summary>
        [Column]
        public string TransactionIdentifier { get; set; }

        /// <summary>
        /// Gets or sets the DocumentSetId.
        /// </summary>
        [Column]
        public string DocumentSetId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[SystemFieldDisplayAction] table.
    /// </summary>
    [TableName("[pm].[SystemFieldDisplayAction]")]
    [PrimaryKey("FieldDisplayActionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SystemFieldDisplayActionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldDisplayActionId.
        /// </summary>
        [Column]
        public int FieldDisplayActionId { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsf_id.
        /// </summary>
        [Column]
        public int ccrfsf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[SystemFormFieldEvaluation] table.
    /// </summary>
    [TableName("[pm].[SystemFormFieldEvaluation]")]
    [PrimaryKey("FieldEvaluationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SystemFormFieldEvaluationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FieldEvaluationId.
        /// </summary>
        [Column]
        public int FieldEvaluationId { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsf_id.
        /// </summary>
        [Column]
        public int ccrfsf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[SystemFormFieldSource] table.
    /// </summary>
    [TableName("[pm].[SystemFormFieldSource]")]
    [PrimaryKey("ActionTriggerFieldOptionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SystemFormFieldSourceRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ActionTriggerFieldOptionId.
        /// </summary>
        [Column]
        public int ActionTriggerFieldOptionId { get; set; }

        /// <summary>
        /// Gets or sets the ccrfsf_id.
        /// </summary>
        [Column]
        public int ccrfsf_id { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[TrackedConversationWorkflowEvent] table.
    /// </summary>
    [TableName("[pm].[TrackedConversationWorkflowEvent]")]
    [PrimaryKey("TrackedConversationWorkflowEventId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class TrackedConversationWorkflowEventRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TrackedConversationWorkflowEventId.
        /// </summary>
        [Column]
        public long TrackedConversationWorkflowEventId { get; set; }

        /// <summary>
        /// Gets or sets the TrackedConversationId.
        /// </summary>
        [Column]
        public long TrackedConversationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[TrackedMessageWorkflowEvent] table.
    /// </summary>
    [TableName("[pm].[TrackedMessageWorkflowEvent]")]
    [PrimaryKey("TrackedMessageWorkflowEventId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class TrackedMessageWorkflowEventRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the TrackedMessageWorkflowEventId.
        /// </summary>
        [Column]
        public long TrackedMessageWorkflowEventId { get; set; }

        /// <summary>
        /// Gets or sets the TrackedMessageId.
        /// </summary>
        [Column]
        public long TrackedMessageId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[UserWorkflowActionState] table.
    /// </summary>
    [TableName("[pm].[UserWorkflowActionState]")]
    [PrimaryKey("UserActionEventId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class UserWorkflowActionStateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UserActionEventId.
        /// </summary>
        [Column]
        public long UserActionEventId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowId.
        /// </summary>
        [Column]
        public int WorkflowId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ViewFormCustomFields] table.
    /// </summary>
    [TableName("[pm].[ViewFormCustomFields]")]
    [ExplicitColumns]
    public partial class ViewFormCustomFieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the FormCustomFieldId.
        /// </summary>
        [Column]
        public int FormCustomFieldId { get; set; }

        /// <summary>
        /// Gets or sets the CustomFieldId.
        /// </summary>
        [Column]
        public int CustomFieldId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldName.
        /// </summary>
        [Column]
        public string UnifiedFieldName { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldLabel.
        /// </summary>
        [Column]
        public string UnifiedFieldLabel { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldCaption.
        /// </summary>
        [Column]
        public string UnifiedFieldCaption { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldTypeId.
        /// </summary>
        [Column]
        public int UnifiedFieldTypeId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedValueTypeId.
        /// </summary>
        [Column]
        public int UnifiedValueTypeId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ViewLegacyPhases] table.
    /// </summary>
    [TableName("[pm].[ViewLegacyPhases]")]
    [ExplicitColumns]
    public partial class ViewLegacyPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the LegacyPhaseId.
        /// </summary>
        [Column]
        public int? LegacyPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ViewLegacyWorkflowPhases] table.
    /// </summary>
    [TableName("[pm].[ViewLegacyWorkflowPhases]")]
    [ExplicitColumns]
    public partial class ViewLegacyWorkflowPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the LegacyWorkflowPhaseId.
        /// </summary>
        [Column]
        public int? LegacyWorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[ViewProcessFormUnifiedFields] table.
    /// </summary>
    [TableName("[pm].[ViewProcessFormUnifiedFields]")]
    [ExplicitColumns]
    public partial class ViewProcessFormUnifiedFieldRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the UnifiedFieldId.
        /// </summary>
        [Column]
        public int UnifiedFieldId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldName.
        /// </summary>
        [Column]
        public string UnifiedFieldName { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldCaption.
        /// </summary>
        [Column]
        public string UnifiedFieldCaption { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldLabel.
        /// </summary>
        [Column]
        public string UnifiedFieldLabel { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedFieldTypeId.
        /// </summary>
        [Column]
        public int UnifiedFieldTypeId { get; set; }

        /// <summary>
        /// Gets or sets the UnifiedValueTypeId.
        /// </summary>
        [Column]
        public int UnifiedValueTypeId { get; set; }

        /// <summary>
        /// Gets or sets the CustomFieldId.
        /// </summary>
        [Column]
        public int? CustomFieldId { get; set; }

        /// <summary>
        /// Gets or sets the SystemFieldSourceId.
        /// </summary>
        [Column]
        public int? SystemFieldSourceId { get; set; }

        /// <summary>
        /// Gets or sets the RequisitionFormId.
        /// </summary>
        [Column]
        public int RequisitionFormId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActionEvent] table.
    /// </summary>
    [TableName("[pm].[WorkflowActionEvent]")]
    [PrimaryKey("WorkflowActionEventId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowActionEventRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActionEventId.
        /// </summary>
        [Column]
        public long WorkflowActionEventId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActionTypeId.
        /// </summary>
        [Column]
        public short WorkflowActionTypeId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessRoleTypeId.
        /// </summary>
        [Column]
        public int ProcessRoleTypeId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseStatusId.
        /// </summary>
        [Column]
        public int ProcessPhaseStatusId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessStatusId.
        /// </summary>
        [Column]
        public int ProcessStatusId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActionState] table.
    /// </summary>
    [TableName("[pm].[WorkflowActionState]")]
    [PrimaryKey("WorkflowId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowActionStateRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowId.
        /// </summary>
        [Column]
        public int WorkflowId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActionEventId.
        /// </summary>
        [Column]
        public long WorkflowActionEventId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActionType] table.
    /// </summary>
    [TableName("[pm].[WorkflowActionType]")]
    [PrimaryKey("WorkflowActionTypeId")]
    [ExplicitColumns]
    public partial class WorkflowActionTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActionTypeId.
        /// </summary>
        [Column]
        public short WorkflowActionTypeId { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the IsUserStateChange.
        /// </summary>
        [Column]
        public bool IsUserStateChange { get; set; }

        /// <summary>
        /// Gets or sets the IsPhaseStateChange.
        /// </summary>
        [Column]
        public bool IsPhaseStateChange { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActivationPhase] table.
    /// </summary>
    [TableName("[pm].[WorkflowActivationPhase]")]
    [PrimaryKey("WorkflowActivationPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowActivationPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActivationPhaseId.
        /// </summary>
        [Column]
        public long WorkflowActivationPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActivationId.
        /// </summary>
        [Column]
        public int WorkflowActivationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActivity] table.
    /// </summary>
    [TableName("[pm].[WorkflowActivity]")]
    [PrimaryKey("WorkflowActivityId")]
    [ExplicitColumns]
    public partial class WorkflowActivityRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActivityId.
        /// </summary>
        [Column]
        public long WorkflowActivityId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessActivityId.
        /// </summary>
        [Column]
        public int ProcessActivityId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the StartTime.
        /// </summary>
        [Column]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// Gets or sets the EndTime.
        /// </summary>
        [Column]
        public DateTimeOffset? EndTime { get; set; }

        /// <summary>
        /// Gets or sets the IsRecalled.
        /// </summary>
        [Column]
        public bool IsRecalled { get; set; }

        /// <summary>
        /// Gets or sets the RecallReason.
        /// </summary>
        [Column]
        public string RecallReason { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActivityDocument] table.
    /// </summary>
    [TableName("[pm].[WorkflowActivityDocument]")]
    [PrimaryKey("WorkflowActivityDocumentId")]
    [ExplicitColumns]
    public partial class WorkflowActivityDocumentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActivityDocumentId.
        /// </summary>
        [Column]
        public long WorkflowActivityDocumentId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActivityId.
        /// </summary>
        [Column]
        public long WorkflowActivityId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentActivityId.
        /// </summary>
        [Column]
        public int DocumentActivityId { get; set; }

        /// <summary>
        /// Gets or sets the DocumentId.
        /// </summary>
        [Column]
        public int DocumentId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActivityEvent] table.
    /// </summary>
    [TableName("[pm].[WorkflowActivityEvent]")]
    [PrimaryKey("WorkflowActivityEventId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowActivityEventRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActivityEventId.
        /// </summary>
        [Column]
        public long WorkflowActivityEventId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActivityId.
        /// </summary>
        [Column]
        public long WorkflowActivityId { get; set; }

        /// <summary>
        /// Gets or sets the ActivityStatusId.
        /// </summary>
        [Column]
        public int ActivityStatusId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActivityFormCompletion] table.
    /// </summary>
    [TableName("[pm].[WorkflowActivityFormCompletion]")]
    [PrimaryKey("WorkflowActivityFormCompletionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowActivityFormCompletionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActivityFormCompletionId.
        /// </summary>
        [Column]
        public long WorkflowActivityFormCompletionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActivityId.
        /// </summary>
        [Column]
        public long WorkflowActivityId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActivityFormSubmission] table.
    /// </summary>
    [TableName("[pm].[WorkflowActivityFormSubmission]")]
    [PrimaryKey("WorkflowActivityFormSubmissionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowActivityFormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActivityFormSubmissionId.
        /// </summary>
        [Column]
        public long WorkflowActivityFormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActivityId.
        /// </summary>
        [Column]
        public long WorkflowActivityId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowActivityRoleAssignment] table.
    /// </summary>
    [TableName("[pm].[WorkflowActivityRoleAssignment]")]
    [PrimaryKey("WorkflowActivityRoleAssignmentId")]
    [ExplicitColumns]
    public partial class WorkflowActivityRoleAssignmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActivityRoleAssignmentId.
        /// </summary>
        [Column]
        public long WorkflowActivityRoleAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActivityId.
        /// </summary>
        [Column]
        public long WorkflowActivityId { get; set; }

        /// <summary>
        /// Gets or sets the RoleAssignmentId.
        /// </summary>
        [Column]
        public int RoleAssignmentId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowAttachment] table.
    /// </summary>
    [TableName("[pm].[WorkflowAttachment]")]
    [PrimaryKey("WorkflowAttachmentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowAttachmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowAttachmentId.
        /// </summary>
        [Column]
        public long WorkflowAttachmentId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowId.
        /// </summary>
        [Column]
        public int WorkflowId { get; set; }

        /// <summary>
        /// Gets or sets the IncludeInWorkflow.
        /// </summary>
        [Column]
        public bool IncludeInWorkflow { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowComment] table.
    /// </summary>
    [TableName("[pm].[WorkflowComment]")]
    [PrimaryKey("WorkflowCommentId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowCommentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowCommentId.
        /// </summary>
        [Column]
        public long WorkflowCommentId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowFieldAccess] table.
    /// </summary>
    [TableName("[pm].[WorkflowFieldAccess]")]
    [PrimaryKey("WorkflowFieldAccessId")]
    [ExplicitColumns]
    public partial class WorkflowFieldAccessRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowFieldAccessId.
        /// </summary>
        [Column]
        public long WorkflowFieldAccessId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessFieldAccessId.
        /// </summary>
        [Column]
        public long ProcessFieldAccessId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the Editable.
        /// </summary>
        [Column]
        public bool Editable { get; set; }

        /// <summary>
        /// Gets or sets the Hidden.
        /// </summary>
        [Column]
        public bool Hidden { get; set; }

        /// <summary>
        /// Gets or sets the Required.
        /// </summary>
        [Column]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedTime.
        /// </summary>
        [Column]
        public DateTimeOffset LastModifiedTime { get; set; }

        /// <summary>
        /// Gets or sets the LastModifiedByUserId.
        /// </summary>
        [Column]
        public int LastModifiedByUserId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowFormPhase] table.
    /// </summary>
    [TableName("[pm].[WorkflowFormPhase]")]
    [PrimaryKey("WorkflowFormPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowFormPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowFormPhaseId.
        /// </summary>
        [Column]
        public long WorkflowFormPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowFormId.
        /// </summary>
        [Column]
        public int WorkflowFormId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowInitiationPhase] table.
    /// </summary>
    [TableName("[pm].[WorkflowInitiationPhase]")]
    [PrimaryKey("WorkflowInitiationPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowInitiationPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowInitiationPhaseId.
        /// </summary>
        [Column]
        public long WorkflowInitiationPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowInitiationId.
        /// </summary>
        [Column]
        public int WorkflowInitiationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowNotification] table.
    /// </summary>
    [TableName("[pm].[WorkflowNotification]")]
    [PrimaryKey("WorkflowNotificationId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowNotificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowNotificationId.
        /// </summary>
        [Column]
        public long WorkflowNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the MessageDistributionId.
        /// </summary>
        [Column]
        public int MessageDistributionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowParticipantEvent] table.
    /// </summary>
    [TableName("[pm].[WorkflowParticipantEvent]")]
    [PrimaryKey("WorkflowActivityEventId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowParticipantEventRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowActivityEventId.
        /// </summary>
        [Column]
        public long WorkflowActivityEventId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowParticipantRequestId.
        /// </summary>
        [Column]
        public long WorkflowParticipantRequestId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowParticipantRequest] table.
    /// </summary>
    [TableName("[pm].[WorkflowParticipantRequest]")]
    [PrimaryKey("WorkflowParticipantRequestId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowParticipantRequestRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowParticipantRequestId.
        /// </summary>
        [Column]
        public long WorkflowParticipantRequestId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowActivityRoleAssignmentId.
        /// </summary>
        [Column]
        public long WorkflowActivityRoleAssignmentId { get; set; }

        /// <summary>
        /// Gets or sets the PersonId.
        /// </summary>
        [Column]
        public int PersonId { get; set; }

        /// <summary>
        /// Gets or sets the StartTime.
        /// </summary>
        [Column]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowParticipantResponse] table.
    /// </summary>
    [TableName("[pm].[WorkflowParticipantResponse]")]
    [PrimaryKey("WorkflowParticipantResponseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowParticipantResponseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowParticipantResponseId.
        /// </summary>
        [Column]
        public long WorkflowParticipantResponseId { get; set; }

        /// <summary>
        /// Gets or sets the ActivityStatusId.
        /// </summary>
        [Column]
        public int ActivityStatusId { get; set; }

        /// <summary>
        /// Gets or sets the CompletionTime.
        /// </summary>
        [Column]
        public DateTimeOffset CompletionTime { get; set; }

        /// <summary>
        /// Gets or sets the ReasonCode.
        /// </summary>
        [Column]
        public int ReasonCode { get; set; }

        /// <summary>
        /// Gets or sets the Reason.
        /// </summary>
        [Column]
        public string Reason { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowPhase] table.
    /// </summary>
    [TableName("[pm].[WorkflowPhase]")]
    [PrimaryKey("WorkflowPhaseId")]
    [ExplicitColumns]
    public partial class WorkflowPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowId.
        /// </summary>
        [Column]
        public int WorkflowId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseId.
        /// </summary>
        [Column]
        public int ProcessPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the PhaseOwnerUserId.
        /// </summary>
        [Column]
        public int PhaseOwnerUserId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseStatusId.
        /// </summary>
        [Column]
        public int ProcessPhaseStatusId { get; set; }

        /// <summary>
        /// Gets or sets the StartTime.
        /// </summary>
        [Column]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// Gets or sets the EndTime.
        /// </summary>
        [Column]
        public DateTimeOffset? EndTime { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowPhaseFormCompletion] table.
    /// </summary>
    [TableName("[pm].[WorkflowPhaseFormCompletion]")]
    [PrimaryKey("WorkflowPhaseFormCompletionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowPhaseFormCompletionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowPhaseFormCompletionId.
        /// </summary>
        [Column]
        public long WorkflowPhaseFormCompletionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowPhaseFormSubmission] table.
    /// </summary>
    [TableName("[pm].[WorkflowPhaseFormSubmission]")]
    [PrimaryKey("WorkflowPhaseFormSubmissionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowPhaseFormSubmissionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowPhaseFormSubmissionId.
        /// </summary>
        [Column]
        public long WorkflowPhaseFormSubmissionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowPhaseRetraction] table.
    /// </summary>
    [TableName("[pm].[WorkflowPhaseRetraction]")]
    [PrimaryKey("WorkflowPhaseRetractionId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowPhaseRetractionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowPhaseRetractionId.
        /// </summary>
        [Column]
        public long WorkflowPhaseRetractionId { get; set; }

        /// <summary>
        /// Gets or sets the ProcessPhaseStatusId.
        /// </summary>
        [Column]
        public int ProcessPhaseStatusId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowReviewPhase] table.
    /// </summary>
    [TableName("[pm].[WorkflowReviewPhase]")]
    [PrimaryKey("WorkflowReviewPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowReviewPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowReviewPhaseId.
        /// </summary>
        [Column]
        public long WorkflowReviewPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowReviewId.
        /// </summary>
        [Column]
        public int WorkflowReviewId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowRoleAssignment] table.
    /// </summary>
    [TableName("[pm].[WorkflowRoleAssignment]")]
    [PrimaryKey("WorkflowPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowRoleAssignmentRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the RoleAssignmentId.
        /// </summary>
        [Column]
        public int RoleAssignmentId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowSignatoryNotification] table.
    /// </summary>
    [TableName("[pm].[WorkflowSignatoryNotification]")]
    [PrimaryKey("WorkflowSignatoryNotificationId")]
    [ExplicitColumns]
    public partial class WorkflowSignatoryNotificationRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowSignatoryNotificationId.
        /// </summary>
        [Column]
        public int WorkflowSignatoryNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowSignatoryId.
        /// </summary>
        [Column]
        public int WorkflowSignatoryId { get; set; }

        /// <summary>
        /// Gets or sets the EmailNotificationId.
        /// </summary>
        [Column]
        public int EmailNotificationId { get; set; }

        /// <summary>
        /// Gets or sets the AllowOverride.
        /// </summary>
        [Column]
        public bool AllowOverride { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowSignatoryPhase] table.
    /// </summary>
    [TableName("[pm].[WorkflowSignatoryPhase]")]
    [PrimaryKey("WorkflowSignatoryPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowSignatoryPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowSignatoryPhaseId.
        /// </summary>
        [Column]
        public long WorkflowSignatoryPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowSignatoryId.
        /// </summary>
        [Column]
        public int WorkflowSignatoryId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowSignatureOption] table.
    /// </summary>
    [TableName("[pm].[WorkflowSignatureOption]")]
    [PrimaryKey("WorkflowSignatureOptionId")]
    [ExplicitColumns]
    public partial class WorkflowSignatureOptionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowSignatureOptionId.
        /// </summary>
        [Column]
        public long WorkflowSignatureOptionId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the SignatureOptionId.
        /// </summary>
        [Column]
        public int SignatureOptionId { get; set; }

        /// <summary>
        /// Gets or sets the EnableSignedDocumentRecipients.
        /// </summary>
        [Column]
        public bool EnableSignedDocumentRecipients { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowSignatureTransaction] table.
    /// </summary>
    [TableName("[pm].[WorkflowSignatureTransaction]")]
    [PrimaryKey("WorkflowPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowSignatureTransactionRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowPhaseId.
        /// </summary>
        [Column]
        public long WorkflowPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the SignatureTransactionId.
        /// </summary>
        [Column]
        public int SignatureTransactionId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowSourcePhase] table.
    /// </summary>
    [TableName("[pm].[WorkflowSourcePhase]")]
    [PrimaryKey("WorkflowSourcePhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowSourcePhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowSourcePhaseId.
        /// </summary>
        [Column]
        public long WorkflowSourcePhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowSourceId.
        /// </summary>
        [Column]
        public int WorkflowSourceId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.PM
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [pm].[WorkflowTerminationPhase] table.
    /// </summary>
    [TableName("[pm].[WorkflowTerminationPhase]")]
    [PrimaryKey("WorkflowTerminationPhaseId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class WorkflowTerminationPhaseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the WorkflowTerminationPhaseId.
        /// </summary>
        [Column]
        public long WorkflowTerminationPhaseId { get; set; }

        /// <summary>
        /// Gets or sets the WorkflowTerminationId.
        /// </summary>
        [Column]
        public int WorkflowTerminationId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[FilterControls] table.
    /// </summary>
    [TableName("[search].[FilterControls]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class FilterControlRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the AppID.
        /// </summary>
        [Column]
        public int AppID { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[Queries] table.
    /// </summary>
    [TableName("[search].[Queries]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class QueryRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [Column]
        public string Description { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[QuerySteps] table.
    /// </summary>
    [TableName("[search].[QuerySteps]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class QueryStepRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the QueryID.
        /// </summary>
        [Column]
        public int QueryID { get; set; }

        /// <summary>
        /// Gets or sets the SqlClauseID.
        /// </summary>
        [Column]
        public int SqlClauseID { get; set; }

        /// <summary>
        /// Gets or sets the ExecutionOrder.
        /// </summary>
        [Column]
        public string ExecutionOrder { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SavedFilterControlValues] table.
    /// </summary>
    [TableName("[search].[SavedFilterControlValues]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class SavedFilterControlValueRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [Column]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the SavedFilterId.
        /// </summary>
        [Column]
        public int SavedFilterId { get; set; }

        /// <summary>
        /// Gets or sets the FilterControlId.
        /// </summary>
        [Column]
        public int FilterControlId { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SavedFilters] table.
    /// </summary>
    [TableName("[search].[SavedFilters]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class SavedFilterRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the DisplayOrder.
        /// </summary>
        [Column]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Gets or sets the AppID.
        /// </summary>
        [Column]
        public int AppID { get; set; }

        /// <summary>
        /// Gets or sets the OrgID.
        /// </summary>
        [Column]
        public int? OrgID { get; set; }

        /// <summary>
        /// Gets or sets the UserID.
        /// </summary>
        [Column]
        public int? UserID { get; set; }

        /// <summary>
        /// Gets or sets the Active.
        /// </summary>
        [Column]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or sets the PendingMyAction.
        /// </summary>
        [Column]
        public bool PendingMyAction { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SavedFilterSearchColumns] table.
    /// </summary>
    [TableName("[search].[SavedFilterSearchColumns]")]
    [PrimaryKey("SavedFilterId", AutoIncrement=false)]
    [ExplicitColumns]
    public partial class SavedFilterSearchColumnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the SavedFilterId.
        /// </summary>
        [Column]
        public int SavedFilterId { get; set; }

        /// <summary>
        /// Gets or sets the SearchColumnId.
        /// </summary>
        [Column]
        public int SearchColumnId { get; set; }

        /// <summary>
        /// Gets or sets the DisplayOrder.
        /// </summary>
        [Column]
        public int DisplayOrder { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SearchColumns] table.
    /// </summary>
    [TableName("[search].[SearchColumns]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class SearchColumnRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the DisplayName.
        /// </summary>
        [Column]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets the DisplayOrder.
        /// </summary>
        [Column]
        public string DisplayOrder { get; set; }

        /// <summary>
        /// Gets or sets the AppId.
        /// </summary>
        [Column]
        public int AppId { get; set; }

        /// <summary>
        /// Gets or sets the SearchTableId.
        /// </summary>
        [Column]
        public int SearchTableId { get; set; }

        /// <summary>
        /// Gets or sets the Active.
        /// </summary>
        [Column]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or sets the ColumnTypeId.
        /// </summary>
        [Column]
        public int ColumnTypeId { get; set; }

        /// <summary>
        /// Gets or sets the FormatString.
        /// </summary>
        [Column]
        public string FormatString { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SearchColumnTypes] table.
    /// </summary>
    [TableName("[search].[SearchColumnTypes]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class SearchColumnTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SearchTables] table.
    /// </summary>
    [TableName("[search].[SearchTables]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class SearchTableRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the Alias.
        /// </summary>
        [Column]
        public string Alias { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SqlClauses] table.
    /// </summary>
    [TableName("[search].[SqlClauses]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class SqlClauseRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the SqlClause.
        /// </summary>
        [Column]
        public string SqlClause { get; set; }

        /// <summary>
        /// Gets or sets the SqlClauseTypeID.
        /// </summary>
        [Column]
        public int? SqlClauseTypeID { get; set; }

        /// <summary>
        /// Gets or sets the SqlParameterID.
        /// </summary>
        [Column]
        public int? SqlParameterID { get; set; }

        /// <summary>
        /// Gets or sets the Description.
        /// </summary>
        [Column]
        public string Description { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SqlClauseTypes] table.
    /// </summary>
    [TableName("[search].[SqlClauseTypes]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class SqlClauseTypeRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

namespace SAF.Data.Providers.Tests.Search
{
    using System;

    using Startitecture.Orm.Common;
    using SAF.Data.Providers;

    /// <summary>
    /// Contains data for the [search].[SqlParameters] table.
    /// </summary>
    [TableName("[search].[SqlParameters]")]
    [PrimaryKey("ID")]
    [ExplicitColumns]
    public partial class SqlParameterRow : ITransactionContext  
    {
        /// <summary>
        /// The transaction container.
        /// </summary>
        private readonly Lazy<TransactionContainer> transactionContainer = new Lazy<TransactionContainer>(() => new TransactionContainer());

        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        [Column]
        public int ID { get; set; }

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [Column]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the DataType.
        /// </summary>
        [Column]
        public string DataType { get; set; }

        /// <summary>
        /// Gets the provider for the current transaction.
        /// </summary>
        [Ignore]
        public IRepositoryProvider TransactionProvider
        {
            get
            {
                return this.transactionContainer.Value.TransactionProvider;
            }
        }

        /// <summary>
        /// Sets the transaction provider for the current object.
        /// </summary>
        /// <param name="repositoryProvider">
        /// The repository provider to use for the transaction context.
        /// </param>
        public void SetTransactionProvider(IRepositoryProvider repositoryProvider)
        {
            this.transactionContainer.Value.SetTransactionProvider(repositoryProvider);
        }
    }
}

