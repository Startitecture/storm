namespace SAF.ProcessEngine
{
    using System;

    using SAF.Core;

    /// <summary>
    /// Contains the result of an item-related process.
    /// </summary>
    /// <typeparam name="TResult">The type of result generated by the process.</typeparam>
    public class ItemResult<TResult>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemResult&lt;TResult&gt;"/> class, with the specified result 
        /// and exception (if any) associated with the item.
        /// </summary>
        /// <param name="result">The result of an item process.</param>
        /// <param name="error">The exception, if any, associated with the item.</param>
        /// <remarks>
        /// The assumption is that any result returned without error is a success. It is the responsibility of the 
        /// caller to ensure this is the case.</remarks>
        protected ItemResult(TResult result, Exception error)
        {
            this.ItemError = error;
            this.Result = result;

            // If there is an exception, the state is Error. If there is not an exception, then an empty result 
            // is a state of Empty, and a non-empty result is a state of Success.
            this.ResultState = 
                error == null ?
                    Evaluate.IsDefaultValue(result) ? 
                        ResultState.Empty : 
                        ResultState.Success :
                    ResultState.Error;
        }

        /// <summary>
        /// Gets the result of the task.
        /// </summary>
        public TResult Result { get; private set; }

        /// <summary>
        /// Gets a value indicating the state of the result.
        /// </summary>
        public ResultState ResultState { get; private set; }

        /// <summary>
        /// Gets the exception, if any, associated with the task result.
        /// </summary>
        public Exception ItemError { get; private set; }
    }
}
