<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RemovingAllItemsFromRepository" xml:space="preserve">
    <value>Removing all {0} items from the repository.</value>
    <comment>Indicates that all items of the specified type will be removed from the repository.</comment>
  </data>
  <data name="RemovingItemsFromRepository" xml:space="preserve">
    <value>Removing any matching {0} items from the repository.</value>
    <comment>Indicates that matching items of the specified type are being removed from the repository.</comment>
  </data>
  <data name="RemovingFirstItemFromRepository" xml:space="preserve">
    <value>Removing the first matching {0} in the repository.</value>
    <comment>Indicates that the first matched item of the specified type will be removed from the repository.</comment>
  </data>
  <data name="SavingItemInRepository" xml:space="preserve">
    <value>Saving a {0} to the repository.</value>
    <comment>Indicates that the item of the specifed type is being saved in the repository.</comment>
  </data>
  <data name="SelectAllItemsFromRepository" xml:space="preserve">
    <value>Selecting all {0} items in the repository.</value>
    <comment>Indicates that all items of the specified type are being retrieved from the repository.</comment>
  </data>
  <data name="SelectMatchingItemsInRepository" xml:space="preserve">
    <value>Selecting any matching {0} items in the repository</value>
    <comment>Indicates that all matching items of the specified type are being retrieved from the repository.</comment>
  </data>
  <data name="SelectFirstMatchingItemFromRepository" xml:space="preserve">
    <value>Selecting the first matching {0} in the repository.</value>
    <comment>Indicates that the first matching item of the specified type is being retrieved from the repository.</comment>
  </data>
  <data name="UpdateAllItemsInRepository" xml:space="preserve">
    <value>Updating all {0} items in the repository.</value>
    <comment>Indicates that all items of the specified type in the repository are being updated.</comment>
  </data>
  <data name="UpdateMatchingItemsInRepository" xml:space="preserve">
    <value>Updating any matching {0} items in the repository</value>
    <comment>Indicates that all matching items of the specified type are being updated in the respoitory.</comment>
  </data>
  <data name="RoutingMessageToQueue" xml:space="preserve">
    <value>Routing {0} to queue '{1}'.</value>
    <comment>Indicates that a request is being routed to the specified queue.</comment>
  </data>
  <data name="DenyQueueCreation" xml:space="preserve">
    <value>DenyQueueCreation</value>
    <comment>Denies the creation of a queue based on queuing policy.</comment>
  </data>
  <data name="AllowQueueCreation" xml:space="preserve">
    <value>AllowQueueCreation</value>
    <comment>Allows queue creation based on a queuing policy.</comment>
  </data>
  <data name="AllowQueueForMinCount" xml:space="preserve">
    <value>Adding {0} queue {1} for min count {2}.</value>
    <comment>Occurs when queue creation is allowed because the pool count is less than the minimum queue count.</comment>
  </data>
  <data name="DenyQueueCreationForResourcesCpu" xml:space="preserve">
    <value>Denying {0} queue creation {1} for resources (CPU {2:F2}%).</value>
    <comment>Occurs when queue creation is denied because of CPU resources.</comment>
  </data>
  <data name="DenyQueueCreationForResourcesFailureRate" xml:space="preserve">
    <value>Denying {0} queue creation {1} for resources (Failure Rate {2:F2}%).</value>
    <comment>Occurs when queue creation is denied because of the pool's failure rate.</comment>
  </data>
  <data name="AllowQueueCreationForResponseLatency" xml:space="preserve">
    <value>Adding {0} queue {1} for response latency ({2} vs. {3}).</value>
    <comment>Occurs when a new queue is allowed based on response latency.</comment>
  </data>
  <data name="DenyQueueCreationForResponseLatency" xml:space="preserve">
    <value>Denying {0} queue {1} for response latency ({2} vs. {3}).</value>
    <comment>Occurs when queue creation is denied because the response latency is able to keep up with the request latency.</comment>
  </data>
  <data name="AllowQueueCreationForEmptyPool" xml:space="preserve">
    <value>Adding {0} queue because no queues were available.</value>
    <comment>Occurs when queue creation is allowed because the pool is empty.</comment>
  </data>
  <data name="AllowQueueCreationForMaxCount" xml:space="preserve">
    <value>Adding {0} queue for pool count {1} &lt; max count {2}.</value>
    <comment>Occurs when queue creation is allowed because the pool count is less than the max count.</comment>
  </data>
  <data name="DenyQueueCreationForMaxCount" xml:space="preserve">
    <value>Denying {0} queue creation for pool count {1} &gt;= max count {2}</value>
    <comment>Occurs when queue creation is denied because the current pool count equals or exceeds the max queue count.</comment>
  </data>
  <data name="IdleQueueReusedAction" xml:space="preserve">
    <value>Use existing idle queue {0}</value>
    <comment>Indicates that an existing idle queue was reused.</comment>
  </data>
  <data name="ActiveQueueReuseDescription" xml:space="preserve">
    <value>Use existing active queue {0}</value>
    <comment>Indicates that an active queue was reused.</comment>
  </data>
  <data name="ActiveQueueReuse" xml:space="preserve">
    <value>Reuse Active Queue</value>
    <comment>The action for reusing an active queue.</comment>
  </data>
  <data name="NewQueueUseDescription" xml:space="preserve">
    <value>Use new queue {0}</value>
    <comment>Indicates that a new queue is being used.</comment>
  </data>
  <data name="NewQueueUse" xml:space="preserve">
    <value>Create New Queue</value>
    <comment>The action for using a new queue.</comment>
  </data>
  <data name="PolicyAllowsRequest" xml:space="preserve">
    <value>Allowed</value>
    <comment>Indicates that the policy decision is allowed.</comment>
  </data>
  <data name="PolicyDeniesRequest" xml:space="preserve">
    <value>Denied</value>
    <comment>Indicates that the policy denied the request.</comment>
  </data>
  <data name="IdleQueueReused" xml:space="preserve">
    <value>Reuse Idle Queue</value>
    <comment>The action for reusing an idle queue.</comment>
  </data>
</root>