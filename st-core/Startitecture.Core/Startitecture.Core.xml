<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Startitecture.Core</name>
    </assembly>
    <members>
        <member name="T:Startitecture.Core.BusinessException">
            <summary>
            Represents an error that is the direct result of invalid commands or values provided by the user.
            </summary>
        </member>
        <member name="F:Startitecture.Core.BusinessException.EntityErrorKeyFormat">
            <summary>
            The entity error key format.
            </summary>
        </member>
        <member name="F:Startitecture.Core.BusinessException.NoErrorsMessage">
            <summary>
            The no errors message.
            </summary>
        </member>
        <member name="F:Startitecture.Core.BusinessException.TargetEntityKey">
            <summary>
            The target entity key.
            </summary>
        </member>
        <member name="F:Startitecture.Core.BusinessException.entityErrors">
            <summary>
            A collection of error messages associated with the entity.
            </summary>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException" /> class.
            </summary>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class with a message describing
            the exception.
            </summary>
            <param name="message">
            The message describing the exception.
            </param>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class with a message describing
            the exception and the underlying exception that caused the <see cref="T:Startitecture.Core.BusinessException"/>.
            </summary>
            <param name="message">
            The message describing the exception.
            </param>
            <param name="innerException">
            The underlying exception that caused the BusinessException.
            </param>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class with the business object
            associated with the exception and a message describing the exception.
            </summary>
            <param name="targetEntity">
            The business object associated with the exception.
            </param>
            <param name="message">
            The message describing the exception.
            </param>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class with the business object
            associated with the exception and a message describing the exception.
            </summary>
            <param name="targetEntity">
            The business object associated with the exception.
            </param>
            <param name="entityErrors">
            A list of errors associated with the exception.
            </param>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.Object,System.Collections.ObjectModel.Collection{System.String},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class with the business object
            associated with the exception and a message describing the exception.
            </summary>
            <param name="targetEntity">
            The business object associated with the exception.
            </param>
            <param name="entityErrors">
            A list of errors associated with the exception.
            </param>
            <param name="innerException">
            The underlying exception that caused the BusinessException.
            </param>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class with the business object
            associated with the exception, a message describing the exception and the underlying exception that caused
            the <see cref="T:Startitecture.Core.BusinessException"/>.
            </summary>
            <param name="targetEntity">
            The business object associated with the exception.
            </param>
            <param name="message">
            The message describing the exception.
            </param>
            <param name="innerException">
            The underlying exception that caused the BusinessException.
            </param>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.Object,System.String,System.Exception,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class with the business object
            associated with the exception, a message describing the exception and the underlying exception that caused
            the <see cref="T:Startitecture.Core.BusinessException"/>.
            </summary>
            <param name="targetEntity">
            The business object associated with the exception.
            </param>
            <param name="message">
            The message describing the exception.
            </param>
            <param name="innerException">
            The underlying exception that caused the BusinessException.
            </param>
            <param name="entityErrors">
            A collection of errors associated with the exception.
            </param>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.Object,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class with the business object
            associated with the exception and a message describing the exception.
            </summary>
            <param name="targetEntity">
            The business object associated with the exception.
            </param>
            <param name="message">
            The message describing the exception.
            </param>
            <param name="entityErrors">
            A list of errors associated with the exception.
            </param>
        </member>
        <member name="M:Startitecture.Core.BusinessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.BusinessException"/> class.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The info parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or
            System.Exception.HResult is zero (0).
            </exception>
        </member>
        <member name="P:Startitecture.Core.BusinessException.EntityErrors">
            <summary>
            Gets a collection of errors related to the business entity.
            </summary>
        </member>
        <member name="P:Startitecture.Core.BusinessException.TargetEntity">
            <summary>
            Gets the business object associated with the exception.
            </summary>
        </member>
        <member name="M:Startitecture.Core.BusinessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds directive information to the exception.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized object
            data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual
            information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The info parameter is null.
            </exception>
        </member>
        <member name="M:Startitecture.Core.BusinessException.CreateMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a message based on the target item and entity errors.
            </summary>
            <param name="entityErrors">
            The entity errors.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Startitecture.Core.CacheResult`1">
            <summary>
            Contains the result of a cache query.
            </summary>
            <typeparam name="TItem">
            The type of item being selected by the query.
            </typeparam>
        </member>
        <member name="M:Startitecture.Core.CacheResult`1.#ctor(`0,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.CacheResult`1"/> class.
            </summary>
            <param name="item">
            The item retrieved from the cache, if any.
            </param>
            <param name="hit">
            A value indicating whether the item was retrieved from the cache.
            </param>
            <param name="key">
            The key used to retrieve the item from the cache.
            </param>
        </member>
        <member name="P:Startitecture.Core.CacheResult`1.Hit">
            <summary>
            Gets a value indicating whether hit.
            </summary>
        </member>
        <member name="P:Startitecture.Core.CacheResult`1.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="P:Startitecture.Core.CacheResult`1.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="T:Startitecture.Core.DomainException">
            <summary>
            Provides a base exception for all explicitly-thrown framework exceptions. 
            </summary>
        </member>
        <member name="M:Startitecture.Core.DomainException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.DomainException"/> class. 
            </summary>
        </member>
        <member name="M:Startitecture.Core.DomainException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.DomainException"/> class with a message describing the exception.
            </summary>
            <param name="message">
            The message describing the exception.
            </param>
        </member>
        <member name="M:Startitecture.Core.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.DomainException"/> class with a message describing the exception and the 
            underlying exception.
            </summary>
            <param name="message">
            The message describing the exception.
            </param>
            <param name="innerException">
            The underlying exception that caused the exception.
            </param>
        </member>
        <member name="M:Startitecture.Core.DomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.DomainException"/> class. 
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The info parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or 
            System.Exception.HResult is zero (0).
            </exception>
        </member>
        <member name="P:Startitecture.Core.DomainException.CorrelationId">
            <summary>
            Gets or sets the correlation ID for the exception.
            </summary>
        </member>
        <member name="M:Startitecture.Core.DomainException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with 
            information about the exception.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the 
            exception being thrown. 
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or
            destination. </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Startitecture.Core.DoNotLogAttribute">
            <summary>
            An attribute class to indicate that a specified property should not be logged into a persistent store.
            </summary>
        </member>
        <member name="T:Startitecture.Core.Evaluate">
            <summary>
            Static methods for evaluating values.
            </summary>
        </member>
        <member name="M:Startitecture.Core.Evaluate.IsNull``1(``0)">
            <summary>
            Determines whether the specified value is null.
            </summary>
            <param name="value">
            The value to check.
            </param>
            <typeparam name="T">
            The type of value to check.
            </typeparam>
            <returns>
            <c>true</c> if the value is null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.IsSet``1(``0)">
            <summary>
            Determines whether the specified value is set (not equal to null).
            </summary>
            <param name="value">
            The value to check.
            </param>
            <typeparam name="T">
            The type of value to check.
            </typeparam>
            <returns>
            <c>true</c> if the value is not null; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.IsDefaultValue``1(``0)">
            <summary>
            Checks whether a value is in its default state.
            </summary>
            <typeparam name="T">
            The type of value to check.
            </typeparam>
            <param name="value">
            The value to check.
            </param>
            <returns>
            True if the value is in its default state, otherwise false.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.RecursiveEquals(System.Object,System.Object)">
            <summary>
            Tests the equality of two items, using recursion if non-string enumerable properties are encountered.
            </summary>
            <param name="itemA">
            The base item.
            </param>
            <param name="itemB">
            The comparison item.
            </param>
            <returns>
            <c>true</c> if the items are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.Equals``1(``0,System.Object)">
            <summary>
            Tests the equality of two values.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="valueA">
            The base value.
            </param>
            <param name="valueB">
            The comparison value.
            </param>
            <returns>
            <c>true</c> if the values are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.Equals``1(``0,``0,System.Func{``0,System.Object}[])">
            <summary>
            Tests the equality of two values.
            </summary>
            <typeparam name="T">
            The type of values to compare.
            </typeparam>
            <param name="itemA">
            The base item.
            </param>
            <param name="itemB">
            The comparison item.
            </param>
            <param name="selectors">
            The value selectors. If none are specified, the default equality comparer is used.
            </param>
            <returns>
            <c>true</c> if the specified properties of the values are equal; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method uses <see cref="T:System.Collections.Generic.EqualityComparer`1"/> when no selectors have been specified. 
            Calling this method from within an implementation of <see cref="T:System.IEquatable`1"/> on an object of the same type 
            without specifying selectors will result in a recursive loop as <see cref="T:System.Collections.Generic.EqualityComparer`1"/> 
            calls <see cref="M:System.IEquatable`1.Equals(`0)"/>. The same issue applies if the calling type is not 
            <see cref="M:System.IEquatable`1.Equals(`0)"/>.
            </remarks>
        </member>
        <member name="M:Startitecture.Core.Evaluate.Compare``1(``0,System.Object)">
            <summary>
            Determines whether two values, one of a specified type and one of an unknown type, are the same type.
            </summary>
            <typeparam name="T">
            The type of object to compare.
            </typeparam>
            <param name="valueA">
            The first object to compare.
            </param>
            <param name="valueB">
            The second object to compare.
            </param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="valueA"/> and <paramref name="valueB"/>, as shown in the 
            following table.
            <para>
            Value Meaning 
            </para>
            <para>
            Less than zero <paramref name="valueA"/> is less than <paramref name="valueB"/>.
            </para>
            <para>
            Zero <paramref name="valueA"/> equals <paramref name="valueB"/>.
            </para>
            <para>
            Greater than zero <paramref name="valueA"/> is greater than <paramref name="valueB"/>.
            </para>
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.Compare``1(``0,``0,System.Func{``0,System.Object}[])">
            <summary>
            Performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, 
            equal to, or greater than the other.
            </summary>
            <typeparam name="T">
            The type of object to compare.
            </typeparam>
            <param name="valueA">
            The first object to compare.
            </param>
            <param name="valueB">
            The second object to compare.
            </param>
            <param name="selectors">
            The property selectors for the specified object.
            </param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="valueA"/> and <paramref name="valueB"/>, as shown in the 
            following table.
            <para>
            Value Meaning 
            </para>
            <para>
            Less than zero <paramref name="valueA"/> is less than <paramref name="valueB"/>.
            </para>
            <para>
            Zero <paramref name="valueA"/> equals <paramref name="valueB"/>.
            </para>
            <para>
            Greater than zero <paramref name="valueA"/> is greater than <paramref name="valueB"/>.
            </para>
            </returns>
            <remarks>
            This method uses <see cref="T:System.Collections.Generic.Comparer`1"/> when no selectors have been specified. Calling this
            method from within an implementation of <see cref="T:System.IComparable`1"/> on an object of the same type without 
            specifying selectors will result in a recursive loop as <see cref="T:System.Collections.Generic.Comparer`1"/> calls 
            <see cref="M:System.IComparable`1.CompareTo(`0)"/>.
            </remarks>
        </member>
        <member name="M:Startitecture.Core.Evaluate.GetHashCode``1(``0)">
            <summary>
            Gets the hash code of the specified generic value, returning 0 for null values.
            </summary>
            <typeparam name="T">
            The type of object to retrieve the hash code for.
            </typeparam>
            <param name="value">
            The object to retrieve the hash code for.
            </param>
            <returns>
            The hash code of the object, or 0 if the object is null.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.GenerateHashCode(System.Object[])">
            <summary>
            Gets the hash code for the specified values.
            </summary>
            <param name="values">
            The values to retrieve a hash code for.
            </param>
            <returns>
            An integer hash code based on the specified values.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.GenerateHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the hash code for the specified collection. 
            </summary>
            <typeparam name="T">
            The type of value contained in the collection.
            </typeparam>
            <param name="values">
            The values to retrieve a hash code for.
            </param>
            <returns>
            A hash code based on ORing all the hash codes for the specified values.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.GenerateHashCode``1(``0,System.Collections.Generic.IEnumerable{System.Func{``0,System.Object}})">
            <summary>
            Gets the hash code for the specified values.
            </summary>
            <param name="item">
            The item to retrieve a hash code for.
            </param>
            <param name="selectors">
            The selectors used to retrieve values from the item.
            </param>
            <typeparam name="T">
            The type of item to generate a hash code for.
            </typeparam>
            <returns>
            An integer hash code based on the values selected for the item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="selectors"/> is null.
            </exception>
        </member>
        <member name="M:Startitecture.Core.Evaluate.AreEqual``1(``0,``0,System.Collections.Generic.IEnumerable{System.Func{``0,System.Object}})">
            <summary>
            Determine whether the list of selectors return equal values for <paramref name="itemA"/> and <paramref name="itemB"/>. If the
            selection returns an <see cref="T:System.Collections.IEnumerable"/>, the enumerable is iterated item by item in order.
            </summary>
            <param name="itemA">
            The first item.
            </param>
            <param name="itemB">
            The second item.
            </param>
            <param name="selectors">
            The selectors to evaluate.
            </param>
            <typeparam name="T">
            The type of item being evaluated.
            </typeparam>
            <returns>
            <c>true</c> if all the values in the item are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.Evaluate.AggregateHash``1(System.Int32,``0)">
            <summary>
            Aggregates a hash code.
            </summary>
            <typeparam name="T">
            The type of item to hash.
            </typeparam>
            <param name="current">
            The current hash code.
            </param>
            <param name="value">
            The value to hash.
            </param>
            <returns>
            The resulting hash code as an <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:Startitecture.Core.ExtensionMethods">
            <summary>
            Contains methods that extend existing classes.
            </summary>
        </member>
        <member name="F:Startitecture.Core.ExtensionMethods.ItemKey">
            <summary>
            The item key.
            </summary>
        </member>
        <member name="F:Startitecture.Core.ExtensionMethods.QualifiedPropertyNameFormat">
            <summary>
            The qualified property name format.
            </summary>
        </member>
        <member name="F:Startitecture.Core.ExtensionMethods.FriendlyGenericTypeFormat">
            <summary>
            The friendly generic type format string.
            </summary>
        </member>
        <member name="F:Startitecture.Core.ExtensionMethods.TypeNameSelector">
            <summary>
            The type name selector.
            </summary>
        </member>
        <member name="F:Startitecture.Core.ExtensionMethods.PropertyNameSelector">
            <summary>
            The property name selector.
            </summary>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetPropertyValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets a property value for the specified entity. Indexed properties are not supported.
            </summary>
            <param name="propertyInfo">
            The property info of the target property.
            </param>
            <param name="entity">
            The entity to retrieve the value from.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyInfo"/> or <paramref name="entity"/> is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="propertyInfo"/> is an indexed property.
            </exception>
            <returns>
            The value stored in the property of the specified entity. If the property is indexed, the first value is returned.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.PopulateDictionary(System.Collections.IDictionary,System.Object)">
            <summary>
            Populates the current dictionary with the properties of the item. The property values are converted to strings if they do 
            not implement the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface.
            </summary>
            <param name="dictionary">
            The current dictionary.
            </param>
            <param name="item">
            The item with the properties to insert into the dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is null.
            </exception>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetProperty(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the property name from a selector.
            </summary>
            <param name="selector">
            An expression that selects a property.
            </param>
            <returns>
            The property name as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            The expression cannot be evaluated for a member name, or the member is not a property.
            </exception>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.ToRuntimeName(System.Type)">
            <summary>
            Converts a type to its runtime name, including generic arguments.
            </summary>
            <param name="type">
            The type to convert.
            </param>
            <returns>
            The runtime name, including generic arguments, as a <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetMember(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the member of the lambda expression.
            </summary>
            <param name="expression">
            The expression to evaluate.
            </param>
            <returns>
            The <see cref="T:System.Linq.Expressions.MemberExpression"/> in the body of the expression.
            </returns>
            <exception cref="T:Startitecture.Core.OperationException">
            The expression cannot be evaluated as a property.
            </exception>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the property name from a selector.
            </summary>
            <param name="selector">
            An expression that selects a property.
            </param>
            <returns>
            The property name as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            The expression cannot be evaluated for a member name.
            </exception>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetPropertyValue``1(``0,System.String)">
            <summary>
            The get property value.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="propertyName">
            The property name.
            </param>
            <typeparam name="T">
            The type of entity to get the property value for.
            </typeparam>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="propertyName"/> or <paramref name="entity"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="propertyName"/> specifies a property that does not exist in <typeparamref name="T"/>.
            </exception>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetOrLazyAddExisting``2(System.Runtime.Caching.ObjectCache,System.Object,System.String,``0,System.Func{``0,``1},System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Gets a value from the cache or lazily adds an existing value.
            </summary>
            <param name="cache">
            The cache to retrieve or store the value in.
            </param>
            <param name="synchronizationLock">
            The synchronization lock for the cache.
            </param>
            <param name="cacheKey">
            The cache key.
            </param>
            <param name="retrievalKey">
            The retrieval key.
            </param>
            <param name="getValue">
            A function that retrieves the value from the real store.
            </param>
            <param name="policy">
            The policy to apply.
            </param>
            <typeparam name="TKey">
            The type of key that retrieves the value.
            </typeparam>
            <typeparam name="TValue">
            The type of value stored in the cache.
            </typeparam>
            <returns>
            A <typeparamref name="TValue"/> instance, either from the cache or from the retrieval function <paramref name="getValue"/>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetOrLazyAddExistingWithResult``2(System.Runtime.Caching.ObjectCache,System.Object,System.String,``0,System.Func{``0,``1},System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Gets a value from the cache or lazily adds an existing value.
            </summary>
            <param name="cache">
            The cache to retrieve or store the value in.
            </param>
            <param name="synchronizationLock">
            The synchronization lock for the cache.
            </param>
            <param name="cacheKey">
            The cache key.
            </param>
            <param name="retrievalKey">
            The retrieval key.
            </param>
            <param name="getValue">
            A function that retrieves the value from the real store.
            </param>
            <param name="policy">
            The policy to apply.
            </param>
            <typeparam name="TKey">
            The type of key that retrieves the value.
            </typeparam>
            <typeparam name="TValue">
            The type of value stored in the cache.
            </typeparam>
            <returns>
            A <typeparamref name="TValue"/> instance, either from the cache or from the retrieval function <paramref name="getValue"/>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.ApplySetting``2(System.Collections.Specialized.NameValueCollection,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Func{System.String,``1})">
            <summary>
            Determines if the value at the specified index within the current <see cref="T:System.Collections.Specialized.NameValueCollection"/> is equivalent to the 
            <see cref="T:System.Boolean"/> value <c>true</c>.
            </summary>
            <typeparam name="TItem">
            The type of item to apply the value to.
            </typeparam>
            <typeparam name="TValue">
            The type of value to be applied.
            </typeparam>
            <param name="collection">
            The collection containing the value.
            </param>
            <param name="target">
            The target to apply the setting to.
            </param>
            <param name="propertyExpression">
            The property expression of the source value.
            </param>
            <param name="defaultValue">
            The default value if the configured value is not set.
            </param>
            <param name="parser">
            A parser that will convert the string value into the typed value.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="propertyExpression"/> cannot be evaluated as a property.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/>, <paramref name="target"/> or <paramref name="propertyExpression"/> is null.
            </exception>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.ThrowOnDependencyFailure``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Checks that the specified entity dependency is valid and throws a <see cref="T:Startitecture.Core.OperationException"/>
            if the check fails.
            </summary>
            <typeparam name="TItem">
            The type of entity with the dependency.
            </typeparam>
            <typeparam name="TDependency">
            The type of dependency to check.
            </typeparam>
            <param name="entity">
            The entity with the dependency.
            </param>
            <param name="selector">
            The selector of the property to verify.
            </param>
            <remarks>
            Dependency checks are intended to ensure that the entity's dependencies exist.
            </remarks>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetDifferences``1(``0,``0,System.String[])">
            <summary>
            Gets the property differences between two objects of the same type.
            </summary>
            <param name="baseline">
            The baseline object.
            </param>
            <param name="comparison">
            The comparison object.
            </param>
            <param name="propertiesToCompare">
            The properties to compare.
            </param>
            <typeparam name="TItem">
            The type of item to compare.
            </typeparam>
            <returns>
            A collection of <see cref="T:Startitecture.Core.PropertyComparisonResult"/> items containing the non-equivalent property values of the two 
            items.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.TryParse``1(System.String,``0,System.Func{System.String,``0})">
            <summary>
            Attempts to parse a value from the specified string value.
            </summary>
            <param name="value">
            The string value to parse.
            </param>
            <param name="defaultValue">
            The default value if the parse fails.
            </param>
            <param name="parser">
            The string parser.
            </param>
            <typeparam name="TValue">
            The type of the expected value.
            </typeparam>
            <returns>
            A <typeparamref name="TValue"/> value parsed from <paramref name="value"/>, or <paramref name="defaultValue"/> if the
            <paramref name="parser"/> is unable to parse the string.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetAllProperties``1(System.String[])">
            <summary>
            Gets all of the properties for the array of string properties to compare.
            </summary>
            <param name="propertiesToCompare">
            The properties to compare.
            </param>
            <typeparam name="TItem">
            The type of item to evaluate.
            </typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Reflection.PropertyInfo"/> items matching the <paramref name="propertiesToCompare"/>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.ToPropertyDictionary(System.Object,System.String[])">
            <summary>
            Returns the property names and values of the current item.
            </summary>
            <param name="item">
            The item to evaluate.
            </param>
            <param name="propertiesToInclude">
            The properties to include. If no properties are specified, all valid properties are included.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.Dictionary`2"/> of the item's properties.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.ToSerializableDictionary(System.Object,System.String[])">
            <summary>
            Gets property names and values for the specified item, replacing any non-serializable items with their string 
            representations.
            </summary>
            <param name="item">
            The item to retrieve the properties of.
            </param>
            <param name="propertiesToInclude">
            The properties to include.
            </param>
            <returns>
            A dictionary of name value pairs joined as <see cref="T:System.String"/>, ordered by the property name.
            </returns>
        </member>
        <member name="M:Startitecture.Core.ExtensionMethods.GetSerializableValue(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Gets the serializable value of the value in the key value pair.
            </summary>
            <param name="pair">
            The pair to evaluate.
            </param>
            <returns>
            The serializable value of the key value pair as an <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Startitecture.Core.MemoryCache`2">
            <summary>
            A cache implementation for data providers.
            </summary>
            <typeparam name="TKey">
            The type of key stored in the cache.
            </typeparam>
            <typeparam name="TValue">
            The type of value stored in the cache.
            </typeparam>
        </member>
        <member name="F:Startitecture.Core.MemoryCache`2.cacheLock">
            <summary>
            The cache lock.
            </summary>
        </member>
        <member name="F:Startitecture.Core.MemoryCache`2.cacheMap">
            <summary>
            The cache map.
            </summary>
        </member>
        <member name="P:Startitecture.Core.MemoryCache`2.Count">
            <summary>
            Gets the count.
            </summary>
        </member>
        <member name="M:Startitecture.Core.MemoryCache`2.Flush">
            <summary>
            The flush.
            </summary>
        </member>
        <member name="M:Startitecture.Core.MemoryCache`2.Get(`0,System.Func{`1})">
            <summary>
            Gets the item from the cache.
            </summary>
            <param name="key">
            The cache key.
            </param>
            <param name="factory">
            The factory that creates the value.
            </param>
            <returns>
            The value created by the factory.
            </returns>
        </member>
        <member name="M:Startitecture.Core.MemoryCache`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Startitecture.Core.NativeMethods">
            <summary>
            The native methods.
            </summary>
        </member>
        <member name="T:Startitecture.Core.OperationException">
            <summary>
            Represents an error that is the direct result of an operation failure.
            </summary>
        </member>
        <member name="M:Startitecture.Core.OperationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.OperationException"/> class.
            </summary>
        </member>
        <member name="M:Startitecture.Core.OperationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.OperationException"/> class with a message describing 
            the exception.
            </summary>
            <param name="message">The message describing the exception.</param>
        </member>
        <member name="M:Startitecture.Core.OperationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.OperationException"/> class with a message describing 
            the exception and the underlying exception that caused the <see cref="T:Startitecture.Core.OperationException"/>.
            </summary>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The underlying exception that caused the SystemException.</param>
        </member>
        <member name="M:Startitecture.Core.OperationException.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.OperationException"/> class with the business object 
            associated with the exception.
            </summary>
            <param name="targetEntity">The business object associated with the exception.</param>
        </member>
        <member name="M:Startitecture.Core.OperationException.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.OperationException"/> class with the business object 
            associated with the exception and a message describing the exception.
            </summary>
            <param name="targetEntity">
            The business object associated with the exception.
            </param>
            <param name="message">
            The message describing the exception.
            </param>
        </member>
        <member name="M:Startitecture.Core.OperationException.#ctor(System.Object,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.OperationException"/> class with the business object 
            associated with the exception, a message describing the exception and the underlying exception that caused 
            the <see cref="T:Startitecture.Core.OperationException"/>.
            </summary>
            <param name="targetEntity">The business object associated with the exception.</param>
            <param name="message">The message describing the exception.</param>
            <param name="innerException">The underlying exception that caused the BusinessException.</param>
        </member>
        <member name="M:Startitecture.Core.OperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.OperationException"/> class.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object 
            data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual 
            information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or 
            System.Exception.HResult is zero (0).</exception>
        </member>
        <member name="P:Startitecture.Core.OperationException.TargetEntity">
            <summary>
            Gets the business object associated with the exception.
            </summary>
        </member>
        <member name="M:Startitecture.Core.OperationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Adds directive information to the exception.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo that holds the serialized object 
            data about the exception being thrown.</param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual 
            information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is null.</exception>
        </member>
        <member name="T:Startitecture.Core.PropertyComparisonResult">
            <summary>
            Contains the result of a property comparison.
            </summary>
        </member>
        <member name="F:Startitecture.Core.PropertyComparisonResult.ToStringFormat">
            <summary>
            The to string format.
            </summary>
        </member>
        <member name="M:Startitecture.Core.PropertyComparisonResult.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.PropertyComparisonResult"/> struct.
            </summary>
            <param name="propertyName">
            The property name.
            </param>
            <param name="originalValue">
            The original value.
            </param>
            <param name="newValue">
            The new value.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="propertyName"/> is null or whitespace.
            </exception>
        </member>
        <member name="P:Startitecture.Core.PropertyComparisonResult.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Startitecture.Core.PropertyComparisonResult.OriginalValue">
            <summary>
            Gets the original value.
            </summary>
        </member>
        <member name="P:Startitecture.Core.PropertyComparisonResult.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
        <member name="M:Startitecture.Core.PropertyComparisonResult.op_Equality(Startitecture.Core.PropertyComparisonResult,Startitecture.Core.PropertyComparisonResult)">
            <summary>
            Indicates whether two objects of the same type are equal.
            </summary>
            <param name="left">
            The first object.
            </param>
            <param name="right">
            The second object.
            </param>
            <returns>
            <c>true</c> if the objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.PropertyComparisonResult.op_Inequality(Startitecture.Core.PropertyComparisonResult,Startitecture.Core.PropertyComparisonResult)">
            <summary>
            Indicates whether two objects of the same type are not equal.
            </summary>
            <param name="left">
            The first object.
            </param>
            <param name="right">
            The second object.
            </param>
            <returns>
            <c>true</c> if the objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.PropertyComparisonResult.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Startitecture.Core.PropertyComparisonResult.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Startitecture.Core.PropertyComparisonResult.Equals(Startitecture.Core.PropertyComparisonResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Startitecture.Core.PropertyComparisonResult.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Startitecture.Core.Singleton`1">
            <summary>
            Provides access to a singleton of a specified type.
            </summary>
            <typeparam name="T">
            The type of item stored as a singleton.
            </typeparam>
        </member>
        <member name="F:Startitecture.Core.Singleton`1.DefaultInstance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="P:Startitecture.Core.Singleton`1.Instance">
            <summary>
            Gets the singleton instance for the current type.
            </summary>
        </member>
        <member name="T:Startitecture.Core.TreeNode`1">
            <summary>
            The tree node.
            </summary>
            <typeparam name="T">
            The type of item in the node.
            </typeparam>
        </member>
        <member name="F:Startitecture.Core.TreeNode`1.children">
            <summary>
            The children.
            </summary>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Startitecture.Core.TreeNode`1"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:Startitecture.Core.TreeNode`1.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:Startitecture.Core.TreeNode`1.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:Startitecture.Core.TreeNode`1.Value">
            <summary>
            Gets the value of the node.
            </summary>
        </member>
        <member name="P:Startitecture.Core.TreeNode`1.Item(System.Int32)">
            <summary>
            Retrieves the node at the specified index.
            </summary>
            <param name="index">
            The index to retrieve a node from.
            </param>
            <returns>
            The <see cref="T:Startitecture.Core.TreeNode`1"/> at the specified index.
            </returns>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.AddChild(`0)">
            <summary>
            Adds a child to the current node.
            </summary>
            <param name="value">
            The value to set at the node.
            </param>
            <returns>
            The newly added <see cref="T:Startitecture.Core.TreeNode`1"/>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.AddChildren(`0[])">
            <summary>
            Adds children to the current node.
            </summary>
            <param name="values">
            The values to add.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Startitecture.Core.TreeNode`1"/> items added to the current node.
            </returns>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.Flatten">
            <summary>
            Flattens the tree node and its children into an enumerable.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of the node and its children.
            </returns>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.RemoveChild(Startitecture.Core.TreeNode{`0})">
            <summary>
            Removes the specified child node from the current node.
            </summary>
            <param name="node">
            The node to remove.
            </param>
            <returns>
            <c>true</c> if the node is removed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.Traverse(System.Action{`0})">
            <summary>
            Traverses the tree to perform an action on the values.
            </summary>
            <param name="action">
            The action to perform.
            </param>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.FirstOrDefault(System.Predicate{`0})">
            <summary>
            Finds the first tree node with the value matching the predicate.
            </summary>
            <param name="predicate">
            The predicate to find.
            </param>
            <returns>
            The first <see cref="T:Startitecture.Core.TreeNode`1"/> matching the predicate, or null if no match is found.
            </returns>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.FirstCommonAncestor(System.Collections.Generic.IEnumerable{Startitecture.Core.TreeNode{`0}})">
            <summary>
            Finds the first common ancestor of the selected endpoint nodes.
            </summary>
            <param name="endpoints">
            The endpoints to find the common ancestor of.
            </param>
            <returns>
            The lowest level <see cref="T:Startitecture.Core.TreeNode`1"/> in which all of the <paramref name="endpoints"/> share a path.
            </returns>
        </member>
        <member name="M:Startitecture.Core.TreeNode`1.ToString">
            <inheritdoc />
        </member>
    </members>
</doc>
