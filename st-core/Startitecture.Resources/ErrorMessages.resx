<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComparisonValuesMustBeSameType" xml:space="preserve">
    <value>The second value must be the same type as the first value.</value>
    <comment>Indicates that the second value must be the same type as the first value.</comment>
  </data>
  <data name="ItemCouldNotBeAddedToCollection" xml:space="preserve">
    <value>The item could not be added to the collection.</value>
    <comment>Indicates that an item could not be added to the collection.</comment>
  </data>
  <data name="HttpWebRequestNotReturned" xml:space="preserve">
    <value>The token request returned was null or not an HttpWebRequest.</value>
    <comment>Indicates that the expected return value was not an HttpWebRequest.</comment>
  </data>
  <data name="DataItemInsertionFailed" xml:space="preserve">
    <value>The insertion of {0} '{1}' failed.</value>
    <comment>Indicates that insertion of the specified data item failed.</comment>
  </data>
  <data name="ConnectionFactoryReturnedNullConnection" xml:space="preserve">
    <value>The connection factory '{0}' returned a null connection.</value>
    <comment>Indicates that the connection factory returned a null connection.</comment>
  </data>
  <data name="OracleQueryMustAliasForPagedQuery" xml:space="preserve">
    <value>Query must alias '*' when performing a paged query (e.g., 'select t.* from table t order by t.id').</value>
    <comment>Indicates that the specified query must alias the table when performing a paged query.</comment>
  </data>
  <data name="ConstructorInfoDoesNotExist" xml:space="preserve">
    <value>The constructor info for the type {0} was null.</value>
    <comment>Indicates that the expected constructor info for the specified type does not exist.</comment>
  </data>
  <data name="ConnectionTypeNotFound" xml:space="preserve">
    <value>Can't find connection type '{0}'. </value>
    <comment>Indicates that the specified connection type could not be found.</comment>
  </data>
  <data name="TypeCouldNotBeLoaded" xml:space="preserve">
    <value>Could not load type '{0}': assembly name needed and no assembly name specified.</value>
    <comment>Indicates that the specified type could not be loaded because an assembly name was not specified but was required to load the type.</comment>
  </data>
  <data name="AssemblyNotFound" xml:space="preserve">
    <value>Can't locate assembly '{0}'.</value>
    <comment>Indicates that the specified assembly could not be found.</comment>
  </data>
  <data name="PagedSqlCouldNotBeParsed" xml:space="preserve">
    <value>Unable to parse SQL statement for paged query.</value>
    <comment>Indicates that the SQL statement could not be parsed for a paged query.</comment>
  </data>
  <data name="RepositoryProviderIsDisposed" xml:space="preserve">
    <value>The provider is disposed and cannot be used as a transaction provider.</value>
    <comment>Indicates that the repository provider is disposed and cannot be used as a transaction provider.</comment>
  </data>
  <data name="ReadOnlyPropertyCannotBeWrittenTo" xml:space="preserve">
    <value>The property '{0}' is not set and cannot be written from {1} '{2}'.</value>
  </data>
  <data name="BrokenPocoAttributePath" xml:space="preserve">
    <value>Unable to navigate to POCO attribute.</value>
  </data>
  <data name="NoMatchingPropertyForRelation" xml:space="preserve">
    <value>There is no property matching the specified relation.</value>
  </data>
  <data name="AttributeRequiredForType" xml:space="preserve">
    <value>The type '{0}' must be decorated with attribute '{1}'.</value>
    <comment>Indicates that the type does not have the required attribute.</comment>
  </data>
  <data name="DatabaseContextConnectionIsNotSqlConnection" xml:space="preserve">
    <value>The database context connection must be a SqlConnection.</value>
    <comment>Indicates that the type of the database connection must be a SqlConnection.</comment>
  </data>
  <data name="ValueCannotBeNullOrWhiteSpace" xml:space="preserve">
    <value>Value cannot be null or whitespace.</value>
  </data>
  <data name="IndexPropertiesNotSupported" xml:space="preserve">
    <value>Index properties are not supported by this method.</value>
  </data>
  <data name="UnableToSetPropertyToValue" xml:space="preserve">
    <value>Unable to set {0}.{1} to '{2}': {3}</value>
  </data>
  <data name="MatchingKeyPropertyNotFound" xml:space="preserve">
    <value>{0} does not have matching key property for {1}.{2}</value>
  </data>
  <data name="DelegateCouldNotBeCreatedWithReader" xml:space="preserve">
    <value>A delegate could not be created for {0} with the current reader.</value>
  </data>
</root>